/* Generated by Cython 0.25.1 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "cython_metaclass.h", 
            "field_dirty_set.h"
        ], 
        "language": "c++"
    }, 
    "module_name": "c_data_model_v2"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_1"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && METH_FASTCALL == PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; };
    template<typename U> bool operator !=(U other) { return *ptr != other; };
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__c_data_model_v2
#define __PYX_HAVE_API__c_data_model_v2
#include <string.h>
#include <stdio.h>
#include "cython_metaclass.h"
#include "field_dirty_set.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "c_data_model_v2.pyx",
  "stringsource",
  "type.pxd",
};

/* "c_data_model_v2.pyx":132
 *         void clear_all_dirty()
 * 
 * ctypedef long long int64             # <<<<<<<<<<<<<<
 * ctypedef unsigned long long uint64
 * 
 */
typedef PY_LONG_LONG __pyx_t_15c_data_model_v2_int64;

/* "c_data_model_v2.pyx":133
 * 
 * ctypedef long long int64
 * ctypedef unsigned long long uint64             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef unsigned PY_LONG_LONG __pyx_t_15c_data_model_v2_uint64;

/*--- Type declarations ---*/
struct __pyx_obj_15c_data_model_v2_FieldFilter;
struct __pyx_obj_15c_data_model_v2_DecodeContext;
struct __pyx_obj_15c_data_model_v2_Array;
struct __pyx_obj_15c_data_model_v2_Map;
struct __pyx_obj_15c_data_model_v2_IdMap;
struct __pyx_obj_15c_data_model_v2_Field;
struct __pyx_obj_15c_data_model_v2_FieldsDefine;
struct __pyx_obj_15c_data_model_v2_DataModelProtocol;
struct __pyx_obj_15c_data_model_v2_MetaDataModel;
struct __pyx_obj_15c_data_model_v2_DataModel;
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string;
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string;
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget;
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset;
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel;
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func;
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func;
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value;
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func;
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget;
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset;
struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py;
struct __pyx_opt_args_15c_data_model_v2__field_value_to_dict;
struct __pyx_opt_args_15c_data_model_v2_5Array__has_changed;
struct __pyx_opt_args_15c_data_model_v2_5Array__clear_changed;
struct __pyx_opt_args_15c_data_model_v2_3Map__has_changed;
struct __pyx_opt_args_15c_data_model_v2_3Map__clear_changed;
struct __pyx_opt_args_15c_data_model_v2_9DataModel__clear_field_changed;

/* "c_data_model_v2.pyx":429
 * 
 * 
 * cdef object _field_value_to_dict(encoder, Field field, object value,             # <<<<<<<<<<<<<<
 *                                  bint recursive, bint only_changed,
 *                                  bint clear_changed, FieldFilter field_filter,
 */
struct __pyx_opt_args_15c_data_model_v2__field_value_to_dict {
  int __pyx_n;
  int with_skip_from_pack;
};

/* "c_data_model_v2.pyx":784
 * 
 * 
 *     cpdef bint _has_changed(self, recursive=False):             # <<<<<<<<<<<<<<
 *         if self.changed:
 *             return True
 */
struct __pyx_opt_args_15c_data_model_v2_5Array__has_changed {
  int __pyx_n;
  PyObject *recursive;
};

/* "c_data_model_v2.pyx":794
 * 
 * 
 *     cdef void _clear_changed(self, bint recursive=False):             # <<<<<<<<<<<<<<
 *         self.changed = False
 *         if recursive:
 */
struct __pyx_opt_args_15c_data_model_v2_5Array__clear_changed {
  int __pyx_n;
  int recursive;
};

/* "c_data_model_v2.pyx":891
 * 
 * 
 *     cpdef bint _has_changed(self, bint recursive=False):             # <<<<<<<<<<<<<<
 *         if self.changed:
 *             return self.changed
 */
struct __pyx_opt_args_15c_data_model_v2_3Map__has_changed {
  int __pyx_n;
  int recursive;
};

/* "c_data_model_v2.pyx":905
 * 
 * 
 *     cdef inline void _clear_changed(self, bint recursive=False):             # <<<<<<<<<<<<<<
 *         self.changed = False
 *         self.removed.clear()
 */
struct __pyx_opt_args_15c_data_model_v2_3Map__clear_changed {
  int __pyx_n;
  int recursive;
};

/* "c_data_model_v2.pyx":1531
 * 
 * 
 *     cdef void _clear_field_changed(self, dict self_dict, Field field,             # <<<<<<<<<<<<<<
 *                                    bint recursive,
 *                                    bint clear_self_changed_set=True):
 */
struct __pyx_opt_args_15c_data_model_v2_9DataModel__clear_field_changed {
  int __pyx_n;
  int clear_self_changed_set;
};

/* "c_data_model_v2.pyx":225
 * 
 * 
 * cdef class FieldFilter:             # <<<<<<<<<<<<<<
 *     cdef set filters
 * 
 */
struct __pyx_obj_15c_data_model_v2_FieldFilter {
  PyObject_HEAD
  struct __pyx_vtabstruct_15c_data_model_v2_FieldFilter *__pyx_vtab;
  PyObject *filters;
};


/* "c_data_model_v2.pyx":713
 * 
 * 
 * cdef class DecodeContext(object):             # <<<<<<<<<<<<<<
 *     cdef dict known_objects
 *     cdef list tmp_unsolved_ref
 */
struct __pyx_obj_15c_data_model_v2_DecodeContext {
  PyObject_HEAD
  struct __pyx_vtabstruct_15c_data_model_v2_DecodeContext *__pyx_vtab;
  PyObject *known_objects;
  PyObject *tmp_unsolved_ref;
  PyObject *unsolved_ref;
  PyObject *resolve_ref_func;
  int mark_change;
  PyObject *mode;
  int sync_mode;
};


/* "c_data_model_v2.pyx":774
 * 
 * 
 * cdef class Array(list):             # <<<<<<<<<<<<<<
 *     cdef Field field
 *     cdef bint changed
 */
struct __pyx_obj_15c_data_model_v2_Array {
  PyListObject __pyx_base;
  struct __pyx_vtabstruct_15c_data_model_v2_Array *__pyx_vtab;
  struct __pyx_obj_15c_data_model_v2_Field *field;
  int changed;
};


/* "c_data_model_v2.pyx":879
 * 
 * 
 * cdef class Map(dict):             # <<<<<<<<<<<<<<
 *     cdef Field field
 *     cdef set removed
 */
struct __pyx_obj_15c_data_model_v2_Map {
  PyDictObject __pyx_base;
  struct __pyx_vtabstruct_15c_data_model_v2_Map *__pyx_vtab;
  struct __pyx_obj_15c_data_model_v2_Field *field;
  PyObject *removed;
  int changed;
};


/* "c_data_model_v2.pyx":970
 * 
 * 
 * cdef class IdMap(Map):             # <<<<<<<<<<<<<<
 *     def add(self, obj):
 *         self[obj.oid] = obj
 */
struct __pyx_obj_15c_data_model_v2_IdMap {
  struct __pyx_obj_15c_data_model_v2_Map __pyx_base;
};


/* "c_data_model_v2.pyx":1019
 * 
 * 
 * cdef class Field(object):             # <<<<<<<<<<<<<<
 *     cdef int index
 *     cdef str name
 */
struct __pyx_obj_15c_data_model_v2_Field {
  PyObject_HEAD
  struct __pyx_vtabstruct_15c_data_model_v2_Field *__pyx_vtab;
  int index;
  PyObject *name;
  PyObject *key;
  PyObject *type_name;
  PyObject *typ;
  PyObject *base_value_type;
  struct __pyx_obj_15c_data_model_v2_DataModelProtocol *data_model_protocol;
  int array;
  int map;
  int id_map;
  PyObject *key_type_name;
  int arithm;
  int has_min_value;
  int min_value;
  int is_unsigned;
  int ref;
  int skip_changed;
  PyObject *create;
  PyObject *__pyx_default;
  PyObject *dict_encoder;
  PyObject *dict_decoder;
  PyObject *dict_key_encoder;
  PyObject *dict_key_decoder;
  PyObject *dict_ref_encoder;
  PyObject *dict_ref_decoder;
  PyObject *__dict__;
};


/* "c_data_model_v2.pyx":1186
 * 
 * 
 * cdef class FieldsDefine:             # <<<<<<<<<<<<<<
 *     cdef list fields
 *     cdef dict fields_by_index
 */
struct __pyx_obj_15c_data_model_v2_FieldsDefine {
  PyObject_HEAD
  PyObject *fields;
  PyObject *fields_by_index;
  PyObject *fields_by_name;
  PyObject *fields_by_key;
  PyObject *fields_is_container;
};


/* "c_data_model_v2.pyx":1405
 * 
 * 
 * cdef class DataModelProtocol:             # <<<<<<<<<<<<<<
 *     cdef FieldsDefine fields_define
 *     cdef object cls
 */
struct __pyx_obj_15c_data_model_v2_DataModelProtocol {
  PyObject_HEAD
  struct __pyx_obj_15c_data_model_v2_FieldsDefine *fields_define;
  PyObject *cls;
  PyObject *cls_name;
};


/* "c_data_model_v2.pyx":1415
 * 
 * 
 * cdef class MetaDataModel(type):             # <<<<<<<<<<<<<<
 *     def __init__(cls, clsname, bases, attrs):
 *         if bases is None:
 */
struct __pyx_obj_15c_data_model_v2_MetaDataModel {
  PyHeapTypeObject __pyx_base;
};


/* "c_data_model_v2.pyx":1490
 * 
 * 
 * cdef class DataModel(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef DataModelProtocol protocol
 */
struct __pyx_obj_15c_data_model_v2_DataModel {
  PyObject_HEAD
  struct __pyx_vtabstruct_15c_data_model_v2_DataModel *__pyx_vtab;
  struct __pyx_obj_15c_data_model_v2_DataModelProtocol *protocol;
  FieldDirtySet changed_set;
};


/* "c_data_model_v2.pyx":247
 * 
 * 
 * cdef inline object _key_encode_to_string(str type_name, object encode):             # <<<<<<<<<<<<<<
 *     to_string = _value2string.get(type_name)
 *     assert to_string is not None
 */
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string {
  PyObject_HEAD
  PyObject *__pyx_v_encode;
  PyObject *__pyx_v_to_string;
};


/* "c_data_model_v2.pyx":256
 * 
 * 
 * cdef inline object _key_decode_from_string(str type_name, object decode):             # <<<<<<<<<<<<<<
 *     from_string = _string2value.get(type_name)
 *     assert from_string is not None
 */
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string {
  PyObject_HEAD
  PyObject *__pyx_v_decode;
  PyObject *__pyx_v_from_string;
};


/* "c_data_model_v2.pyx":401
 * 
 * 
 * cdef object make_fget(Field field):             # <<<<<<<<<<<<<<
 *     def fget(object self):
 *         return self.__dict__.get(field.key, field.default)
 */
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget {
  PyObject_HEAD
  struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field;
};


/* "c_data_model_v2.pyx":407
 * 
 * 
 * cdef object make_fset(Field field):             # <<<<<<<<<<<<<<
 *     def fset(object self, object value):
 *         cdef dict self_dict = self.__dict__
 */
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset {
  PyObject_HEAD
  struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field;
};


/* "c_data_model_v2.pyx":418
 * 
 * 
 * cdef object make_fdel(Field field):             # <<<<<<<<<<<<<<
 *     def fdel(object self):
 *         cdef DataModel dm_self
 */
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel {
  PyObject_HEAD
  struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field;
};


/* "c_data_model_v2.pyx":1254
 * 
 * 
 * cdef object make_get_func(Field field):             # <<<<<<<<<<<<<<
 *     if field.is_data_model_type():
 *         def get_func(self):
 */
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func {
  PyObject_HEAD
  struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field;
};


/* "c_data_model_v2.pyx":1272
 * 
 * 
 * cdef object make_add_func(Field field):             # <<<<<<<<<<<<<<
 *     if field.type_name in _int_types:
 *         if field.type_name in _unsigned_int_types:
 */
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func {
  PyObject_HEAD
  struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field;
};


/* "c_data_model_v2.pyx":1302
 * 
 * 
 * cdef object make_sub_func_with_min_value(Field field):             # <<<<<<<<<<<<<<
 *     cdef int64 i_min_value = 0
 *     cdef uint64 ui_min_value = 0
 */
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value {
  PyObject_HEAD
  double __pyx_v_f_min_value;
  struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field;
  __pyx_t_15c_data_model_v2_int64 __pyx_v_i_min_value;
  __pyx_t_15c_data_model_v2_uint64 __pyx_v_ui_min_value;
};


/* "c_data_model_v2.pyx":1350
 * 
 * 
 * cdef object make_signed_sub_func(Field field):             # <<<<<<<<<<<<<<
 *     if field.type_name in _int_types:
 *         def _sub(object self, object _value):
 */
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func {
  PyObject_HEAD
  struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field;
};


/* "c_data_model_v2.pyx":1373
 * 
 * 
 * cdef object make_container_fget(Field field):             # <<<<<<<<<<<<<<
 *     def fget(object self):
 *         cdef dict self_dict = self.__dict__
 */
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget {
  PyObject_HEAD
  struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field;
};


/* "c_data_model_v2.pyx":1380
 * 
 * 
 * cdef object make_container_fset(Field field):             # <<<<<<<<<<<<<<
 *     def fset(object self, object value):
 *         cdef dict self_dict = self.__dict__
 */
struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset {
  PyObject_HEAD
  struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field;
};


/* "cfunc.to_py":64
 * 
 * @cname("__Pyx_CFunc_bint____Field___to_py")
 * cdef object __Pyx_CFunc_bint____Field___to_py(bint (*f)(Field) except *):             # <<<<<<<<<<<<<<
 *     def wrap(Field field):
 *         """wrap(field: 'Field') -> bool"""
 */
struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py {
  PyObject_HEAD
  int (*__pyx_v_f)(struct __pyx_obj_15c_data_model_v2_Field *);
};



/* "c_data_model_v2.pyx":225
 * 
 * 
 * cdef class FieldFilter:             # <<<<<<<<<<<<<<
 *     cdef set filters
 * 
 */

struct __pyx_vtabstruct_15c_data_model_v2_FieldFilter {
  int (*is_filted)(struct __pyx_obj_15c_data_model_v2_FieldFilter *, struct __pyx_obj_15c_data_model_v2_Field *);
};
static struct __pyx_vtabstruct_15c_data_model_v2_FieldFilter *__pyx_vtabptr_15c_data_model_v2_FieldFilter;


/* "c_data_model_v2.pyx":713
 * 
 * 
 * cdef class DecodeContext(object):             # <<<<<<<<<<<<<<
 *     cdef dict known_objects
 *     cdef list tmp_unsolved_ref
 */

struct __pyx_vtabstruct_15c_data_model_v2_DecodeContext {
  void (*set_mode)(struct __pyx_obj_15c_data_model_v2_DecodeContext *, PyObject *);
  void (*add_known_object)(struct __pyx_obj_15c_data_model_v2_DecodeContext *, PyObject *, PyObject *);
  void (*add_unsolved_ref)(struct __pyx_obj_15c_data_model_v2_DecodeContext *, PyObject *);
  void (*resolve_ref)(struct __pyx_obj_15c_data_model_v2_DecodeContext *);
};
static struct __pyx_vtabstruct_15c_data_model_v2_DecodeContext *__pyx_vtabptr_15c_data_model_v2_DecodeContext;


/* "c_data_model_v2.pyx":774
 * 
 * 
 * cdef class Array(list):             # <<<<<<<<<<<<<<
 *     cdef Field field
 *     cdef bint changed
 */

struct __pyx_vtabstruct_15c_data_model_v2_Array {
  int (*_has_changed)(struct __pyx_obj_15c_data_model_v2_Array *, int __pyx_skip_dispatch, struct __pyx_opt_args_15c_data_model_v2_5Array__has_changed *__pyx_optional_args);
  void (*_clear_changed)(struct __pyx_obj_15c_data_model_v2_Array *, struct __pyx_opt_args_15c_data_model_v2_5Array__clear_changed *__pyx_optional_args);
  void (*_broadcast_changed)(struct __pyx_obj_15c_data_model_v2_Array *, int);
  void (*_copy_from)(struct __pyx_obj_15c_data_model_v2_Array *, PyObject *);
  void (*_append)(struct __pyx_obj_15c_data_model_v2_Array *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_15c_data_model_v2_Array *__pyx_vtabptr_15c_data_model_v2_Array;


/* "c_data_model_v2.pyx":879
 * 
 * 
 * cdef class Map(dict):             # <<<<<<<<<<<<<<
 *     cdef Field field
 *     cdef set removed
 */

struct __pyx_vtabstruct_15c_data_model_v2_Map {
  int (*_has_changed)(struct __pyx_obj_15c_data_model_v2_Map *, int __pyx_skip_dispatch, struct __pyx_opt_args_15c_data_model_v2_3Map__has_changed *__pyx_optional_args);
  PyObject *(*get_removed_set)(struct __pyx_obj_15c_data_model_v2_Map *);
  void (*_clear_changed)(struct __pyx_obj_15c_data_model_v2_Map *, struct __pyx_opt_args_15c_data_model_v2_3Map__clear_changed *__pyx_optional_args);
  void (*_broadcast_changed)(struct __pyx_obj_15c_data_model_v2_Map *, int);
  void (*_raw_setitem)(struct __pyx_obj_15c_data_model_v2_Map *, PyObject *, PyObject *);
  void (*_copy_from)(struct __pyx_obj_15c_data_model_v2_Map *, PyObject *);
};
static struct __pyx_vtabstruct_15c_data_model_v2_Map *__pyx_vtabptr_15c_data_model_v2_Map;
static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2_3Map_get_removed_set(struct __pyx_obj_15c_data_model_v2_Map *);
static CYTHON_INLINE void __pyx_f_15c_data_model_v2_3Map__clear_changed(struct __pyx_obj_15c_data_model_v2_Map *, struct __pyx_opt_args_15c_data_model_v2_3Map__clear_changed *__pyx_optional_args);


/* "c_data_model_v2.pyx":970
 * 
 * 
 * cdef class IdMap(Map):             # <<<<<<<<<<<<<<
 *     def add(self, obj):
 *         self[obj.oid] = obj
 */

struct __pyx_vtabstruct_15c_data_model_v2_IdMap {
  struct __pyx_vtabstruct_15c_data_model_v2_Map __pyx_base;
};
static struct __pyx_vtabstruct_15c_data_model_v2_IdMap *__pyx_vtabptr_15c_data_model_v2_IdMap;


/* "c_data_model_v2.pyx":1019
 * 
 * 
 * cdef class Field(object):             # <<<<<<<<<<<<<<
 *     cdef int index
 *     cdef str name
 */

struct __pyx_vtabstruct_15c_data_model_v2_Field {
  int (*is_data_model_type)(struct __pyx_obj_15c_data_model_v2_Field *);
  int (*is_container)(struct __pyx_obj_15c_data_model_v2_Field *);
};
static struct __pyx_vtabstruct_15c_data_model_v2_Field *__pyx_vtabptr_15c_data_model_v2_Field;
static CYTHON_INLINE int __pyx_f_15c_data_model_v2_5Field_is_data_model_type(struct __pyx_obj_15c_data_model_v2_Field *);
static CYTHON_INLINE int __pyx_f_15c_data_model_v2_5Field_is_container(struct __pyx_obj_15c_data_model_v2_Field *);


/* "c_data_model_v2.pyx":1490
 * 
 * 
 * cdef class DataModel(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef DataModelProtocol protocol
 */

struct __pyx_vtabstruct_15c_data_model_v2_DataModel {
  struct __pyx_obj_15c_data_model_v2_DataModelProtocol *(*_get_protocol)(struct __pyx_obj_15c_data_model_v2_DataModel *, int __pyx_skip_dispatch);
  struct __pyx_obj_15c_data_model_v2_FieldsDefine *(*_get_fields_define)(struct __pyx_obj_15c_data_model_v2_DataModel *, int __pyx_skip_dispatch);
  void (*_set_data)(struct __pyx_obj_15c_data_model_v2_DataModel *, PyObject *);
  void (*_clear_field_changed)(struct __pyx_obj_15c_data_model_v2_DataModel *, PyObject *, struct __pyx_obj_15c_data_model_v2_Field *, int, struct __pyx_opt_args_15c_data_model_v2_9DataModel__clear_field_changed *__pyx_optional_args);
  int (*_has_field_changed)(struct __pyx_obj_15c_data_model_v2_DataModel *, struct __pyx_obj_15c_data_model_v2_Field *, PyObject *, int);
  void (*_clear_changed)(struct __pyx_obj_15c_data_model_v2_DataModel *, PyObject *, int);
  void (*_set_field_changed)(struct __pyx_obj_15c_data_model_v2_DataModel *, struct __pyx_obj_15c_data_model_v2_Field *);
  void (*_set_changed)(struct __pyx_obj_15c_data_model_v2_DataModel *, PyObject *);
  PyObject *(*_get_info_)(struct __pyx_obj_15c_data_model_v2_DataModel *, int);
  int (*_has_changed)(struct __pyx_obj_15c_data_model_v2_DataModel *, int);
  PyObject *(*_short_repr_)(struct __pyx_obj_15c_data_model_v2_DataModel *, int __pyx_skip_dispatch);
  PyObject *(*_long_repr_)(struct __pyx_obj_15c_data_model_v2_DataModel *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_15c_data_model_v2_DataModel *__pyx_vtabptr_15c_data_model_v2_DataModel;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PySet_Update.proto */
static CYTHON_INLINE int __Pyx_PySet_Update(PyObject* set, PyObject* it);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)\
    ((likely((cfunc)->func && (cfunc)->flag == METH_O)) ? (*((cfunc)->func))(self, arg) :\
        ((PY_VERSION_HEX >= 0x030600B1 && (cfunc)->func && (cfunc)->flag == METH_FASTCALL) ?\
            (*(__Pyx_PyCFunctionFast)(cfunc)->func)(self, &arg, 1, NULL) :\
        __Pyx__CallUnboundCMethod1(cfunc, self, arg)))
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** value1, PyObject** value2,
                                             int is_tuple, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* pop.proto */
static CYTHON_INLINE PyObject* __Pyx__PyObject_Pop(PyObject* L);
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE PyObject* __Pyx_PyList_Pop(PyObject* L);
#define __Pyx_PyObject_Pop(L) (likely(PyList_CheckExact(L)) ?\
    __Pyx_PyList_Pop(L) : __Pyx__PyObject_Pop(L))
#else
#define __Pyx_PyList_Pop(L)  __Pyx__PyObject_Pop(L)
#define __Pyx_PyObject_Pop(L)  __Pyx__PyObject_Pop(L)
#endif

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    ((likely((cfunc)->func)) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
             ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
              (PY_VERSION_HEX >= 0x030600B1 && (cfunc)->flag == METH_FASTCALL ?  (*(__Pyx_PyCFunctionFast)(cfunc)->func)(self, &PyTuple_GET_ITEM(__pyx_empty_tuple, 0), 0, NULL) :\
                __Pyx__CallUnboundCMethod0(cfunc, self))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* pop_index.proto */
static PyObject* __Pyx__PyObject_PopNewIndex(PyObject* L, PyObject* py_ix);
static PyObject* __Pyx__PyObject_PopIndex(PyObject* L, PyObject* py_ix);
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static PyObject* __Pyx__PyList_PopIndex(PyObject* L, PyObject* py_ix, Py_ssize_t ix);
#define __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    (likely(PyList_CheckExact(L) && __Pyx_fits_Py_ssize_t(ix, type, is_signed))) ?\
        __Pyx__PyList_PopIndex(L, py_ix, ix) : (\
        (unlikely(py_ix == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
            __Pyx__PyObject_PopIndex(L, py_ix)))
#define __Pyx_PyList_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    __Pyx_fits_Py_ssize_t(ix, type, is_signed) ?\
        __Pyx__PyList_PopIndex(L, py_ix, ix) : (\
        (unlikely(py_ix == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
            __Pyx__PyObject_PopIndex(L, py_ix)))
#else
#define __Pyx_PyList_PopIndex(L, py_ix, ix, is_signed, type, to_py_func)\
    __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func)
#define __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    (unlikely(py_ix == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
        __Pyx__PyObject_PopIndex(L, py_ix))
#endif

/* py_dict_clear.proto */
#define __Pyx_PyDict_Clear(d) (PyDict_Clear(d), 0)

/* PyObjectCallMethod2.proto */
static PyObject* __Pyx_PyObject_CallMethod2(PyObject* obj, PyObject* method_name, PyObject* arg1, PyObject* arg2);

/* dict_setdefault.proto */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value, int is_safe_type);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* SliceTupleAndList.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
#else
#define __Pyx_PyList_GetSlice(seq, start, stop)   PySequence_GetSlice(seq, start, stop)
#define __Pyx_PyTuple_GetSlice(seq, start, stop)  PySequence_GetSlice(seq, start, stop)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* StringJoin.proto */
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_PY_LONG_LONG(PY_LONG_LONG value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_As_unsigned_PY_LONG_LONG(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_As_PY_LONG_LONG(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static int __pyx_f_15c_data_model_v2_11FieldFilter_is_filted(struct __pyx_obj_15c_data_model_v2_FieldFilter *__pyx_v_self, struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field); /* proto*/
static void __pyx_f_15c_data_model_v2_13DecodeContext_set_mode(struct __pyx_obj_15c_data_model_v2_DecodeContext *__pyx_v_self, PyObject *__pyx_v_mode); /* proto*/
static void __pyx_f_15c_data_model_v2_13DecodeContext_add_known_object(struct __pyx_obj_15c_data_model_v2_DecodeContext *__pyx_v_self, PyObject *__pyx_v_oid, PyObject *__pyx_v_obj); /* proto*/
static void __pyx_f_15c_data_model_v2_13DecodeContext_add_unsolved_ref(struct __pyx_obj_15c_data_model_v2_DecodeContext *__pyx_v_self, PyObject *__pyx_v_data); /* proto*/
static void __pyx_f_15c_data_model_v2_13DecodeContext_resolve_ref(struct __pyx_obj_15c_data_model_v2_DecodeContext *__pyx_v_self); /* proto*/
static int __pyx_f_15c_data_model_v2_5Array__has_changed(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_15c_data_model_v2_5Array__has_changed *__pyx_optional_args); /* proto*/
static void __pyx_f_15c_data_model_v2_5Array__clear_changed(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, struct __pyx_opt_args_15c_data_model_v2_5Array__clear_changed *__pyx_optional_args); /* proto*/
static void __pyx_f_15c_data_model_v2_5Array__broadcast_changed(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, int __pyx_v_recursive); /* proto*/
static void __pyx_f_15c_data_model_v2_5Array__copy_from(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_src); /* proto*/
static void __pyx_f_15c_data_model_v2_5Array__append(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_v, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_15c_data_model_v2_3Map__has_changed(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_15c_data_model_v2_3Map__has_changed *__pyx_optional_args); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2_3Map_get_removed_set(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self); /* proto*/
static CYTHON_INLINE void __pyx_f_15c_data_model_v2_3Map__clear_changed(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, struct __pyx_opt_args_15c_data_model_v2_3Map__clear_changed *__pyx_optional_args); /* proto*/
static void __pyx_f_15c_data_model_v2_3Map__broadcast_changed(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, int __pyx_v_recursive); /* proto*/
static void __pyx_f_15c_data_model_v2_3Map__raw_setitem(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, PyObject *__pyx_v_k, PyObject *__pyx_v_v); /* proto*/
static void __pyx_f_15c_data_model_v2_3Map__copy_from(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, PyObject *__pyx_v_src); /* proto*/
static CYTHON_INLINE int __pyx_f_15c_data_model_v2_5Field_is_data_model_type(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_15c_data_model_v2_5Field_is_container(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_self); /* proto*/
static struct __pyx_obj_15c_data_model_v2_DataModelProtocol *__pyx_f_15c_data_model_v2_9DataModel__get_protocol(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_15c_data_model_v2_FieldsDefine *__pyx_f_15c_data_model_v2_9DataModel__get_fields_define(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_15c_data_model_v2_9DataModel__set_data(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto*/
static void __pyx_f_15c_data_model_v2_9DataModel__clear_field_changed(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_self_dict, struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field, int __pyx_v_recursive, struct __pyx_opt_args_15c_data_model_v2_9DataModel__clear_field_changed *__pyx_optional_args); /* proto*/
static int __pyx_f_15c_data_model_v2_9DataModel__has_field_changed(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field, PyObject *__pyx_v_self_dict, int __pyx_v_recursive); /* proto*/
static void __pyx_f_15c_data_model_v2_9DataModel__clear_changed(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_field_names, int __pyx_v_recursive); /* proto*/
static void __pyx_f_15c_data_model_v2_9DataModel__set_field_changed(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field); /* proto*/
static void __pyx_f_15c_data_model_v2_9DataModel__set_changed(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_field_names); /* proto*/
static PyObject *__pyx_f_15c_data_model_v2_9DataModel__get_info_(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, int __pyx_v_nfields); /* proto*/
static int __pyx_f_15c_data_model_v2_9DataModel__has_changed(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, int __pyx_v_recursive); /* proto*/
static PyObject *__pyx_f_15c_data_model_v2_9DataModel__short_repr_(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_15c_data_model_v2_9DataModel__long_repr_(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cython_metaclass' */

/* Module declarations from 'c_data_model_v2' */
static PyTypeObject *__pyx_ptype_15c_data_model_v2_FieldFilter = 0;
static PyTypeObject *__pyx_ptype_15c_data_model_v2_DecodeContext = 0;
static PyTypeObject *__pyx_ptype_15c_data_model_v2_Array = 0;
static PyTypeObject *__pyx_ptype_15c_data_model_v2_Map = 0;
static PyTypeObject *__pyx_ptype_15c_data_model_v2_IdMap = 0;
static PyTypeObject *__pyx_ptype_15c_data_model_v2_Field = 0;
static PyTypeObject *__pyx_ptype_15c_data_model_v2_FieldsDefine = 0;
static PyTypeObject *__pyx_ptype_15c_data_model_v2_DataModelProtocol = 0;
static PyTypeObject *__pyx_ptype_15c_data_model_v2_MetaDataModel = 0;
static PyTypeObject *__pyx_ptype_15c_data_model_v2_DataModel = 0;
static PyTypeObject *__pyx_ptype_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string = 0;
static PyTypeObject *__pyx_ptype_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string = 0;
static PyTypeObject *__pyx_ptype_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget = 0;
static PyTypeObject *__pyx_ptype_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset = 0;
static PyTypeObject *__pyx_ptype_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel = 0;
static PyTypeObject *__pyx_ptype_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func = 0;
static PyTypeObject *__pyx_ptype_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func = 0;
static PyTypeObject *__pyx_ptype_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value = 0;
static PyTypeObject *__pyx_ptype_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func = 0;
static PyTypeObject *__pyx_ptype_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget = 0;
static PyTypeObject *__pyx_ptype_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset = 0;
static PyTypeObject *__pyx_ptype___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py = 0;
static PyObject *__pyx_v_15c_data_model_v2_SKIP_FROM_PACK = 0;
static PyObject *__pyx_v_15c_data_model_v2__default_values = 0;
static PyObject *__pyx_v_15c_data_model_v2__value2string = 0;
static PyObject *__pyx_v_15c_data_model_v2__string2value = 0;
static PyObject *__pyx_v_15c_data_model_v2__int_types = 0;
static PyObject *__pyx_v_15c_data_model_v2__unsigned_int_types = 0;
static PyObject *__pyx_v_15c_data_model_v2__float_types = 0;
static CYTHON_INLINE int __pyx_f_15c_data_model_v2__exclude_oid_field(struct __pyx_obj_15c_data_model_v2_Field *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2__key_encode_to_string(PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2__key_decode_from_string(PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2__create_object(struct __pyx_obj_15c_data_model_v2_Field *, PyObject *); /*proto*/
static CYTHON_INLINE void __pyx_f_15c_data_model_v2__replace_obj_dict(PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2__value_short_repr(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2_make_autogen_func_name(PyObject *, PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2__dict_get_encoder(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2__dict_get_decoder(PyObject *); /*proto*/
static CYTHON_INLINE void __pyx_f_15c_data_model_v2__container_copy_from(struct __pyx_obj_15c_data_model_v2_Field *, PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE void __pyx_f_15c_data_model_v2__container_clear_changed(struct __pyx_obj_15c_data_model_v2_Field *, PyObject *, int); /*proto*/
static CYTHON_INLINE int __pyx_f_15c_data_model_v2__container_has_changed(struct __pyx_obj_15c_data_model_v2_Field *, PyObject *, int); /*proto*/
static CYTHON_INLINE int __pyx_f_15c_data_model_v2__container_item_has_changed(struct __pyx_obj_15c_data_model_v2_Field *, PyObject *, int); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2__container_item_clear_changed(struct __pyx_obj_15c_data_model_v2_Field *, PyObject *, int); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2__container_item_set_changed(struct __pyx_obj_15c_data_model_v2_Field *, PyObject *, int); /*proto*/
static PyObject *__pyx_f_15c_data_model_v2_make_fget(struct __pyx_obj_15c_data_model_v2_Field *); /*proto*/
static PyObject *__pyx_f_15c_data_model_v2_make_fset(struct __pyx_obj_15c_data_model_v2_Field *); /*proto*/
static PyObject *__pyx_f_15c_data_model_v2_make_fdel(struct __pyx_obj_15c_data_model_v2_Field *); /*proto*/
static PyObject *__pyx_f_15c_data_model_v2__field_value_to_dict(PyObject *, struct __pyx_obj_15c_data_model_v2_Field *, PyObject *, int, int, int, struct __pyx_obj_15c_data_model_v2_FieldFilter *, struct __pyx_opt_args_15c_data_model_v2__field_value_to_dict *__pyx_optional_args); /*proto*/
static int __pyx_f_15c_data_model_v2__encode_to_dict(PyObject *, struct __pyx_obj_15c_data_model_v2_DataModelProtocol *, PyObject *, int, int, int, struct __pyx_obj_15c_data_model_v2_FieldFilter *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2__field_value_from_dict(struct __pyx_obj_15c_data_model_v2_Field *, PyObject *, PyObject *, PyObject *, struct __pyx_obj_15c_data_model_v2_DecodeContext *); /*proto*/
static PyObject *__pyx_f_15c_data_model_v2__field_object_from_dict(struct __pyx_obj_15c_data_model_v2_Field *, PyObject *, PyObject *, PyObject *, struct __pyx_obj_15c_data_model_v2_DecodeContext *); /*proto*/
static void __pyx_f_15c_data_model_v2__decode_array_from_dict(struct __pyx_obj_15c_data_model_v2_Field *, PyObject *, PyObject *, struct __pyx_obj_15c_data_model_v2_DecodeContext *); /*proto*/
static void __pyx_f_15c_data_model_v2__decode_map_from_dict(struct __pyx_obj_15c_data_model_v2_Field *, PyObject *, PyObject *, struct __pyx_obj_15c_data_model_v2_DecodeContext *); /*proto*/
static void __pyx_f_15c_data_model_v2__decode_idmap_from_dict(struct __pyx_obj_15c_data_model_v2_Field *, PyObject *, PyObject *, struct __pyx_obj_15c_data_model_v2_DecodeContext *); /*proto*/
static void __pyx_f_15c_data_model_v2__decode_from_dict(struct __pyx_obj_15c_data_model_v2_DataModelProtocol *, PyObject *, PyObject *, PyObject *, struct __pyx_obj_15c_data_model_v2_DecodeContext *); /*proto*/
static struct __pyx_obj_15c_data_model_v2_Array *__pyx_f_15c_data_model_v2__new_array(struct __pyx_obj_15c_data_model_v2_Field *); /*proto*/
static struct __pyx_obj_15c_data_model_v2_Map *__pyx_f_15c_data_model_v2__new_map(struct __pyx_obj_15c_data_model_v2_Field *); /*proto*/
static struct __pyx_obj_15c_data_model_v2_IdMap *__pyx_f_15c_data_model_v2__new_id_map(struct __pyx_obj_15c_data_model_v2_Field *); /*proto*/
static PyObject *__pyx_f_15c_data_model_v2__new_container(struct __pyx_obj_15c_data_model_v2_Field *); /*proto*/
static PyObject *__pyx_f_15c_data_model_v2__get_container_class(struct __pyx_obj_15c_data_model_v2_Field *); /*proto*/
static PyObject *__pyx_f_15c_data_model_v2__copy_any_base_fields(PyObject *, PyObject *, PyObject *, PyObject *, PyObject *); /*proto*/
static struct __pyx_obj_15c_data_model_v2_DataModelProtocol *__pyx_f_15c_data_model_v2_try_get_protocol(PyObject *); /*proto*/
static PyObject *__pyx_f_15c_data_model_v2_make_get_func(struct __pyx_obj_15c_data_model_v2_Field *); /*proto*/
static PyObject *__pyx_f_15c_data_model_v2_no_number_type_error(struct __pyx_obj_15c_data_model_v2_Field *); /*proto*/
static PyObject *__pyx_f_15c_data_model_v2_make_add_func(struct __pyx_obj_15c_data_model_v2_Field *); /*proto*/
static PyObject *__pyx_f_15c_data_model_v2_make_sub_func_with_min_value(struct __pyx_obj_15c_data_model_v2_Field *); /*proto*/
static PyObject *__pyx_f_15c_data_model_v2_make_unsigned_sub_func(struct __pyx_obj_15c_data_model_v2_Field *); /*proto*/
static PyObject *__pyx_f_15c_data_model_v2_make_signed_sub_func(struct __pyx_obj_15c_data_model_v2_Field *); /*proto*/
static PyObject *__pyx_f_15c_data_model_v2_make_container_fget(struct __pyx_obj_15c_data_model_v2_Field *); /*proto*/
static PyObject *__pyx_f_15c_data_model_v2_make_container_fset(struct __pyx_obj_15c_data_model_v2_Field *); /*proto*/
static PyObject *__pyx_f_15c_data_model_v2_make_container_fdel(struct __pyx_obj_15c_data_model_v2_Field *); /*proto*/
static PyObject *__Pyx_CFunc_bint____Field___to_py(int (*)(struct __pyx_obj_15c_data_model_v2_Field *)); /*proto*/
#define __Pyx_MODULE_NAME "c_data_model_v2"
int __pyx_module_is_main_c_data_model_v2 = 0;

/* Implementation of 'c_data_model_v2' */
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_cmp;
static PyObject *__pyx_builtin_OverflowError;
static PyObject *__pyx_builtin_property;
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_x[] = "x";
static const char __pyx_k__6[] = "..";
static const char __pyx_k__7[] = "_";
static const char __pyx_k__51[] = "__";
static const char __pyx_k__53[] = ",";
static const char __pyx_k__56[] = "";
static const char __pyx_k_add[] = "_add";
static const char __pyx_k_arg[] = "arg";
static const char __pyx_k_cmp[] = "cmp";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_fmt[] = "fmt";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_map[] = "map";
static const char __pyx_k_oid[] = "oid";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_ref[] = "ref";
static const char __pyx_k_s_s[] = "%s=%s";
static const char __pyx_k_sub[] = "_sub";
static const char __pyx_k_typ[] = "typ";
static const char __pyx_k_bool[] = "bool";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_fdel[] = "fdel";
static const char __pyx_k_fget[] = "fget";
static const char __pyx_k_fset[] = "fset";
static const char __pyx_k_iadd[] = "__iadd__";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_int8[] = "int8";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_sort[] = "sort";
static const char __pyx_k_sync[] = "sync";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_wrap[] = "wrap";
static const char __pyx_k_add_2[] = "add";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_attrs[] = "attrs";
static const char __pyx_k_bases[] = "__bases__";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_field[] = "field";
static const char __pyx_k_float[] = "float";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_int16[] = "int16";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_int64[] = "int64";
static const char __pyx_k_kwarg[] = "kwarg";
static const char __pyx_k_oid_2[] = "_oid";
static const char __pyx_k_s_s_2[] = "%s(%s)";
static const char __pyx_k_sub_2[] = "sub";
static const char __pyx_k_uint8[] = "uint8";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_append[] = "_append";
static const char __pyx_k_arithm[] = "arithm";
static const char __pyx_k_dict_2[] = "dict";
static const char __pyx_k_double[] = "double";
static const char __pyx_k_fields[] = "_fields";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_id_map[] = "id_map";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_remove[] = "remove";
static const char __pyx_k_string[] = "string";
static const char __pyx_k_uint16[] = "uint16";
static const char __pyx_k_uint32[] = "uint32";
static const char __pyx_k_uint64[] = "uint64";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_bases_2[] = "bases";
static const char __pyx_k_clsname[] = "clsname";
static const char __pyx_k_default[] = "default";
static const char __pyx_k_delitem[] = "__delitem__";
static const char __pyx_k_dm_self[] = "dm_self";
static const char __pyx_k_popitem[] = "popitem";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_setitem[] = "__setitem__";
static const char __pyx_k_value_2[] = "_value";
static const char __pyx_k_MapField[] = "MapField";
static const char __pyx_k_get_func[] = "get_func";
static const char __pyx_k_iterkeys[] = "iterkeys";
static const char __pyx_k_obj_dict[] = "obj_dict";
static const char __pyx_k_override[] = "override";
static const char __pyx_k_property[] = "property";
static const char __pyx_k_protocol[] = "_protocol_";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_PackError[] = "PackError";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_add_field[] = "add_field";
static const char __pyx_k_container[] = "container";
static const char __pyx_k_converter[] = "_converter";
static const char __pyx_k_iteritems[] = "iteritems";
static const char __pyx_k_long_repr[] = "_long_repr_";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_min_value[] = "min_value";
static const char __pyx_k_new_value[] = "new_value";
static const char __pyx_k_old_value[] = "old_value";
static const char __pyx_k_recursive[] = "recursive";
static const char __pyx_k_self_dict[] = "self_dict";
static const char __pyx_k_unsupport[] = "unsupport";
static const char __pyx_k_ArrayField[] = "ArrayField";
static const char __pyx_k_IdMapField[] = "IdMapField";
static const char __pyx_k_field_name[] = "field_name";
static const char __pyx_k_itervalues[] = "itervalues";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_setdefault[] = "setdefault";
static const char __pyx_k_short_repr[] = "_short_repr_";
static const char __pyx_k_startswith[] = "startswith";
static const char __pyx_k_DefineError[] = "DefineError";
static const char __pyx_k_UnpackError[] = "UnpackError";
static const char __pyx_k_cfunc_to_py[] = "cfunc.to_py";
static const char __pyx_k_has_changed[] = "_has_changed";
static const char __pyx_k_mark_change[] = "mark_change";
static const char __pyx_k_resolve_ref[] = "resolve_ref";
static const char __pyx_k_sort_fields[] = "sort_fields";
static const char __pyx_k_NoFieldError[] = "NoFieldError";
static const char __pyx_k_OperateError[] = "OperateError";
static const char __pyx_k_SkipFromPack[] = "SkipFromPack";
static const char __pyx_k_field_filter[] = "field_filter";
static const char __pyx_k_get_protocol[] = "_get_protocol";
static const char __pyx_k_only_changed[] = "only_changed";
static const char __pyx_k_pack_to_dict[] = "pack_to_dict";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_OverflowError[] = "OverflowError";
static const char __pyx_k_clear_changed[] = "clear_changed";
static const char __pyx_k_fields_by_key[] = "_fields_by_key";
static const char __pyx_k_invalid_index[] = "invalid index";
static const char __pyx_k_src_dict_data[] = "src_dict_data";
static const char __pyx_k_DataModelError[] = "DataModelError";
static const char __pyx_k_fields_by_name[] = "_fields_by_name";
static const char __pyx_k_c_data_model_v2[] = "c_data_model_v2";
static const char __pyx_k_container_class[] = "container_class";
static const char __pyx_k_fields_by_index[] = "_fields_by_index";
static const char __pyx_k_no_such_field_s[] = "no such field: %s";
static const char __pyx_k_s_name_s_index_d[] = "<%s name=%s, index=%d>";
static const char __pyx_k_unpack_from_dict[] = "unpack_from_dict";
static const char __pyx_k_unsupported_type[] = "unsupported type";
static const char __pyx_k_copy_bases_fields[] = "copy_bases_fields";
static const char __pyx_k_copy_class_fields[] = "copy_class_fields";
static const char __pyx_k_get_fields_define[] = "_get_fields_define";
static const char __pyx_k_DuplicateNameError[] = "DuplicateNameError";
static const char __pyx_k_unsupported_format[] = "unsupported format: {}";
static const char __pyx_k_DuplicateIndexError[] = "DuplicateIndexError";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_DataModelProtocol_of[] = "<DataModelProtocol of {}>";
static const char __pyx_k_overflow_lower_limit[] = "overflow lower limit";
static const char __pyx_k_make_auto_gen_methods[] = "make_auto_gen_methods";
static const char __pyx_k_make_fdel_locals_fdel[] = "make_fdel.<locals>.fdel";
static const char __pyx_k_make_fget_locals_fget[] = "make_fget.<locals>.fget";
static const char __pyx_k_make_fset_locals_fset[] = "make_fset.<locals>.fset";
static const char __pyx_k_make_add_func_locals__add[] = "make_add_func.<locals>._add";
static const char __pyx_k_sort_fields_locals_lambda[] = "sort_fields.<locals>.<lambda>";
static const char __pyx_k_Field_is_not_a_number_type[] = "Field `{}: {}` is not a number type";
static const char __pyx_k_cannot_del_a_container_field[] = "cannot del a container field";
static const char __pyx_k_key_decode_from_string_locals[] = "_key_decode_from_string.<locals>._converter";
static const char __pyx_k_make_get_func_locals_get_func[] = "make_get_func.<locals>.get_func";
static const char __pyx_k_Pyx_CFunc_bint____Field___to_p[] = "__Pyx_CFunc_bint____Field___to_py.<locals>.wrap";
static const char __pyx_k_DataModel_DataModel_packunpackp[] = "\n DataModel\n===========\n\n\351\200\232\350\277\207\347\273\247\346\211\277DataModel\345\217\257\344\273\245\345\220\204\347\247\215\345\217\257\346\214\201\344\271\205\345\214\226\345\257\271\350\261\241\343\200\202\n\345\217\257\346\214\201\344\271\205\345\214\226\345\257\271\350\261\241\346\230\257\350\241\250\347\244\272\357\274\214\345\257\271\350\261\241\346\234\211pack\345\222\214unpack\346\226\271\346\263\225\343\200\202\345\217\257\344\273\245\351\200\232\350\277\207pack()\350\260\203\347\224\250\345\260\206\345\257\271\350\261\241\345\272\217\345\210\227\345\214\226\346\210\220python dict\346\210\226\n\344\272\214\350\277\233\345\210\266\346\225\260\346\215\256\346\235\245\344\277\235\345\255\230\357\274\214\347\204\266\345\220\216\345\217\257\344\273\245\351\200\232\350\277\207unpack()\350\260\203\347\224\250\344\273\216python dict\346\210\226\344\272\214\350\277\233\345\210\266\346\225\260\346\215\256\344\270\255\345\233\236\345\244\215\345\257\271\350\261\241\345\216\237\346\235\245\347\232\204\347\212\266\346\200\201\343\200\202\n\nDataModel\344\273\245\344\270\213\351\235\242\350\277\231\346\240\267\347\232\204\346\240\274\345\274\217\346\235\245\345\256\232\344\271\211\345\257\271\350\261\241\351\207\214\350\246\201\345\255\230\345\202\250\345\222\214\346\201\242\345\244\215\347\232\204\346\225\260\346\215\256\345\255\227\346\256\265\357\274\232\n\n    class Point(DataModel):\n        x = Field('int32', index=1)\n        y = Field('int32', index=2)\n\n    class Rect(DataModel):\n        lt = Field(Point, index=1)\n        rb = Field(Point, index=2)\n\n\344\270\212\351\235\242\347\232\204\344\273\243\347\240\201\347\211\207\346\256\265\357\274\214\345\256\232\344\271\211\344\272\206\344\270\244\344\270\252\347\261\273\357\274\232\n=> Point\346\234\211\344\270\244\344\270\252\345\255\227\346\256\265\350\246\201\345\255\230\345\202\250\357\274\232x, y\357\274\214\345\255\230\345\202\250\347\261\273\345\236\213\346\230\257int32\357\274\233index\345""\217\267\345\210\206\345\210\253\346\230\2571, 2\357\274\233\n=> Rect\346\234\211\344\270\244\344\270\252\345\255\227\346\256\265\350\246\201\345\255\230\345\202\250\357\274\232lt, rb\357\274\214\345\255\230\345\202\250\347\261\273\345\236\213\346\230\257Point\345\257\271\350\261\241\357\274\233\350\277\231\346\240\267Rect\345\275\242\346\210\220\344\272\206\345\265\214\345\245\227\347\232\204DataModel\346\225\260\346\215\256\347\273\223\346\236\204\343\200\202\n\n\345\217\257\344\273\245\347\224\250\344\270\213\351\235\242\347\232\204\344\273\243\347\240\201\346\235\245\345\210\235\345\247\213\345\214\226\345\222\214\345\274\225\347\224\250Rect\345\222\214Point\351\207\214\347\232\204\345\255\227\346\256\265\357\274\232\n\n    rect = Rect()\n    rect.lt = Point(x=1, y=1)\n    rect.rb = Point(x=100, y=101)\n    rect.lt.x = 20\n    yy = rect.lt.y\n\n\347\224\250pack(), unpack()\346\226\271\346\263\225\346\235\245\345\272\217\345\210\227\345\214\226\357\274\214\345\217\215\345\272\217\345\210\227\345\214\226\345\257\271\350\261\241\357\274\232\n\n   result = rect.pack('dict')  # \345\260\206rect\345\272\217\345\210\227\345\214\226\344\270\272python dict\346\240\274\345\274\217\346\225\260\346\215\256\n   >> result => {'lt': {'y': 1, 'x': 20}, 'rb': {'y': 101, 'x': 100}}\n   rect2 = Rect()\n   rect2.unpack('dict', result)  # \344\273\216python dict\346\225\260\346\215\256\346\201\242\345\244\215\345\257\271\350\261\241\347\212\266\346\200\201\n   result2 = rect2.pack('dict')  # result\345\222\214results\344\274\232\346\234\211\347\233\270\345\220\214\347\232\204\345\206\205\345\256\271\n   >> result2 => {'lt': {'y': 1, 'x': 20}, 'rb': {'y': 101, 'x': 100}}\n\n   result = rect.pack('bin')  # \345\260\206rect\345\272\217\345\210\227\345\214\226\344\275\215\344\272\214\350\277\233\345\210\266\346\240\274\345\274\217\n\n\345\242\236\351\207\217\345\272\217\345\210\227\345\214\226\n==========\n\nDataModel\346\237\220\347\247\215\347\250\213\345\272\246\344\270\212\346\224""\257\346\214\201\344\273\205\345\257\271\345\257\271\350\261\241\346\225\260\346\215\256\346\234\211\346\224\271\345\217\230\351\203\250\345\210\206\345\201\232\345\272\217\345\210\227\345\214\226\343\200\202\345\215\263\347\224\237\346\210\220\345\242\236\351\207\217\346\225\260\346\215\256\343\200\202\344\276\213\345\246\202\357\274\232\n\n    p = Point(x=1, y=0)\n    p.y = 2\n    result = p.pack('dict', only_changed=True)\n    >> result => {'y': 2}   # \345\217\252\346\234\211\346\233\264\346\224\271\347\232\204y\345\255\227\346\256\265\350\242\253\345\272\217\345\210\227\345\214\226\344\272\206\n\n    rect = Rect(lt=Point(x=1, y=1), rb=Point(x=2, y=2))\n    rect.lt.x = 100\n    rect.rb.y = 100\n    result = rect.pack('dict', only_changed=True)\n    >> result => {'lt': {'x': 100}, 'rb': {'y': 100}}\n\n\346\224\257\346\214\201\346\225\260\346\215\256\347\261\273\345\236\213\n=============\n\nDataModel\347\224\250Field\346\235\245\345\256\232\344\271\211\345\255\227\346\256\265\347\232\204\346\225\260\346\215\256\347\261\273\345\236\213\343\200\202\346\224\257\346\214\201\347\232\204\345\237\272\346\234\254\346\225\260\346\215\256\347\261\273\345\236\213\346\234\211\357\274\232\n\n    \347\261\273\345\236\213                      : \350\257\264\346\230\216\n    ---------------------------------------------\n    int8                      : char\n    uint8                     : unsigned char\n    int16                     : short\n    uint16                    : unsigned short\n    int32                     : long\n    uint32                    : unsigned long\n    int64                     : long long\n    uint64                    : unsigned long long\n    float                     : float\n    double                    : double\n    bool                      : bool\n    string                    : \345\217\230\351\225\277\345\255\227\347\254\246\344\270\262\n    DataModel\347\232\204\345\255\220\347\261\273           : -----\n\n\351\231\244\344\272\206\345\237""\272\346\234\254\347\261\273\345\236\213\343\200\202DataModel\350\277\230\346\224\257\346\214\201\345\256\232\344\271\211Array\345\222\214Map\357\274\214IdMap\344\270\211\347\247\215\351\233\206\345\220\210\343\200\202Array\345\222\214Map\345\215\263\346\225\260\347\273\204\345\222\214\345\255\227\345\205\270\357\274\232\n\n    class Polygon(DataModel):\n        points = ArrayField(Point, 1)\n\n    p = Polygon()\n    p.points.append(Point(x=1, y=2))\n    p.points.append(Point(x=3, y=4))\n\nIdMap\346\230\257\344\270\200\347\247\215\346\257\224\350\276\203\347\211\271\345\210\253\347\232\204Map\351\233\206\345\220\210\343\200\202\345\256\203\347\232\204value\351\203\250\345\210\206\345\255\230\345\202\250\347\232\204\346\230\257\345\257\271\350\261\241\357\274\214\350\200\214key\351\203\250\345\210\206\345\255\230\345\202\250\347\232\204\346\230\257\345\257\271\350\261\241\347\232\204oid\345\255\227\n\346\256\265\347\232\204\346\225\260\345\200\274\343\200\202\n\nField\351\231\204\345\212\240\345\261\236\346\200\247\n==============\n\n\345\217\257\344\273\245\347\224\250\351\231\204\345\212\240\345\261\236\346\200\247\346\235\245\344\277\256\351\245\260Field\357\274\214\346\235\245\345\270\256\345\212\251Field\346\235\245\346\233\264\345\212\240\347\262\276\347\273\206\347\232\204\345\256\232\344\271\211\345\255\227\346\256\265\347\261\273\345\236\213\357\274\214\346\240\207\345\207\206\347\232\204\351\231\204\345\212\240\345\261\236\346\200\247\346\234\211\357\274\232\n\n    index   \343\200\220\345\277\205\346\234\211\343\200\221index\345\261\236\346\200\247\347\224\250\346\235\245\345\256\232\344\271\211\345\255\227\346\256\265\347\232\204\345\272\217\345\217\267\343\200\202DataModel\345\234\250\345\272\217\345\210\227\345\214\226\346\210\220\344\272\214\350\277\233\345\210\266\346\225\260\346\215\256\347\232\204\n             \346\227\266\345\200\231\347\224\250index\345\272\217\345\217\267\350\200\214\344\270\215\346\230\257\345\255\227\346\256\265\345\220\215""\357\274\214\346\235\245\345\207\217\345\260\221\345\272\217\345\210\227\345\214\226\345\220\216\347\232\204\346\225\260\346\215\256\345\244\247\345\260\217\343\200\202\n    desc    \343\200\220\345\217\257\351\200\211\343\200\221\345\255\227\346\256\265\346\217\217\350\277\260\n    arithm  \343\200\220\345\217\257\351\200\211\343\200\221\345\246\202\346\236\234\346\234\211\350\277\231\344\270\252\345\261\236\346\200\247\343\200\202DataModel\350\207\252\345\212\250\344\270\272\345\255\227\346\256\265\345\234\250\347\261\273\344\270\255\346\267\273\345\212\240add_xxx, sub_xxx\n             \344\270\244\344\270\252\345\207\275\346\225\260\343\200\202\345\246\202\346\236\234\345\255\227\346\256\265\346\230\257\346\227\240\347\254\246\345\217\267\347\261\273\345\236\213\343\200\202sub_xxx\345\207\275\346\225\260\344\274\232\345\234\250\345\217\221\347\216\260\344\274\232\345\207\217\346\210\220\350\264\237\346\225\260\347\232\204\346\227\266\345\200\231\346\212\233\n             \345\207\272\345\274\202\345\270\270\343\200\202\n    default \343\200\220\345\217\257\351\200\211\343\200\221\345\255\227\346\256\265\347\232\204\351\273\230\350\256\244\345\200\274\343\200\202\n    create  \343\200\220\345\217\257\351\200\211\343\200\221\345\246\202\346\236\234\350\277\231\344\270\252\345\261\236\346\200\247\350\242\253\350\256\276\347\275\256\343\200\202DataModel\345\234\250\346\201\242\345\244\215\345\257\271\350\261\241\346\225\260\346\215\256\357\274\214\346\236\204\351\200\240\345\255\227\346\256\265\347\232\204\345\255\220\345\257\271\350\261\241\n            \346\227\266\345\200\231\357\274\214\344\274\232\350\260\203\347\224\250create\345\207\275\346\225\260\346\235\245\346\236\204\351\200\240\357\274\214\350\200\214\344\270\215\347\224\250\351\273\230\350\256\244\347\232\204\350\260\203\347\224\250\347\261\273\345\220\215\346\235\245\346\236\204\351\200\240\345\257\271\350\261\241\343\200\202\n\n    min_value    \343\200\220\345\217\257\351\200\211\343\200\221\345""\246\202\346\236\234\345\255\227\346\256\265\346\230\257\346\225\260\345\255\227\347\261\273\345\236\213\357\274\214\350\241\250\347\244\272\346\234\200\345\260\217\345\200\274\345\217\226\345\200\274\350\214\203\345\233\264\343\200\202sub_xxx\345\207\275\346\225\260\344\274\232\345\234\250\345\217\221\n                  \347\216\260\345\260\206\345\207\217\345\260\221\345\210\260\346\257\224min_value\346\233\264\345\260\217\347\232\204\346\225\260\345\200\274\345\211\215\346\212\233\345\207\272\345\274\202\345\270\270\343\200\202\n    skip_changed \343\200\220\345\217\257\351\200\211\343\200\221\350\241\250\347\244\272\350\277\231\344\270\252\350\242\253\346\216\222\351\231\244\345\234\250\345\242\236\351\207\217\345\217\230\345\214\226\346\243\200\346\265\213\344\271\213\345\244\226\343\200\202\346\200\273\346\230\257\344\274\232\350\242\253\345\210\244\345\256\232\344\270\272\346\227\240\346\224\271\345\217\230\343\200\202\n\n\351\231\244\344\272\206\346\240\207\345\207\206\351\231\204\345\212\240\345\261\236\346\200\247\345\244\226\357\274\214\344\275\277\347\224\250\350\200\205\345\217\257\344\273\245\347\273\231Field\351\231\204\345\212\240\344\273\273\346\204\217\345\261\236\346\200\247\357\274\214\346\235\245\344\277\256\351\245\260\345\255\227\346\256\265\347\261\273\345\236\213\347\232\204\345\256\232\344\271\211\343\200\202\350\277\231\344\272\233\351\231\204\345\212\240\345\261\236\n\346\200\247\347\224\261\344\275\277\347\224\250\350\200\205\350\207\252\345\267\261\346\235\245\344\275\277\347\224\250\345\222\214\350\247\243\351\207\212\343\200\202\n\n\n";
static const char __pyx_k_conflicted_properties_array_map[] = "conflicted properties: array, map, id_map";
static const char __pyx_k_key_encode_to_string_locals__co[] = "_key_encode_to_string.<locals>._converter";
static const char __pyx_k_make_container_fdel_locals_fdel[] = "make_container_fdel.<locals>.fdel";
static const char __pyx_k_make_container_fget_locals_fget[] = "make_container_fget.<locals>.fget";
static const char __pyx_k_make_container_fset_locals_fset[] = "make_container_fset.<locals>.fset";
static const char __pyx_k_ref_must_pointer_to_a_DataModel[] = "ref must pointer to a DataModel type";
static const char __pyx_k_E_nwork_g53_engine_neox_src_3d_e[] = "E:\\nwork\\g53\\engine\\neox\\src\\3d-engine\\branches\\mobile-ce\\engine\\g53logic\\c_data_model\\c_data_model_v2.pyx";
static const char __pyx_k_make_signed_sub_func_locals__sub[] = "make_signed_sub_func.<locals>._sub";
static const char __pyx_k_make_sub_func_with_min_value_loc[] = "make_sub_func_with_min_value.<locals>._sub";
static PyObject *__pyx_n_s_ArrayField;
static PyObject *__pyx_n_s_DataModelError;
static PyObject *__pyx_kp_s_DataModelProtocol_of;
static PyObject *__pyx_n_s_DefineError;
static PyObject *__pyx_n_s_DuplicateIndexError;
static PyObject *__pyx_n_s_DuplicateNameError;
static PyObject *__pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e;
static PyObject *__pyx_kp_s_Field_is_not_a_number_type;
static PyObject *__pyx_n_s_IdMapField;
static PyObject *__pyx_n_s_MapField;
static PyObject *__pyx_n_s_NoFieldError;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_OperateError;
static PyObject *__pyx_n_s_OverflowError;
static PyObject *__pyx_n_s_PackError;
static PyObject *__pyx_n_s_Pyx_CFunc_bint____Field___to_p;
static PyObject *__pyx_n_s_SkipFromPack;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_UnpackError;
static PyObject *__pyx_n_s__51;
static PyObject *__pyx_kp_s__53;
static PyObject *__pyx_kp_s__56;
static PyObject *__pyx_kp_s__6;
static PyObject *__pyx_n_s__7;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_n_s_add_2;
static PyObject *__pyx_n_s_add_field;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_arg;
static PyObject *__pyx_n_s_arithm;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_attrs;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_bases;
static PyObject *__pyx_n_s_bases_2;
static PyObject *__pyx_n_s_bool;
static PyObject *__pyx_n_s_c_data_model_v2;
static PyObject *__pyx_kp_s_cannot_del_a_container_field;
static PyObject *__pyx_n_s_cfunc_to_py;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_clear_changed;
static PyObject *__pyx_n_s_clsname;
static PyObject *__pyx_n_s_cmp;
static PyObject *__pyx_kp_s_conflicted_properties_array_map;
static PyObject *__pyx_n_s_container;
static PyObject *__pyx_n_s_container_class;
static PyObject *__pyx_n_s_converter;
static PyObject *__pyx_n_s_copy_bases_fields;
static PyObject *__pyx_n_s_copy_class_fields;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_n_s_default;
static PyObject *__pyx_n_s_delitem;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_dict_2;
static PyObject *__pyx_n_s_dm_self;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_double;
static PyObject *__pyx_n_s_fdel;
static PyObject *__pyx_n_s_fget;
static PyObject *__pyx_n_s_field;
static PyObject *__pyx_n_s_field_filter;
static PyObject *__pyx_n_s_field_name;
static PyObject *__pyx_n_s_fields;
static PyObject *__pyx_n_s_fields_by_index;
static PyObject *__pyx_n_s_fields_by_key;
static PyObject *__pyx_n_s_fields_by_name;
static PyObject *__pyx_n_s_float;
static PyObject *__pyx_n_s_fmt;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fset;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_get_fields_define;
static PyObject *__pyx_n_s_get_func;
static PyObject *__pyx_n_s_get_protocol;
static PyObject *__pyx_n_s_has_changed;
static PyObject *__pyx_n_s_iadd;
static PyObject *__pyx_n_s_id_map;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_int16;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_int64;
static PyObject *__pyx_n_s_int8;
static PyObject *__pyx_kp_s_invalid_index;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_n_s_iterkeys;
static PyObject *__pyx_n_s_itervalues;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_key_decode_from_string_locals;
static PyObject *__pyx_n_s_key_encode_to_string_locals__co;
static PyObject *__pyx_n_s_kwarg;
static PyObject *__pyx_n_s_long_repr;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_make_add_func_locals__add;
static PyObject *__pyx_n_s_make_auto_gen_methods;
static PyObject *__pyx_n_s_make_container_fdel_locals_fdel;
static PyObject *__pyx_n_s_make_container_fget_locals_fget;
static PyObject *__pyx_n_s_make_container_fset_locals_fset;
static PyObject *__pyx_n_s_make_fdel_locals_fdel;
static PyObject *__pyx_n_s_make_fget_locals_fget;
static PyObject *__pyx_n_s_make_fset_locals_fset;
static PyObject *__pyx_n_s_make_get_func_locals_get_func;
static PyObject *__pyx_n_s_make_signed_sub_func_locals__sub;
static PyObject *__pyx_n_s_make_sub_func_with_min_value_loc;
static PyObject *__pyx_n_s_map;
static PyObject *__pyx_n_s_mark_change;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_min_value;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new_value;
static PyObject *__pyx_kp_s_no_such_field_s;
static PyObject *__pyx_n_s_obj_dict;
static PyObject *__pyx_n_s_oid;
static PyObject *__pyx_n_s_oid_2;
static PyObject *__pyx_n_s_old_value;
static PyObject *__pyx_n_s_only_changed;
static PyObject *__pyx_kp_s_overflow_lower_limit;
static PyObject *__pyx_n_s_override;
static PyObject *__pyx_n_s_pack_to_dict;
static PyObject *__pyx_n_s_pop;
static PyObject *__pyx_n_s_popitem;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_property;
static PyObject *__pyx_n_s_protocol;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_recursive;
static PyObject *__pyx_n_s_ref;
static PyObject *__pyx_kp_s_ref_must_pointer_to_a_DataModel;
static PyObject *__pyx_n_s_remove;
static PyObject *__pyx_n_s_resolve_ref;
static PyObject *__pyx_kp_s_s_name_s_index_d;
static PyObject *__pyx_kp_s_s_s;
static PyObject *__pyx_kp_s_s_s_2;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_self_dict;
static PyObject *__pyx_n_s_setdefault;
static PyObject *__pyx_n_s_setitem;
static PyObject *__pyx_n_s_short_repr;
static PyObject *__pyx_n_s_sort;
static PyObject *__pyx_n_s_sort_fields;
static PyObject *__pyx_n_s_sort_fields_locals_lambda;
static PyObject *__pyx_n_s_src_dict_data;
static PyObject *__pyx_n_s_startswith;
static PyObject *__pyx_n_s_string;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_sub;
static PyObject *__pyx_n_s_sub_2;
static PyObject *__pyx_n_s_sync;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_typ;
static PyObject *__pyx_n_s_uint16;
static PyObject *__pyx_n_s_uint32;
static PyObject *__pyx_n_s_uint64;
static PyObject *__pyx_n_s_uint8;
static PyObject *__pyx_n_s_unpack_from_dict;
static PyObject *__pyx_n_s_unsupport;
static PyObject *__pyx_kp_s_unsupported_format;
static PyObject *__pyx_kp_s_unsupported_type;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_value_2;
static PyObject *__pyx_n_s_wrap;
static PyObject *__pyx_n_s_x;
static int __pyx_pf_15c_data_model_v2_11FieldFilter___cinit__(struct __pyx_obj_15c_data_model_v2_FieldFilter *__pyx_v_self); /* proto */
static int __pyx_pf_15c_data_model_v2_11FieldFilter_2__init__(struct __pyx_obj_15c_data_model_v2_FieldFilter *__pyx_v_self, PyObject *__pyx_v_filters); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_21_key_encode_to_string__converter(PyObject *__pyx_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_23_key_decode_from_string__converter(PyObject *__pyx_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_9make_fget_fget(PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_9make_fset_fset(PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_9make_fdel_fdel(PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static int __pyx_pf_15c_data_model_v2_13DecodeContext___cinit__(struct __pyx_obj_15c_data_model_v2_DecodeContext *__pyx_v_self, PyObject *__pyx_v_mode, PyObject *__pyx_v_resolve_ref, int __pyx_v_mark_change); /* proto */
static int __pyx_pf_15c_data_model_v2_5Array___cinit__(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_5Array_2_has_changed(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_recursive); /* proto */
static int __pyx_pf_15c_data_model_v2_5Array_4__setitem__(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_k, PyObject *__pyx_v_v); /* proto */
static int __pyx_pf_15c_data_model_v2_5Array_6__delitem__(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_5Array_8__iadd__(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_5Array_10__imul__(CYTHON_UNUSED struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_5Array_12append(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_5Array_14_append(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_5Array_16extend(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_5Array_18insert(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_k, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_5Array_20pop(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_5Array_22remove(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_5Array_24sort(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_5Array_26has_changed(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, int __pyx_v_recursive); /* proto */
static int __pyx_pf_15c_data_model_v2_3Map___cinit__(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_3Map_2_has_changed(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, int __pyx_v_recursive); /* proto */
static int __pyx_pf_15c_data_model_v2_3Map_4__setitem__(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, PyObject *__pyx_v_k, PyObject *__pyx_v_v); /* proto */
static int __pyx_pf_15c_data_model_v2_3Map_6__delitem__(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_3Map_8clear(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_3Map_10pop(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_3Map_12popitem(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_3Map_14setdefault(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_default); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_3Map_16update(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_5IdMap_add(struct __pyx_obj_15c_data_model_v2_IdMap *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_5IdMap_2remove(struct __pyx_obj_15c_data_model_v2_IdMap *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_5IdMap_4has(struct __pyx_obj_15c_data_model_v2_IdMap *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_5Field_5index___get__(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_5Field_4name___get__(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_5Field_3key___get__(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_self); /* proto */
static int __pyx_pf_15c_data_model_v2_5Field___cinit__(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_self, PyObject *__pyx_v_typ, int __pyx_v_index, int __pyx_v_array, int __pyx_v_map, int __pyx_v_id_map, PyObject *__pyx_v_key, PyObject *__pyx_v_default, PyObject *__pyx_v_min_value, int __pyx_v_arithm, int __pyx_v_ref, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_5Field_2__str__(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_5Field_4__getattr__(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static int __pyx_pf_15c_data_model_v2_12FieldsDefine___init__(struct __pyx_obj_15c_data_model_v2_FieldsDefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_12FieldsDefine_2add_field(struct __pyx_obj_15c_data_model_v2_FieldsDefine *__pyx_v_self, struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_12FieldsDefine_4copy_bases_fields(struct __pyx_obj_15c_data_model_v2_FieldsDefine *__pyx_v_self, PyObject *__pyx_v_bases); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_12FieldsDefine_6sort_fields(struct __pyx_obj_15c_data_model_v2_FieldsDefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_12FieldsDefine_8copy_class_fields(struct __pyx_obj_15c_data_model_v2_FieldsDefine *__pyx_v_self, struct __pyx_obj_15c_data_model_v2_FieldsDefine *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_13make_get_func_get_func(PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_13make_get_func_2get_func(PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_13make_add_func__add(PyObject *__pyx_self, PyObject *__pyx_v_self, __pyx_t_15c_data_model_v2_uint64 __pyx_v_value); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_13make_add_func_2_add(PyObject *__pyx_self, PyObject *__pyx_v_self, __pyx_t_15c_data_model_v2_int64 __pyx_v_value); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_13make_add_func_4_add(PyObject *__pyx_self, PyObject *__pyx_v_self, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_28make_sub_func_with_min_value__sub(PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_28make_sub_func_with_min_value_2_sub(PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_28make_sub_func_with_min_value_4_sub(PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_20make_signed_sub_func__sub(PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v__value); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_20make_signed_sub_func_2_sub(PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v__value); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_19make_container_fget_fget(PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_19make_container_fset_fset(PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_19make_container_fdel_fdel(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_17DataModelProtocol___str__(struct __pyx_obj_15c_data_model_v2_DataModelProtocol *__pyx_v_self); /* proto */
static int __pyx_pf_15c_data_model_v2_13MetaDataModel___init__(struct __pyx_obj_15c_data_model_v2_MetaDataModel *__pyx_v_cls, PyObject *__pyx_v_clsname, PyObject *__pyx_v_bases, PyObject *__pyx_v_attrs); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_13MetaDataModel_2make_auto_gen_methods(struct __pyx_obj_15c_data_model_v2_MetaDataModel *__pyx_v_cls, struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field, PyObject *__pyx_v_attrs); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_9DataModel___getmetaclass__(CYTHON_UNUSED struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v__); /* proto */
static int __pyx_pf_15c_data_model_v2_9DataModel_2__cinit__(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_4_get_protocol(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_6_get_fields_define(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self); /* proto */
static int __pyx_pf_15c_data_model_v2_9DataModel_8__init__(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_10_short_repr_(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_12_long_repr_(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_14set_data(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_16clear_data(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_18has_changed(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_field_name, PyObject *__pyx_v_recursive); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_20pack(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_fmt, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_22unpack(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_fmt, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_24pack_to_dict(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_recursive, PyObject *__pyx_v_only_changed, PyObject *__pyx_v_clear_changed, PyObject *__pyx_v_field_filter); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_26unpack_from_dict(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_src_dict_data, PyObject *__pyx_v_mode, PyObject *__pyx_v_resolve_ref, int __pyx_v_mark_change); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_28clear_changed(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_field_names, PyObject *__pyx_v_options); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_30set_changed(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_field_names); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_32__str__(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_34__repr__(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_ArrayField(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwarg); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_2MapField(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwarg); /* proto */
static PyObject *__pyx_pf_15c_data_model_v2_4IdMapField(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwarg); /* proto */
static PyObject *__pyx_pf_11cfunc_dot_to_py_33__Pyx_CFunc_bint____Field___to_py_wrap(PyObject *__pyx_self, struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field); /* proto */
static PyObject *__pyx_tp_new_15c_data_model_v2_FieldFilter(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15c_data_model_v2_DecodeContext(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15c_data_model_v2_Array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15c_data_model_v2_Map(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15c_data_model_v2_IdMap(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15c_data_model_v2_Field(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15c_data_model_v2_FieldsDefine(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15c_data_model_v2_DataModelProtocol(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15c_data_model_v2_MetaDataModel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15c_data_model_v2_DataModel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyList_Type_pop = {0, &__pyx_n_s_pop, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PySet_Type_update = {0, &__pyx_n_s_update, 0, 0, 0};
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_30;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_slice__5;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_slice__20;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_codeobj__2;
static PyObject *__pyx_codeobj__4;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_codeobj__11;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__35;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__62;

/* "c_data_model_v2.pyx":219
 * 
 * 
 * cdef inline bint _exclude_oid_field(Field field):             # <<<<<<<<<<<<<<
 *     if field.name == 'oid':
 *         return False
 */

static CYTHON_INLINE int __pyx_f_15c_data_model_v2__exclude_oid_field(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("_exclude_oid_field", 0);

  /* "c_data_model_v2.pyx":220
 * 
 * cdef inline bint _exclude_oid_field(Field field):
 *     if field.name == 'oid':             # <<<<<<<<<<<<<<
 *         return False
 *     return True
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_field->name, __pyx_n_s_oid, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 220, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":221
 * cdef inline bint _exclude_oid_field(Field field):
 *     if field.name == 'oid':
 *         return False             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":220
 * 
 * cdef inline bint _exclude_oid_field(Field field):
 *     if field.name == 'oid':             # <<<<<<<<<<<<<<
 *         return False
 *     return True
 */
  }

  /* "c_data_model_v2.pyx":222
 *     if field.name == 'oid':
 *         return False
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":219
 * 
 * 
 * cdef inline bint _exclude_oid_field(Field field):             # <<<<<<<<<<<<<<
 *     if field.name == 'oid':
 *         return False
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("c_data_model_v2._exclude_oid_field", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":228
 *     cdef set filters
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.filters = set()
 * 
 */

/* Python wrapper */
static int __pyx_pw_15c_data_model_v2_11FieldFilter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_15c_data_model_v2_11FieldFilter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_15c_data_model_v2_11FieldFilter___cinit__(((struct __pyx_obj_15c_data_model_v2_FieldFilter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15c_data_model_v2_11FieldFilter___cinit__(struct __pyx_obj_15c_data_model_v2_FieldFilter *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "c_data_model_v2.pyx":229
 * 
 *     def __cinit__(self):
 *         self.filters = set()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *filters):
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->filters);
  __Pyx_DECREF(__pyx_v_self->filters);
  __pyx_v_self->filters = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":228
 *     cdef set filters
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.filters = set()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.FieldFilter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":231
 *         self.filters = set()
 * 
 *     def __init__(self, *filters):             # <<<<<<<<<<<<<<
 *         for f in filters:
 *             if f is None:
 */

/* Python wrapper */
static int __pyx_pw_15c_data_model_v2_11FieldFilter_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_15c_data_model_v2_11FieldFilter_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filters = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_filters = __pyx_args;
  __pyx_r = __pyx_pf_15c_data_model_v2_11FieldFilter_2__init__(((struct __pyx_obj_15c_data_model_v2_FieldFilter *)__pyx_v_self), __pyx_v_filters);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_filters);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15c_data_model_v2_11FieldFilter_2__init__(struct __pyx_obj_15c_data_model_v2_FieldFilter *__pyx_v_self, PyObject *__pyx_v_filters) {
  PyObject *__pyx_v_f = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "c_data_model_v2.pyx":232
 * 
 *     def __init__(self, *filters):
 *         for f in filters:             # <<<<<<<<<<<<<<
 *             if f is None:
 *                 continue
 */
  __pyx_t_1 = __pyx_v_filters; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 232, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "c_data_model_v2.pyx":233
 *     def __init__(self, *filters):
 *         for f in filters:
 *             if f is None:             # <<<<<<<<<<<<<<
 *                 continue
 *             if isinstance(f, FieldFilter):
 */
    __pyx_t_4 = (__pyx_v_f == Py_None);
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {

      /* "c_data_model_v2.pyx":234
 *         for f in filters:
 *             if f is None:
 *                 continue             # <<<<<<<<<<<<<<
 *             if isinstance(f, FieldFilter):
 *                 self.filters.update((<FieldFilter>f).filters)
 */
      goto __pyx_L3_continue;

      /* "c_data_model_v2.pyx":233
 *     def __init__(self, *filters):
 *         for f in filters:
 *             if f is None:             # <<<<<<<<<<<<<<
 *                 continue
 *             if isinstance(f, FieldFilter):
 */
    }

    /* "c_data_model_v2.pyx":235
 *             if f is None:
 *                 continue
 *             if isinstance(f, FieldFilter):             # <<<<<<<<<<<<<<
 *                 self.filters.update((<FieldFilter>f).filters)
 *             else:
 */
    __pyx_t_5 = __Pyx_TypeCheck(__pyx_v_f, __pyx_ptype_15c_data_model_v2_FieldFilter); 
    __pyx_t_4 = (__pyx_t_5 != 0);
    if (__pyx_t_4) {

      /* "c_data_model_v2.pyx":236
 *                 continue
 *             if isinstance(f, FieldFilter):
 *                 self.filters.update((<FieldFilter>f).filters)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.filters.add(f)
 */
      if (unlikely(__pyx_v_self->filters == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "update");
        __PYX_ERR(0, 236, __pyx_L1_error)
      }
      __pyx_t_3 = ((struct __pyx_obj_15c_data_model_v2_FieldFilter *)__pyx_v_f)->filters;
      __Pyx_INCREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PySet_Update(__pyx_v_self->filters, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 236, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "c_data_model_v2.pyx":235
 *             if f is None:
 *                 continue
 *             if isinstance(f, FieldFilter):             # <<<<<<<<<<<<<<
 *                 self.filters.update((<FieldFilter>f).filters)
 *             else:
 */
      goto __pyx_L6;
    }

    /* "c_data_model_v2.pyx":238
 *                 self.filters.update((<FieldFilter>f).filters)
 *             else:
 *                 self.filters.add(f)             # <<<<<<<<<<<<<<
 * 
 *     cdef bint is_filted(self, Field field):
 */
    /*else*/ {
      if (unlikely(__pyx_v_self->filters == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "add");
        __PYX_ERR(0, 238, __pyx_L1_error)
      }
      __pyx_t_6 = PySet_Add(__pyx_v_self->filters, __pyx_v_f); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 238, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "c_data_model_v2.pyx":232
 * 
 *     def __init__(self, *filters):
 *         for f in filters:             # <<<<<<<<<<<<<<
 *             if f is None:
 *                 continue
 */
    __pyx_L3_continue:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":231
 *         self.filters = set()
 * 
 *     def __init__(self, *filters):             # <<<<<<<<<<<<<<
 *         for f in filters:
 *             if f is None:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("c_data_model_v2.FieldFilter.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":240
 *                 self.filters.add(f)
 * 
 *     cdef bint is_filted(self, Field field):             # <<<<<<<<<<<<<<
 *         for f in self.filters:
 *             if not f(field):
 */

static int __pyx_f_15c_data_model_v2_11FieldFilter_is_filted(struct __pyx_obj_15c_data_model_v2_FieldFilter *__pyx_v_self, struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  PyObject *__pyx_v_f = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *(*__pyx_t_2)(PyObject *);
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("is_filted", 0);

  /* "c_data_model_v2.pyx":241
 * 
 *     cdef bint is_filted(self, Field field):
 *         for f in self.filters:             # <<<<<<<<<<<<<<
 *             if not f(field):
 *                 return True
 */
  __pyx_t_1 = PyObject_GetIter(__pyx_v_self->filters); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L1_error)
  for (;;) {
    {
      __pyx_t_3 = __pyx_t_2(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 241, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "c_data_model_v2.pyx":242
 *     cdef bint is_filted(self, Field field):
 *         for f in self.filters:
 *             if not f(field):             # <<<<<<<<<<<<<<
 *                 return True
 *         return False
 */
    __Pyx_INCREF(__pyx_v_f);
    __pyx_t_4 = __pyx_v_f; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_field)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)__pyx_v_field)};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 242, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)__pyx_v_field)};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 242, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 242, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_field));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_field));
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, ((PyObject *)__pyx_v_field));
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 242, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = ((!__pyx_t_7) != 0);
    if (__pyx_t_8) {

      /* "c_data_model_v2.pyx":243
 *         for f in self.filters:
 *             if not f(field):
 *                 return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
      __pyx_r = 1;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":242
 *     cdef bint is_filted(self, Field field):
 *         for f in self.filters:
 *             if not f(field):             # <<<<<<<<<<<<<<
 *                 return True
 *         return False
 */
    }

    /* "c_data_model_v2.pyx":241
 * 
 *     cdef bint is_filted(self, Field field):
 *         for f in self.filters:             # <<<<<<<<<<<<<<
 *             if not f(field):
 *                 return True
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":244
 *             if not f(field):
 *                 return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":240
 *                 self.filters.add(f)
 * 
 *     cdef bint is_filted(self, Field field):             # <<<<<<<<<<<<<<
 *         for f in self.filters:
 *             if not f(field):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("c_data_model_v2.FieldFilter.is_filted", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":250
 *     to_string = _value2string.get(type_name)
 *     assert to_string is not None
 *     def _converter(value):             # <<<<<<<<<<<<<<
 *         x = encode(value)
 *         return to_string(x)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_21_key_encode_to_string_1_converter(PyObject *__pyx_self, PyObject *__pyx_v_value); /*proto*/
static PyMethodDef __pyx_mdef_15c_data_model_v2_21_key_encode_to_string_1_converter = {"_converter", (PyCFunction)__pyx_pw_15c_data_model_v2_21_key_encode_to_string_1_converter, METH_O, 0};
static PyObject *__pyx_pw_15c_data_model_v2_21_key_encode_to_string_1_converter(PyObject *__pyx_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_converter (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_21_key_encode_to_string__converter(__pyx_self, ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_21_key_encode_to_string__converter(PyObject *__pyx_self, PyObject *__pyx_v_value) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string *__pyx_cur_scope;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string *__pyx_outer_scope;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_converter", 0);
  __pyx_outer_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "c_data_model_v2.pyx":251
 *     assert to_string is not None
 *     def _converter(value):
 *         x = encode(value)             # <<<<<<<<<<<<<<
 *         return to_string(x)
 *     return _converter
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_encode)) { __Pyx_RaiseClosureNameError("encode"); __PYX_ERR(0, 251, __pyx_L1_error) }
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_encode);
  __pyx_t_2 = __pyx_cur_scope->__pyx_v_encode; __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_value};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 251, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_value};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 251, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 251, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_value);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 251, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":252
 *     def _converter(value):
 *         x = encode(value)
 *         return to_string(x)             # <<<<<<<<<<<<<<
 *     return _converter
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_to_string)) { __Pyx_RaiseClosureNameError("to_string"); __PYX_ERR(0, 252, __pyx_L1_error) }
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_to_string);
  __pyx_t_2 = __pyx_cur_scope->__pyx_v_to_string; __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_x};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_x};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 252, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_x);
      __Pyx_GIVEREF(__pyx_v_x);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_x);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":250
 *     to_string = _value2string.get(type_name)
 *     assert to_string is not None
 *     def _converter(value):             # <<<<<<<<<<<<<<
 *         x = encode(value)
 *         return to_string(x)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("c_data_model_v2._key_encode_to_string._converter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":247
 * 
 * 
 * cdef inline object _key_encode_to_string(str type_name, object encode):             # <<<<<<<<<<<<<<
 *     to_string = _value2string.get(type_name)
 *     assert to_string is not None
 */

static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2__key_encode_to_string(PyObject *__pyx_v_type_name, PyObject *__pyx_v_encode) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string *__pyx_cur_scope;
  PyObject *__pyx_v__converter = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("_key_encode_to_string", 0);
  __pyx_cur_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string *)__pyx_tp_new_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string(__pyx_ptype_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 247, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_encode = __pyx_v_encode;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_encode);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_encode);

  /* "c_data_model_v2.pyx":248
 * 
 * cdef inline object _key_encode_to_string(str type_name, object encode):
 *     to_string = _value2string.get(type_name)             # <<<<<<<<<<<<<<
 *     assert to_string is not None
 *     def _converter(value):
 */
  if (unlikely(__pyx_v_15c_data_model_v2__value2string == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 248, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_15c_data_model_v2__value2string, __pyx_v_type_name, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_to_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":249
 * cdef inline object _key_encode_to_string(str type_name, object encode):
 *     to_string = _value2string.get(type_name)
 *     assert to_string is not None             # <<<<<<<<<<<<<<
 *     def _converter(value):
 *         x = encode(value)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = (__pyx_cur_scope->__pyx_v_to_string != Py_None);
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 249, __pyx_L1_error)
    }
  }
  #endif

  /* "c_data_model_v2.pyx":250
 *     to_string = _value2string.get(type_name)
 *     assert to_string is not None
 *     def _converter(value):             # <<<<<<<<<<<<<<
 *         x = encode(value)
 *         return to_string(x)
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_15c_data_model_v2_21_key_encode_to_string_1_converter, 0, __pyx_n_s_key_encode_to_string_locals__co, ((PyObject*)__pyx_cur_scope), __pyx_n_s_c_data_model_v2, __pyx_d, ((PyObject *)__pyx_codeobj__2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__converter = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":253
 *         x = encode(value)
 *         return to_string(x)
 *     return _converter             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v__converter);
  __pyx_r = __pyx_v__converter;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":247
 * 
 * 
 * cdef inline object _key_encode_to_string(str type_name, object encode):             # <<<<<<<<<<<<<<
 *     to_string = _value2string.get(type_name)
 *     assert to_string is not None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2._key_encode_to_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__converter);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":259
 *     from_string = _string2value.get(type_name)
 *     assert from_string is not None
 *     def _converter(value):             # <<<<<<<<<<<<<<
 *         x = from_string(value)
 *         return decode(x)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_23_key_decode_from_string_1_converter(PyObject *__pyx_self, PyObject *__pyx_v_value); /*proto*/
static PyMethodDef __pyx_mdef_15c_data_model_v2_23_key_decode_from_string_1_converter = {"_converter", (PyCFunction)__pyx_pw_15c_data_model_v2_23_key_decode_from_string_1_converter, METH_O, 0};
static PyObject *__pyx_pw_15c_data_model_v2_23_key_decode_from_string_1_converter(PyObject *__pyx_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_converter (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_23_key_decode_from_string__converter(__pyx_self, ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_23_key_decode_from_string__converter(PyObject *__pyx_self, PyObject *__pyx_v_value) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string *__pyx_cur_scope;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string *__pyx_outer_scope;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_converter", 0);
  __pyx_outer_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "c_data_model_v2.pyx":260
 *     assert from_string is not None
 *     def _converter(value):
 *         x = from_string(value)             # <<<<<<<<<<<<<<
 *         return decode(x)
 *     return _converter
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_from_string)) { __Pyx_RaiseClosureNameError("from_string"); __PYX_ERR(0, 260, __pyx_L1_error) }
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_from_string);
  __pyx_t_2 = __pyx_cur_scope->__pyx_v_from_string; __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_value};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_value};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_value);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":261
 *     def _converter(value):
 *         x = from_string(value)
 *         return decode(x)             # <<<<<<<<<<<<<<
 *     return _converter
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_decode)) { __Pyx_RaiseClosureNameError("decode"); __PYX_ERR(0, 261, __pyx_L1_error) }
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_decode);
  __pyx_t_2 = __pyx_cur_scope->__pyx_v_decode; __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_x};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_x};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 261, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_x);
      __Pyx_GIVEREF(__pyx_v_x);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_x);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":259
 *     from_string = _string2value.get(type_name)
 *     assert from_string is not None
 *     def _converter(value):             # <<<<<<<<<<<<<<
 *         x = from_string(value)
 *         return decode(x)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("c_data_model_v2._key_decode_from_string._converter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":256
 * 
 * 
 * cdef inline object _key_decode_from_string(str type_name, object decode):             # <<<<<<<<<<<<<<
 *     from_string = _string2value.get(type_name)
 *     assert from_string is not None
 */

static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2__key_decode_from_string(PyObject *__pyx_v_type_name, PyObject *__pyx_v_decode) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string *__pyx_cur_scope;
  PyObject *__pyx_v__converter = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("_key_decode_from_string", 0);
  __pyx_cur_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string *)__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string(__pyx_ptype_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 256, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_decode = __pyx_v_decode;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_decode);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_decode);

  /* "c_data_model_v2.pyx":257
 * 
 * cdef inline object _key_decode_from_string(str type_name, object decode):
 *     from_string = _string2value.get(type_name)             # <<<<<<<<<<<<<<
 *     assert from_string is not None
 *     def _converter(value):
 */
  if (unlikely(__pyx_v_15c_data_model_v2__string2value == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 257, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_15c_data_model_v2__string2value, __pyx_v_type_name, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_from_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":258
 * cdef inline object _key_decode_from_string(str type_name, object decode):
 *     from_string = _string2value.get(type_name)
 *     assert from_string is not None             # <<<<<<<<<<<<<<
 *     def _converter(value):
 *         x = from_string(value)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = (__pyx_cur_scope->__pyx_v_from_string != Py_None);
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 258, __pyx_L1_error)
    }
  }
  #endif

  /* "c_data_model_v2.pyx":259
 *     from_string = _string2value.get(type_name)
 *     assert from_string is not None
 *     def _converter(value):             # <<<<<<<<<<<<<<
 *         x = from_string(value)
 *         return decode(x)
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_15c_data_model_v2_23_key_decode_from_string_1_converter, 0, __pyx_n_s_key_decode_from_string_locals, ((PyObject*)__pyx_cur_scope), __pyx_n_s_c_data_model_v2, __pyx_d, ((PyObject *)__pyx_codeobj__4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__converter = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":262
 *         x = from_string(value)
 *         return decode(x)
 *     return _converter             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v__converter);
  __pyx_r = __pyx_v__converter;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":256
 * 
 * 
 * cdef inline object _key_decode_from_string(str type_name, object decode):             # <<<<<<<<<<<<<<
 *     from_string = _string2value.get(type_name)
 *     assert from_string is not None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2._key_decode_from_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__converter);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":265
 * 
 * 
 * cdef inline object _create_object(Field field, dict dict_data):             # <<<<<<<<<<<<<<
 *     cdef object obj
 *     if field.create:
 */

static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2__create_object(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field, PyObject *__pyx_v_dict_data) {
  PyObject *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("_create_object", 0);
  __Pyx_INCREF(__pyx_v_dict_data);

  /* "c_data_model_v2.pyx":267
 * cdef inline object _create_object(Field field, dict dict_data):
 *     cdef object obj
 *     if field.create:             # <<<<<<<<<<<<<<
 *         if dict_data is None:
 *             dict_data = {}
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_field->create); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 267, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":268
 *     cdef object obj
 *     if field.create:
 *         if dict_data is None:             # <<<<<<<<<<<<<<
 *             dict_data = {}
 *         obj = field.create(dict_data)
 */
    __pyx_t_1 = (__pyx_v_dict_data == ((PyObject*)Py_None));
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":269
 *     if field.create:
 *         if dict_data is None:
 *             dict_data = {}             # <<<<<<<<<<<<<<
 *         obj = field.create(dict_data)
 *     else:
 */
      __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 269, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_dict_data, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "c_data_model_v2.pyx":268
 *     cdef object obj
 *     if field.create:
 *         if dict_data is None:             # <<<<<<<<<<<<<<
 *             dict_data = {}
 *         obj = field.create(dict_data)
 */
    }

    /* "c_data_model_v2.pyx":270
 *         if dict_data is None:
 *             dict_data = {}
 *         obj = field.create(dict_data)             # <<<<<<<<<<<<<<
 *     else:
 *         obj = field.data_model_protocol.cls()
 */
    __Pyx_INCREF(__pyx_v_field->create);
    __pyx_t_4 = __pyx_v_field->create; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_dict_data); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 270, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_dict_data};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 270, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_dict_data};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 270, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 270, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(__pyx_v_dict_data);
        __Pyx_GIVEREF(__pyx_v_dict_data);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_dict_data);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 270, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_obj = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "c_data_model_v2.pyx":267
 * cdef inline object _create_object(Field field, dict dict_data):
 *     cdef object obj
 *     if field.create:             # <<<<<<<<<<<<<<
 *         if dict_data is None:
 *             dict_data = {}
 */
    goto __pyx_L3;
  }

  /* "c_data_model_v2.pyx":272
 *         obj = field.create(dict_data)
 *     else:
 *         obj = field.data_model_protocol.cls()             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_field->data_model_protocol->cls);
    __pyx_t_4 = __pyx_v_field->data_model_protocol->cls; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 272, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_obj = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "c_data_model_v2.pyx":273
 *     else:
 *         obj = field.data_model_protocol.cls()
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":265
 * 
 * 
 * cdef inline object _create_object(Field field, dict dict_data):             # <<<<<<<<<<<<<<
 *     cdef object obj
 *     if field.create:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("c_data_model_v2._create_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_dict_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":276
 * 
 * 
 * cdef inline void _replace_obj_dict(object obj, dict new_obj_dict):             # <<<<<<<<<<<<<<
 *     cdef dict old_dict = obj.__dict__
 *     obj.__dict__ = new_obj_dict
 */

static CYTHON_INLINE void __pyx_f_15c_data_model_v2__replace_obj_dict(PyObject *__pyx_v_obj, PyObject *__pyx_v_new_obj_dict) {
  PyObject *__pyx_v_old_dict = 0;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_v = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("_replace_obj_dict", 0);

  /* "c_data_model_v2.pyx":277
 * 
 * cdef inline void _replace_obj_dict(object obj, dict new_obj_dict):
 *     cdef dict old_dict = obj.__dict__             # <<<<<<<<<<<<<<
 *     obj.__dict__ = new_obj_dict
 *     for k, v in old_dict.iteritems():
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 277, __pyx_L1_error)
  __pyx_v_old_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":278
 * cdef inline void _replace_obj_dict(object obj, dict new_obj_dict):
 *     cdef dict old_dict = obj.__dict__
 *     obj.__dict__ = new_obj_dict             # <<<<<<<<<<<<<<
 *     for k, v in old_dict.iteritems():
 *         if k not in new_obj_dict:
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_obj, __pyx_n_s_dict, __pyx_v_new_obj_dict) < 0) __PYX_ERR(0, 278, __pyx_L1_error)

  /* "c_data_model_v2.pyx":279
 *     cdef dict old_dict = obj.__dict__
 *     obj.__dict__ = new_obj_dict
 *     for k, v in old_dict.iteritems():             # <<<<<<<<<<<<<<
 *         if k not in new_obj_dict:
 *             new_obj_dict[k] = v
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_old_dict == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    __PYX_ERR(0, 279, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_old_dict, 1, __pyx_n_s_iteritems, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "c_data_model_v2.pyx":280
 *     obj.__dict__ = new_obj_dict
 *     for k, v in old_dict.iteritems():
 *         if k not in new_obj_dict:             # <<<<<<<<<<<<<<
 *             new_obj_dict[k] = v
 * 
 */
    if (unlikely(__pyx_v_new_obj_dict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 280, __pyx_L1_error)
    }
    __pyx_t_8 = (__Pyx_PyDict_ContainsTF(__pyx_v_k, __pyx_v_new_obj_dict, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 280, __pyx_L1_error)
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (__pyx_t_9) {

      /* "c_data_model_v2.pyx":281
 *     for k, v in old_dict.iteritems():
 *         if k not in new_obj_dict:
 *             new_obj_dict[k] = v             # <<<<<<<<<<<<<<
 * 
 * 
 */
      if (unlikely(__pyx_v_new_obj_dict == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 281, __pyx_L1_error)
      }
      if (unlikely(PyDict_SetItem(__pyx_v_new_obj_dict, __pyx_v_k, __pyx_v_v) < 0)) __PYX_ERR(0, 281, __pyx_L1_error)

      /* "c_data_model_v2.pyx":280
 *     obj.__dict__ = new_obj_dict
 *     for k, v in old_dict.iteritems():
 *         if k not in new_obj_dict:             # <<<<<<<<<<<<<<
 *             new_obj_dict[k] = v
 * 
 */
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":276
 * 
 * 
 * cdef inline void _replace_obj_dict(object obj, dict new_obj_dict):             # <<<<<<<<<<<<<<
 *     cdef dict old_dict = obj.__dict__
 *     obj.__dict__ = new_obj_dict
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("c_data_model_v2._replace_obj_dict", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_old_dict);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":284
 * 
 * 
 * cdef inline str _value_short_repr(object value):             # <<<<<<<<<<<<<<
 *     if isinstance(value, DataModel):
 *         return value._short_repr_()
 */

static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2__value_short_repr(PyObject *__pyx_v_value) {
  PyObject *__pyx_v_info = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("_value_short_repr", 0);

  /* "c_data_model_v2.pyx":285
 * 
 * cdef inline str _value_short_repr(object value):
 *     if isinstance(value, DataModel):             # <<<<<<<<<<<<<<
 *         return value._short_repr_()
 *     info = str(value)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_15c_data_model_v2_DataModel); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":286
 * cdef inline str _value_short_repr(object value):
 *     if isinstance(value, DataModel):
 *         return value._short_repr_()             # <<<<<<<<<<<<<<
 *     info = str(value)
 *     if len(info) >= 32:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_short_repr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 286, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 286, __pyx_L1_error)
    __pyx_r = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":285
 * 
 * cdef inline str _value_short_repr(object value):
 *     if isinstance(value, DataModel):             # <<<<<<<<<<<<<<
 *         return value._short_repr_()
 *     info = str(value)
 */
  }

  /* "c_data_model_v2.pyx":287
 *     if isinstance(value, DataModel):
 *         return value._short_repr_()
 *     info = str(value)             # <<<<<<<<<<<<<<
 *     if len(info) >= 32:
 *         info = info[:30] + '..'
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_value);
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_info = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "c_data_model_v2.pyx":288
 *         return value._short_repr_()
 *     info = str(value)
 *     if len(info) >= 32:             # <<<<<<<<<<<<<<
 *         info = info[:30] + '..'
 *     return info
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_info); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 288, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_6 >= 32) != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":289
 *     info = str(value)
 *     if len(info) >= 32:
 *         info = info[:30] + '..'             # <<<<<<<<<<<<<<
 *     return info
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetSlice(__pyx_v_info, 0, 30, NULL, NULL, &__pyx_slice__5, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_kp_s__6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_info, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "c_data_model_v2.pyx":288
 *         return value._short_repr_()
 *     info = str(value)
 *     if len(info) >= 32:             # <<<<<<<<<<<<<<
 *         info = info[:30] + '..'
 *     return info
 */
  }

  /* "c_data_model_v2.pyx":290
 *     if len(info) >= 32:
 *         info = info[:30] + '..'
 *     return info             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyString_CheckExact(__pyx_v_info))||((__pyx_v_info) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_info)->tp_name), 0))) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_INCREF(__pyx_v_info);
  __pyx_r = ((PyObject*)__pyx_v_info);
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":284
 * 
 * 
 * cdef inline str _value_short_repr(object value):             # <<<<<<<<<<<<<<
 *     if isinstance(value, DataModel):
 *         return value._short_repr_()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("c_data_model_v2._value_short_repr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_info);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":293
 * 
 * 
 * cdef inline str make_autogen_func_name(attrs, str op_prefix, str name):             # <<<<<<<<<<<<<<
 *     func_name = op_prefix + '_' + name
 *     if func_name in attrs:
 */

static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2_make_autogen_func_name(PyObject *__pyx_v_attrs, PyObject *__pyx_v_op_prefix, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_func_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("make_autogen_func_name", 0);

  /* "c_data_model_v2.pyx":294
 * 
 * cdef inline str make_autogen_func_name(attrs, str op_prefix, str name):
 *     func_name = op_prefix + '_' + name             # <<<<<<<<<<<<<<
 *     if func_name in attrs:
 *         func_name = '_' + op_prefix + '_' + name
 */
  __pyx_t_1 = PyNumber_Add(__pyx_v_op_prefix, __pyx_n_s__7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_func_name = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":295
 * cdef inline str make_autogen_func_name(attrs, str op_prefix, str name):
 *     func_name = op_prefix + '_' + name
 *     if func_name in attrs:             # <<<<<<<<<<<<<<
 *         func_name = '_' + op_prefix + '_' + name
 *     return func_name
 */
  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_v_func_name, __pyx_v_attrs, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 295, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "c_data_model_v2.pyx":296
 *     func_name = op_prefix + '_' + name
 *     if func_name in attrs:
 *         func_name = '_' + op_prefix + '_' + name             # <<<<<<<<<<<<<<
 *     return func_name
 * 
 */
    __pyx_t_2 = PyNumber_Add(__pyx_n_s__7, __pyx_v_op_prefix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_n_s__7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_func_name, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "c_data_model_v2.pyx":295
 * cdef inline str make_autogen_func_name(attrs, str op_prefix, str name):
 *     func_name = op_prefix + '_' + name
 *     if func_name in attrs:             # <<<<<<<<<<<<<<
 *         func_name = '_' + op_prefix + '_' + name
 *     return func_name
 */
  }

  /* "c_data_model_v2.pyx":297
 *     if func_name in attrs:
 *         func_name = '_' + op_prefix + '_' + name
 *     return func_name             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyString_CheckExact(__pyx_v_func_name))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_func_name)->tp_name), 0))) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_INCREF(__pyx_v_func_name);
  __pyx_r = ((PyObject*)__pyx_v_func_name);
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":293
 * 
 * 
 * cdef inline str make_autogen_func_name(attrs, str op_prefix, str name):             # <<<<<<<<<<<<<<
 *     func_name = op_prefix + '_' + name
 *     if func_name in attrs:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("c_data_model_v2.make_autogen_func_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_func_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":300
 * 
 * 
 * cdef inline object _dict_get_encoder(str type_name):             # <<<<<<<<<<<<<<
 *     if type_name in _default_values:
 *         if type_name == 'int8':
 */

static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2__dict_get_encoder(PyObject *__pyx_v_type_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("_dict_get_encoder", 0);

  /* "c_data_model_v2.pyx":301
 * 
 * cdef inline object _dict_get_encoder(str type_name):
 *     if type_name in _default_values:             # <<<<<<<<<<<<<<
 *         if type_name == 'int8':
 *             return int
 */
  if (unlikely(__pyx_v_15c_data_model_v2__default_values == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 301, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_type_name, __pyx_v_15c_data_model_v2__default_values, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 301, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":302
 * cdef inline object _dict_get_encoder(str type_name):
 *     if type_name in _default_values:
 *         if type_name == 'int8':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'uint8':
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_int8, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 302, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":303
 *     if type_name in _default_values:
 *         if type_name == 'int8':
 *             return int             # <<<<<<<<<<<<<<
 *         if type_name == 'uint8':
 *             return int
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
      __pyx_r = ((PyObject *)(&PyInt_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":302
 * cdef inline object _dict_get_encoder(str type_name):
 *     if type_name in _default_values:
 *         if type_name == 'int8':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'uint8':
 */
    }

    /* "c_data_model_v2.pyx":304
 *         if type_name == 'int8':
 *             return int
 *         if type_name == 'uint8':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'int16':
 */
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_uint8, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 304, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":305
 *             return int
 *         if type_name == 'uint8':
 *             return int             # <<<<<<<<<<<<<<
 *         if type_name == 'int16':
 *             return int
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
      __pyx_r = ((PyObject *)(&PyInt_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":304
 *         if type_name == 'int8':
 *             return int
 *         if type_name == 'uint8':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'int16':
 */
    }

    /* "c_data_model_v2.pyx":306
 *         if type_name == 'uint8':
 *             return int
 *         if type_name == 'int16':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'uint16':
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_int16, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 306, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":307
 *             return int
 *         if type_name == 'int16':
 *             return int             # <<<<<<<<<<<<<<
 *         if type_name == 'uint16':
 *             return int
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
      __pyx_r = ((PyObject *)(&PyInt_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":306
 *         if type_name == 'uint8':
 *             return int
 *         if type_name == 'int16':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'uint16':
 */
    }

    /* "c_data_model_v2.pyx":308
 *         if type_name == 'int16':
 *             return int
 *         if type_name == 'uint16':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'int32':
 */
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_uint16, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 308, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":309
 *             return int
 *         if type_name == 'uint16':
 *             return int             # <<<<<<<<<<<<<<
 *         if type_name == 'int32':
 *             return int
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
      __pyx_r = ((PyObject *)(&PyInt_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":308
 *         if type_name == 'int16':
 *             return int
 *         if type_name == 'uint16':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'int32':
 */
    }

    /* "c_data_model_v2.pyx":310
 *         if type_name == 'uint16':
 *             return int
 *         if type_name == 'int32':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'uint32':
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_int32, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 310, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":311
 *             return int
 *         if type_name == 'int32':
 *             return int             # <<<<<<<<<<<<<<
 *         if type_name == 'uint32':
 *             return int
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
      __pyx_r = ((PyObject *)(&PyInt_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":310
 *         if type_name == 'uint16':
 *             return int
 *         if type_name == 'int32':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'uint32':
 */
    }

    /* "c_data_model_v2.pyx":312
 *         if type_name == 'int32':
 *             return int
 *         if type_name == 'uint32':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'int64':
 */
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_uint32, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 312, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":313
 *             return int
 *         if type_name == 'uint32':
 *             return int             # <<<<<<<<<<<<<<
 *         if type_name == 'int64':
 *             return int
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
      __pyx_r = ((PyObject *)(&PyInt_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":312
 *         if type_name == 'int32':
 *             return int
 *         if type_name == 'uint32':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'int64':
 */
    }

    /* "c_data_model_v2.pyx":314
 *         if type_name == 'uint32':
 *             return int
 *         if type_name == 'int64':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'uint64':
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_int64, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 314, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":315
 *             return int
 *         if type_name == 'int64':
 *             return int             # <<<<<<<<<<<<<<
 *         if type_name == 'uint64':
 *             return int
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
      __pyx_r = ((PyObject *)(&PyInt_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":314
 *         if type_name == 'uint32':
 *             return int
 *         if type_name == 'int64':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'uint64':
 */
    }

    /* "c_data_model_v2.pyx":316
 *         if type_name == 'int64':
 *             return int
 *         if type_name == 'uint64':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'float':
 */
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_uint64, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 316, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":317
 *             return int
 *         if type_name == 'uint64':
 *             return int             # <<<<<<<<<<<<<<
 *         if type_name == 'float':
 *             return float
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
      __pyx_r = ((PyObject *)(&PyInt_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":316
 *         if type_name == 'int64':
 *             return int
 *         if type_name == 'uint64':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'float':
 */
    }

    /* "c_data_model_v2.pyx":318
 *         if type_name == 'uint64':
 *             return int
 *         if type_name == 'float':             # <<<<<<<<<<<<<<
 *             return float
 *         if type_name == 'double':
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_float, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 318, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":319
 *             return int
 *         if type_name == 'float':
 *             return float             # <<<<<<<<<<<<<<
 *         if type_name == 'double':
 *             return float
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
      __pyx_r = ((PyObject *)(&PyFloat_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":318
 *         if type_name == 'uint64':
 *             return int
 *         if type_name == 'float':             # <<<<<<<<<<<<<<
 *             return float
 *         if type_name == 'double':
 */
    }

    /* "c_data_model_v2.pyx":320
 *         if type_name == 'float':
 *             return float
 *         if type_name == 'double':             # <<<<<<<<<<<<<<
 *             return float
 *         if type_name == 'bool':
 */
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_double, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 320, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":321
 *             return float
 *         if type_name == 'double':
 *             return float             # <<<<<<<<<<<<<<
 *         if type_name == 'bool':
 *             return bool
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
      __pyx_r = ((PyObject *)(&PyFloat_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":320
 *         if type_name == 'float':
 *             return float
 *         if type_name == 'double':             # <<<<<<<<<<<<<<
 *             return float
 *         if type_name == 'bool':
 */
    }

    /* "c_data_model_v2.pyx":322
 *         if type_name == 'double':
 *             return float
 *         if type_name == 'bool':             # <<<<<<<<<<<<<<
 *             return bool
 *         if type_name == 'string':
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_bool, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 322, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":323
 *             return float
 *         if type_name == 'bool':
 *             return bool             # <<<<<<<<<<<<<<
 *         if type_name == 'string':
 *             return str
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject*)&PyBool_Type));
      __pyx_r = ((PyObject*)&PyBool_Type);
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":322
 *         if type_name == 'double':
 *             return float
 *         if type_name == 'bool':             # <<<<<<<<<<<<<<
 *             return bool
 *         if type_name == 'string':
 */
    }

    /* "c_data_model_v2.pyx":324
 *         if type_name == 'bool':
 *             return bool
 *         if type_name == 'string':             # <<<<<<<<<<<<<<
 *             return str
 *     return None
 */
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_string, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 324, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":325
 *             return bool
 *         if type_name == 'string':
 *             return str             # <<<<<<<<<<<<<<
 *     return None
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyString_Type)));
      __pyx_r = ((PyObject *)(&PyString_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":324
 *         if type_name == 'bool':
 *             return bool
 *         if type_name == 'string':             # <<<<<<<<<<<<<<
 *             return str
 *     return None
 */
    }

    /* "c_data_model_v2.pyx":301
 * 
 * cdef inline object _dict_get_encoder(str type_name):
 *     if type_name in _default_values:             # <<<<<<<<<<<<<<
 *         if type_name == 'int8':
 *             return int
 */
  }

  /* "c_data_model_v2.pyx":326
 *         if type_name == 'string':
 *             return str
 *     return None             # <<<<<<<<<<<<<<
 * 
 * cdef inline object _dict_get_decoder(str type_name):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":300
 * 
 * 
 * cdef inline object _dict_get_encoder(str type_name):             # <<<<<<<<<<<<<<
 *     if type_name in _default_values:
 *         if type_name == 'int8':
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("c_data_model_v2._dict_get_encoder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":328
 *     return None
 * 
 * cdef inline object _dict_get_decoder(str type_name):             # <<<<<<<<<<<<<<
 *     if type_name in _default_values:
 *         if type_name == 'int8':
 */

static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2__dict_get_decoder(PyObject *__pyx_v_type_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("_dict_get_decoder", 0);

  /* "c_data_model_v2.pyx":329
 * 
 * cdef inline object _dict_get_decoder(str type_name):
 *     if type_name in _default_values:             # <<<<<<<<<<<<<<
 *         if type_name == 'int8':
 *             return int
 */
  if (unlikely(__pyx_v_15c_data_model_v2__default_values == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 329, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_type_name, __pyx_v_15c_data_model_v2__default_values, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 329, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":330
 * cdef inline object _dict_get_decoder(str type_name):
 *     if type_name in _default_values:
 *         if type_name == 'int8':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'uint8':
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_int8, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 330, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":331
 *     if type_name in _default_values:
 *         if type_name == 'int8':
 *             return int             # <<<<<<<<<<<<<<
 *         if type_name == 'uint8':
 *             return int
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
      __pyx_r = ((PyObject *)(&PyInt_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":330
 * cdef inline object _dict_get_decoder(str type_name):
 *     if type_name in _default_values:
 *         if type_name == 'int8':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'uint8':
 */
    }

    /* "c_data_model_v2.pyx":332
 *         if type_name == 'int8':
 *             return int
 *         if type_name == 'uint8':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'int16':
 */
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_uint8, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 332, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":333
 *             return int
 *         if type_name == 'uint8':
 *             return int             # <<<<<<<<<<<<<<
 *         if type_name == 'int16':
 *             return int
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
      __pyx_r = ((PyObject *)(&PyInt_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":332
 *         if type_name == 'int8':
 *             return int
 *         if type_name == 'uint8':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'int16':
 */
    }

    /* "c_data_model_v2.pyx":334
 *         if type_name == 'uint8':
 *             return int
 *         if type_name == 'int16':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'uint16':
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_int16, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 334, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":335
 *             return int
 *         if type_name == 'int16':
 *             return int             # <<<<<<<<<<<<<<
 *         if type_name == 'uint16':
 *             return int
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
      __pyx_r = ((PyObject *)(&PyInt_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":334
 *         if type_name == 'uint8':
 *             return int
 *         if type_name == 'int16':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'uint16':
 */
    }

    /* "c_data_model_v2.pyx":336
 *         if type_name == 'int16':
 *             return int
 *         if type_name == 'uint16':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'int32':
 */
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_uint16, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 336, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":337
 *             return int
 *         if type_name == 'uint16':
 *             return int             # <<<<<<<<<<<<<<
 *         if type_name == 'int32':
 *             return int
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
      __pyx_r = ((PyObject *)(&PyInt_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":336
 *         if type_name == 'int16':
 *             return int
 *         if type_name == 'uint16':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'int32':
 */
    }

    /* "c_data_model_v2.pyx":338
 *         if type_name == 'uint16':
 *             return int
 *         if type_name == 'int32':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'uint32':
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_int32, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 338, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":339
 *             return int
 *         if type_name == 'int32':
 *             return int             # <<<<<<<<<<<<<<
 *         if type_name == 'uint32':
 *             return int
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
      __pyx_r = ((PyObject *)(&PyInt_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":338
 *         if type_name == 'uint16':
 *             return int
 *         if type_name == 'int32':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'uint32':
 */
    }

    /* "c_data_model_v2.pyx":340
 *         if type_name == 'int32':
 *             return int
 *         if type_name == 'uint32':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'int64':
 */
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_uint32, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 340, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":341
 *             return int
 *         if type_name == 'uint32':
 *             return int             # <<<<<<<<<<<<<<
 *         if type_name == 'int64':
 *             return int
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
      __pyx_r = ((PyObject *)(&PyInt_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":340
 *         if type_name == 'int32':
 *             return int
 *         if type_name == 'uint32':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'int64':
 */
    }

    /* "c_data_model_v2.pyx":342
 *         if type_name == 'uint32':
 *             return int
 *         if type_name == 'int64':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'uint64':
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_int64, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 342, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":343
 *             return int
 *         if type_name == 'int64':
 *             return int             # <<<<<<<<<<<<<<
 *         if type_name == 'uint64':
 *             return int
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
      __pyx_r = ((PyObject *)(&PyInt_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":342
 *         if type_name == 'uint32':
 *             return int
 *         if type_name == 'int64':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'uint64':
 */
    }

    /* "c_data_model_v2.pyx":344
 *         if type_name == 'int64':
 *             return int
 *         if type_name == 'uint64':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'float':
 */
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_uint64, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 344, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":345
 *             return int
 *         if type_name == 'uint64':
 *             return int             # <<<<<<<<<<<<<<
 *         if type_name == 'float':
 *             return float
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
      __pyx_r = ((PyObject *)(&PyInt_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":344
 *         if type_name == 'int64':
 *             return int
 *         if type_name == 'uint64':             # <<<<<<<<<<<<<<
 *             return int
 *         if type_name == 'float':
 */
    }

    /* "c_data_model_v2.pyx":346
 *         if type_name == 'uint64':
 *             return int
 *         if type_name == 'float':             # <<<<<<<<<<<<<<
 *             return float
 *         if type_name == 'double':
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_float, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 346, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":347
 *             return int
 *         if type_name == 'float':
 *             return float             # <<<<<<<<<<<<<<
 *         if type_name == 'double':
 *             return float
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
      __pyx_r = ((PyObject *)(&PyFloat_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":346
 *         if type_name == 'uint64':
 *             return int
 *         if type_name == 'float':             # <<<<<<<<<<<<<<
 *             return float
 *         if type_name == 'double':
 */
    }

    /* "c_data_model_v2.pyx":348
 *         if type_name == 'float':
 *             return float
 *         if type_name == 'double':             # <<<<<<<<<<<<<<
 *             return float
 *         if type_name == 'bool':
 */
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_double, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 348, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":349
 *             return float
 *         if type_name == 'double':
 *             return float             # <<<<<<<<<<<<<<
 *         if type_name == 'bool':
 *             return bool
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
      __pyx_r = ((PyObject *)(&PyFloat_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":348
 *         if type_name == 'float':
 *             return float
 *         if type_name == 'double':             # <<<<<<<<<<<<<<
 *             return float
 *         if type_name == 'bool':
 */
    }

    /* "c_data_model_v2.pyx":350
 *         if type_name == 'double':
 *             return float
 *         if type_name == 'bool':             # <<<<<<<<<<<<<<
 *             return bool
 *         if type_name == 'string':
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_bool, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 350, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":351
 *             return float
 *         if type_name == 'bool':
 *             return bool             # <<<<<<<<<<<<<<
 *         if type_name == 'string':
 *             return str
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject*)&PyBool_Type));
      __pyx_r = ((PyObject*)&PyBool_Type);
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":350
 *         if type_name == 'double':
 *             return float
 *         if type_name == 'bool':             # <<<<<<<<<<<<<<
 *             return bool
 *         if type_name == 'string':
 */
    }

    /* "c_data_model_v2.pyx":352
 *         if type_name == 'bool':
 *             return bool
 *         if type_name == 'string':             # <<<<<<<<<<<<<<
 *             return str
 *     return None
 */
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_type_name, __pyx_n_s_string, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 352, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":353
 *             return bool
 *         if type_name == 'string':
 *             return str             # <<<<<<<<<<<<<<
 *     return None
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)(&PyString_Type)));
      __pyx_r = ((PyObject *)(&PyString_Type));
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":352
 *         if type_name == 'bool':
 *             return bool
 *         if type_name == 'string':             # <<<<<<<<<<<<<<
 *             return str
 *     return None
 */
    }

    /* "c_data_model_v2.pyx":329
 * 
 * cdef inline object _dict_get_decoder(str type_name):
 *     if type_name in _default_values:             # <<<<<<<<<<<<<<
 *         if type_name == 'int8':
 *             return int
 */
  }

  /* "c_data_model_v2.pyx":354
 *         if type_name == 'string':
 *             return str
 *     return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":328
 *     return None
 * 
 * cdef inline object _dict_get_decoder(str type_name):             # <<<<<<<<<<<<<<
 *     if type_name in _default_values:
 *         if type_name == 'int8':
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("c_data_model_v2._dict_get_decoder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":357
 * 
 * 
 * cdef inline void _container_copy_from(Field field, object obj, object src):             # <<<<<<<<<<<<<<
 *     if field.array:
 *         (<Array>obj)._copy_from(src)
 */

static CYTHON_INLINE void __pyx_f_15c_data_model_v2__container_copy_from(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field, PyObject *__pyx_v_obj, PyObject *__pyx_v_src) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("_container_copy_from", 0);

  /* "c_data_model_v2.pyx":358
 * 
 * cdef inline void _container_copy_from(Field field, object obj, object src):
 *     if field.array:             # <<<<<<<<<<<<<<
 *         (<Array>obj)._copy_from(src)
 *     elif field.map or field.id_map:
 */
  __pyx_t_1 = (__pyx_v_field->array != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":359
 * cdef inline void _container_copy_from(Field field, object obj, object src):
 *     if field.array:
 *         (<Array>obj)._copy_from(src)             # <<<<<<<<<<<<<<
 *     elif field.map or field.id_map:
 *         (<Map>obj)._copy_from(src)
 */
    ((struct __pyx_vtabstruct_15c_data_model_v2_Array *)((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_v_obj)->__pyx_vtab)->_copy_from(((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_v_obj), __pyx_v_src);

    /* "c_data_model_v2.pyx":358
 * 
 * cdef inline void _container_copy_from(Field field, object obj, object src):
 *     if field.array:             # <<<<<<<<<<<<<<
 *         (<Array>obj)._copy_from(src)
 *     elif field.map or field.id_map:
 */
    goto __pyx_L3;
  }

  /* "c_data_model_v2.pyx":360
 *     if field.array:
 *         (<Array>obj)._copy_from(src)
 *     elif field.map or field.id_map:             # <<<<<<<<<<<<<<
 *         (<Map>obj)._copy_from(src)
 * 
 */
  __pyx_t_2 = (__pyx_v_field->map != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_field->id_map != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":361
 *         (<Array>obj)._copy_from(src)
 *     elif field.map or field.id_map:
 *         (<Map>obj)._copy_from(src)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    ((struct __pyx_vtabstruct_15c_data_model_v2_Map *)((struct __pyx_obj_15c_data_model_v2_Map *)__pyx_v_obj)->__pyx_vtab)->_copy_from(((struct __pyx_obj_15c_data_model_v2_Map *)__pyx_v_obj), __pyx_v_src);

    /* "c_data_model_v2.pyx":360
 *     if field.array:
 *         (<Array>obj)._copy_from(src)
 *     elif field.map or field.id_map:             # <<<<<<<<<<<<<<
 *         (<Map>obj)._copy_from(src)
 * 
 */
  }
  __pyx_L3:;

  /* "c_data_model_v2.pyx":357
 * 
 * 
 * cdef inline void _container_copy_from(Field field, object obj, object src):             # <<<<<<<<<<<<<<
 *     if field.array:
 *         (<Array>obj)._copy_from(src)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":364
 * 
 * 
 * cdef inline void _container_clear_changed(Field field, object obj, bint recursive):             # <<<<<<<<<<<<<<
 *     if field.array:
 *         (<Array>obj)._clear_changed(recursive)
 */

static CYTHON_INLINE void __pyx_f_15c_data_model_v2__container_clear_changed(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field, PyObject *__pyx_v_obj, int __pyx_v_recursive) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_opt_args_15c_data_model_v2_5Array__clear_changed __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_opt_args_15c_data_model_v2_3Map__clear_changed __pyx_t_4;
  __Pyx_RefNannySetupContext("_container_clear_changed", 0);

  /* "c_data_model_v2.pyx":365
 * 
 * cdef inline void _container_clear_changed(Field field, object obj, bint recursive):
 *     if field.array:             # <<<<<<<<<<<<<<
 *         (<Array>obj)._clear_changed(recursive)
 *     elif field.map or field.id_map:
 */
  __pyx_t_1 = (__pyx_v_field->array != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":366
 * cdef inline void _container_clear_changed(Field field, object obj, bint recursive):
 *     if field.array:
 *         (<Array>obj)._clear_changed(recursive)             # <<<<<<<<<<<<<<
 *     elif field.map or field.id_map:
 *         (<Map>obj)._clear_changed(recursive)
 */
    __pyx_t_2.__pyx_n = 1;
    __pyx_t_2.recursive = __pyx_v_recursive;
    ((struct __pyx_vtabstruct_15c_data_model_v2_Array *)((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_v_obj)->__pyx_vtab)->_clear_changed(((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_v_obj), &__pyx_t_2); 

    /* "c_data_model_v2.pyx":365
 * 
 * cdef inline void _container_clear_changed(Field field, object obj, bint recursive):
 *     if field.array:             # <<<<<<<<<<<<<<
 *         (<Array>obj)._clear_changed(recursive)
 *     elif field.map or field.id_map:
 */
    goto __pyx_L3;
  }

  /* "c_data_model_v2.pyx":367
 *     if field.array:
 *         (<Array>obj)._clear_changed(recursive)
 *     elif field.map or field.id_map:             # <<<<<<<<<<<<<<
 *         (<Map>obj)._clear_changed(recursive)
 * 
 */
  __pyx_t_3 = (__pyx_v_field->map != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_field->id_map != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":368
 *         (<Array>obj)._clear_changed(recursive)
 *     elif field.map or field.id_map:
 *         (<Map>obj)._clear_changed(recursive)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_4.__pyx_n = 1;
    __pyx_t_4.recursive = __pyx_v_recursive;
    __pyx_f_15c_data_model_v2_3Map__clear_changed(((struct __pyx_obj_15c_data_model_v2_Map *)__pyx_v_obj), &__pyx_t_4); 

    /* "c_data_model_v2.pyx":367
 *     if field.array:
 *         (<Array>obj)._clear_changed(recursive)
 *     elif field.map or field.id_map:             # <<<<<<<<<<<<<<
 *         (<Map>obj)._clear_changed(recursive)
 * 
 */
  }
  __pyx_L3:;

  /* "c_data_model_v2.pyx":364
 * 
 * 
 * cdef inline void _container_clear_changed(Field field, object obj, bint recursive):             # <<<<<<<<<<<<<<
 *     if field.array:
 *         (<Array>obj)._clear_changed(recursive)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":371
 * 
 * 
 * cdef inline bint _container_has_changed(Field field, object obj, bint recursive):             # <<<<<<<<<<<<<<
 *     if field.array:
 *         return (<Array>obj)._has_changed(recursive)
 */

static CYTHON_INLINE int __pyx_f_15c_data_model_v2__container_has_changed(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field, PyObject *__pyx_v_obj, int __pyx_v_recursive) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_15c_data_model_v2_5Array__has_changed __pyx_t_3;
  int __pyx_t_4;
  struct __pyx_opt_args_15c_data_model_v2_3Map__has_changed __pyx_t_5;
  __Pyx_RefNannySetupContext("_container_has_changed", 0);

  /* "c_data_model_v2.pyx":372
 * 
 * cdef inline bint _container_has_changed(Field field, object obj, bint recursive):
 *     if field.array:             # <<<<<<<<<<<<<<
 *         return (<Array>obj)._has_changed(recursive)
 *     elif field.map or field.id_map:
 */
  __pyx_t_1 = (__pyx_v_field->array != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":373
 * cdef inline bint _container_has_changed(Field field, object obj, bint recursive):
 *     if field.array:
 *         return (<Array>obj)._has_changed(recursive)             # <<<<<<<<<<<<<<
 *     elif field.map or field.id_map:
 *         return (<Map>obj)._has_changed(recursive)
 */
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_recursive); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3.__pyx_n = 1;
    __pyx_t_3.recursive = __pyx_t_2;
    __pyx_t_1 = ((struct __pyx_vtabstruct_15c_data_model_v2_Array *)((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_v_obj)->__pyx_vtab)->_has_changed(((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_v_obj), 0, &__pyx_t_3); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":372
 * 
 * cdef inline bint _container_has_changed(Field field, object obj, bint recursive):
 *     if field.array:             # <<<<<<<<<<<<<<
 *         return (<Array>obj)._has_changed(recursive)
 *     elif field.map or field.id_map:
 */
  }

  /* "c_data_model_v2.pyx":374
 *     if field.array:
 *         return (<Array>obj)._has_changed(recursive)
 *     elif field.map or field.id_map:             # <<<<<<<<<<<<<<
 *         return (<Map>obj)._has_changed(recursive)
 *     return False
 */
  __pyx_t_4 = (__pyx_v_field->map != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = (__pyx_v_field->id_map != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":375
 *         return (<Array>obj)._has_changed(recursive)
 *     elif field.map or field.id_map:
 *         return (<Map>obj)._has_changed(recursive)             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
    __pyx_t_5.__pyx_n = 1;
    __pyx_t_5.recursive = __pyx_v_recursive;
    __pyx_t_1 = ((struct __pyx_vtabstruct_15c_data_model_v2_Map *)((struct __pyx_obj_15c_data_model_v2_Map *)__pyx_v_obj)->__pyx_vtab)->_has_changed(((struct __pyx_obj_15c_data_model_v2_Map *)__pyx_v_obj), 0, &__pyx_t_5); 
    __pyx_r = __pyx_t_1;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":374
 *     if field.array:
 *         return (<Array>obj)._has_changed(recursive)
 *     elif field.map or field.id_map:             # <<<<<<<<<<<<<<
 *         return (<Map>obj)._has_changed(recursive)
 *     return False
 */
  }

  /* "c_data_model_v2.pyx":376
 *     elif field.map or field.id_map:
 *         return (<Map>obj)._has_changed(recursive)
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":371
 * 
 * 
 * cdef inline bint _container_has_changed(Field field, object obj, bint recursive):             # <<<<<<<<<<<<<<
 *     if field.array:
 *         return (<Array>obj)._has_changed(recursive)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("c_data_model_v2._container_has_changed", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":379
 * 
 * 
 * cdef inline bint _container_item_has_changed(Field field, object item, bint recursive):             # <<<<<<<<<<<<<<
 *     cdef DataModel dm_item
 *     if field.is_data_model_type() and not field.ref:
 */

static CYTHON_INLINE int __pyx_f_15c_data_model_v2__container_item_has_changed(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field, PyObject *__pyx_v_item, int __pyx_v_recursive) {
  struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_dm_item = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_container_item_has_changed", 0);

  /* "c_data_model_v2.pyx":381
 * cdef inline bint _container_item_has_changed(Field field, object item, bint recursive):
 *     cdef DataModel dm_item
 *     if field.is_data_model_type() and not field.ref:             # <<<<<<<<<<<<<<
 *         dm_item = <DataModel>item
 *         return dm_item._has_changed(recursive)
 */
  __pyx_t_2 = (__pyx_f_15c_data_model_v2_5Field_is_data_model_type(__pyx_v_field) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_field->ref != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":382
 *     cdef DataModel dm_item
 *     if field.is_data_model_type() and not field.ref:
 *         dm_item = <DataModel>item             # <<<<<<<<<<<<<<
 *         return dm_item._has_changed(recursive)
 *     return False
 */
    __pyx_t_3 = __pyx_v_item;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_dm_item = ((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "c_data_model_v2.pyx":383
 *     if field.is_data_model_type() and not field.ref:
 *         dm_item = <DataModel>item
 *         return dm_item._has_changed(recursive)             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
    __pyx_r = ((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_dm_item->__pyx_vtab)->_has_changed(__pyx_v_dm_item, __pyx_v_recursive);
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":381
 * cdef inline bint _container_item_has_changed(Field field, object item, bint recursive):
 *     cdef DataModel dm_item
 *     if field.is_data_model_type() and not field.ref:             # <<<<<<<<<<<<<<
 *         dm_item = <DataModel>item
 *         return dm_item._has_changed(recursive)
 */
  }

  /* "c_data_model_v2.pyx":384
 *         dm_item = <DataModel>item
 *         return dm_item._has_changed(recursive)
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":379
 * 
 * 
 * cdef inline bint _container_item_has_changed(Field field, object item, bint recursive):             # <<<<<<<<<<<<<<
 *     cdef DataModel dm_item
 *     if field.is_data_model_type() and not field.ref:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dm_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":387
 * 
 * 
 * cdef inline _container_item_clear_changed(Field field, object item, bint recursive):             # <<<<<<<<<<<<<<
 *     cdef DataModel dm_item
 *     if field.is_data_model_type() and not field.ref:
 */

static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2__container_item_clear_changed(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field, PyObject *__pyx_v_item, int __pyx_v_recursive) {
  struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_dm_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_container_item_clear_changed", 0);

  /* "c_data_model_v2.pyx":389
 * cdef inline _container_item_clear_changed(Field field, object item, bint recursive):
 *     cdef DataModel dm_item
 *     if field.is_data_model_type() and not field.ref:             # <<<<<<<<<<<<<<
 *         dm_item = <DataModel>item
 *         dm_item._clear_changed(None, recursive)
 */
  __pyx_t_2 = (__pyx_f_15c_data_model_v2_5Field_is_data_model_type(__pyx_v_field) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_field->ref != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":390
 *     cdef DataModel dm_item
 *     if field.is_data_model_type() and not field.ref:
 *         dm_item = <DataModel>item             # <<<<<<<<<<<<<<
 *         dm_item._clear_changed(None, recursive)
 * 
 */
    __pyx_t_3 = __pyx_v_item;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_dm_item = ((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "c_data_model_v2.pyx":391
 *     if field.is_data_model_type() and not field.ref:
 *         dm_item = <DataModel>item
 *         dm_item._clear_changed(None, recursive)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    ((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_dm_item->__pyx_vtab)->_clear_changed(__pyx_v_dm_item, Py_None, __pyx_v_recursive);

    /* "c_data_model_v2.pyx":389
 * cdef inline _container_item_clear_changed(Field field, object item, bint recursive):
 *     cdef DataModel dm_item
 *     if field.is_data_model_type() and not field.ref:             # <<<<<<<<<<<<<<
 *         dm_item = <DataModel>item
 *         dm_item._clear_changed(None, recursive)
 */
  }

  /* "c_data_model_v2.pyx":387
 * 
 * 
 * cdef inline _container_item_clear_changed(Field field, object item, bint recursive):             # <<<<<<<<<<<<<<
 *     cdef DataModel dm_item
 *     if field.is_data_model_type() and not field.ref:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XDECREF((PyObject *)__pyx_v_dm_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":394
 * 
 * 
 * cdef inline _container_item_set_changed(Field field, object item, bint recursive):             # <<<<<<<<<<<<<<
 *     cdef DataModel dm_item
 *     if field.is_data_model_type() and not field.ref:
 */

static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2__container_item_set_changed(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field, PyObject *__pyx_v_item, int __pyx_v_recursive) {
  struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_dm_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_container_item_set_changed", 0);

  /* "c_data_model_v2.pyx":396
 * cdef inline _container_item_set_changed(Field field, object item, bint recursive):
 *     cdef DataModel dm_item
 *     if field.is_data_model_type() and not field.ref:             # <<<<<<<<<<<<<<
 *         dm_item = <DataModel>item
 *         dm_item._set_changed(recursive)
 */
  __pyx_t_2 = (__pyx_f_15c_data_model_v2_5Field_is_data_model_type(__pyx_v_field) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_field->ref != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":397
 *     cdef DataModel dm_item
 *     if field.is_data_model_type() and not field.ref:
 *         dm_item = <DataModel>item             # <<<<<<<<<<<<<<
 *         dm_item._set_changed(recursive)
 * 
 */
    __pyx_t_3 = __pyx_v_item;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_dm_item = ((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "c_data_model_v2.pyx":398
 *     if field.is_data_model_type() and not field.ref:
 *         dm_item = <DataModel>item
 *         dm_item._set_changed(recursive)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_recursive); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    ((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_dm_item->__pyx_vtab)->_set_changed(__pyx_v_dm_item, __pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "c_data_model_v2.pyx":396
 * cdef inline _container_item_set_changed(Field field, object item, bint recursive):
 *     cdef DataModel dm_item
 *     if field.is_data_model_type() and not field.ref:             # <<<<<<<<<<<<<<
 *         dm_item = <DataModel>item
 *         dm_item._set_changed(recursive)
 */
  }

  /* "c_data_model_v2.pyx":394
 * 
 * 
 * cdef inline _container_item_set_changed(Field field, object item, bint recursive):             # <<<<<<<<<<<<<<
 *     cdef DataModel dm_item
 *     if field.is_data_model_type() and not field.ref:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("c_data_model_v2._container_item_set_changed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dm_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":402
 * 
 * cdef object make_fget(Field field):
 *     def fget(object self):             # <<<<<<<<<<<<<<
 *         return self.__dict__.get(field.key, field.default)
 *     return fget
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_9make_fget_1fget(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_15c_data_model_v2_9make_fget_1fget = {"fget", (PyCFunction)__pyx_pw_15c_data_model_v2_9make_fget_1fget, METH_O, 0};
static PyObject *__pyx_pw_15c_data_model_v2_9make_fget_1fget(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fget (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_9make_fget_fget(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_9make_fget_fget(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget *__pyx_cur_scope;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("fget", 0);
  __pyx_outer_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "c_data_model_v2.pyx":403
 * cdef object make_fget(Field field):
 *     def fget(object self):
 *         return self.__dict__.get(field.key, field.default)             # <<<<<<<<<<<<<<
 *     return fget
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 403, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 403, __pyx_L1_error) }
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_cur_scope->__pyx_v_field->key, __pyx_cur_scope->__pyx_v_field->__pyx_default};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_cur_scope->__pyx_v_field->key, __pyx_cur_scope->__pyx_v_field->__pyx_default};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_field->key);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_field->key);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_cur_scope->__pyx_v_field->key);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_field->__pyx_default);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_field->__pyx_default);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_cur_scope->__pyx_v_field->__pyx_default);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":402
 * 
 * cdef object make_fget(Field field):
 *     def fget(object self):             # <<<<<<<<<<<<<<
 *         return self.__dict__.get(field.key, field.default)
 *     return fget
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("c_data_model_v2.make_fget.fget", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":401
 * 
 * 
 * cdef object make_fget(Field field):             # <<<<<<<<<<<<<<
 *     def fget(object self):
 *         return self.__dict__.get(field.key, field.default)
 */

static PyObject *__pyx_f_15c_data_model_v2_make_fget(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget *__pyx_cur_scope;
  PyObject *__pyx_v_fget = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("make_fget", 0);
  __pyx_cur_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget *)__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget(__pyx_ptype_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 401, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_field = __pyx_v_field;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_field);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_field);

  /* "c_data_model_v2.pyx":402
 * 
 * cdef object make_fget(Field field):
 *     def fget(object self):             # <<<<<<<<<<<<<<
 *         return self.__dict__.get(field.key, field.default)
 *     return fget
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_15c_data_model_v2_9make_fget_1fget, 0, __pyx_n_s_make_fget_locals_fget, ((PyObject*)__pyx_cur_scope), __pyx_n_s_c_data_model_v2, __pyx_d, ((PyObject *)__pyx_codeobj__9)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fget = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":404
 *     def fget(object self):
 *         return self.__dict__.get(field.key, field.default)
 *     return fget             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_fget);
  __pyx_r = __pyx_v_fget;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":401
 * 
 * 
 * cdef object make_fget(Field field):             # <<<<<<<<<<<<<<
 *     def fget(object self):
 *         return self.__dict__.get(field.key, field.default)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.make_fget", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fget);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":408
 * 
 * cdef object make_fset(Field field):
 *     def fset(object self, object value):             # <<<<<<<<<<<<<<
 *         cdef dict self_dict = self.__dict__
 *         cdef DataModel dm_self
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_9make_fset_1fset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15c_data_model_v2_9make_fset_1fset = {"fset", (PyCFunction)__pyx_pw_15c_data_model_v2_9make_fset_1fset, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15c_data_model_v2_9make_fset_1fset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fset (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fset", 1, 2, 2, 1); __PYX_ERR(0, 408, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fset") < 0)) __PYX_ERR(0, 408, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fset", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 408, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.make_fset.fset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_9make_fset_fset(__pyx_self, __pyx_v_self, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_9make_fset_fset(PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset *__pyx_cur_scope;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset *__pyx_outer_scope;
  PyObject *__pyx_v_self_dict = 0;
  struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_dm_self = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("fset", 0);
  __pyx_outer_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "c_data_model_v2.pyx":409
 * cdef object make_fset(Field field):
 *     def fset(object self, object value):
 *         cdef dict self_dict = self.__dict__             # <<<<<<<<<<<<<<
 *         cdef DataModel dm_self
 *         if self_dict.get(field.key) != value:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 409, __pyx_L1_error)
  __pyx_v_self_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":411
 *         cdef dict self_dict = self.__dict__
 *         cdef DataModel dm_self
 *         if self_dict.get(field.key) != value:             # <<<<<<<<<<<<<<
 *             self_dict[field.key] = value
 *             dm_self = <DataModel>self
 */
  if (unlikely(__pyx_v_self_dict == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 411, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 411, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_self_dict, __pyx_cur_scope->__pyx_v_field->key, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_v_value, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":412
 *         cdef DataModel dm_self
 *         if self_dict.get(field.key) != value:
 *             self_dict[field.key] = value             # <<<<<<<<<<<<<<
 *             dm_self = <DataModel>self
 *             dm_self._set_field_changed(field)
 */
    if (unlikely(__pyx_v_self_dict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 412, __pyx_L1_error)
    }
    if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 412, __pyx_L1_error) }
    if (unlikely(PyDict_SetItem(__pyx_v_self_dict, __pyx_cur_scope->__pyx_v_field->key, __pyx_v_value) < 0)) __PYX_ERR(0, 412, __pyx_L1_error)

    /* "c_data_model_v2.pyx":413
 *         if self_dict.get(field.key) != value:
 *             self_dict[field.key] = value
 *             dm_self = <DataModel>self             # <<<<<<<<<<<<<<
 *             dm_self._set_field_changed(field)
 *     return fset
 */
    __pyx_t_2 = __pyx_v_self;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_dm_self = ((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "c_data_model_v2.pyx":414
 *             self_dict[field.key] = value
 *             dm_self = <DataModel>self
 *             dm_self._set_field_changed(field)             # <<<<<<<<<<<<<<
 *     return fset
 * 
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 414, __pyx_L1_error) }
    __pyx_t_2 = ((PyObject *)__pyx_cur_scope->__pyx_v_field);
    __Pyx_INCREF(__pyx_t_2);
    ((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_dm_self->__pyx_vtab)->_set_field_changed(__pyx_v_dm_self, ((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_2));
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "c_data_model_v2.pyx":411
 *         cdef dict self_dict = self.__dict__
 *         cdef DataModel dm_self
 *         if self_dict.get(field.key) != value:             # <<<<<<<<<<<<<<
 *             self_dict[field.key] = value
 *             dm_self = <DataModel>self
 */
  }

  /* "c_data_model_v2.pyx":408
 * 
 * cdef object make_fset(Field field):
 *     def fset(object self, object value):             # <<<<<<<<<<<<<<
 *         cdef dict self_dict = self.__dict__
 *         cdef DataModel dm_self
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("c_data_model_v2.make_fset.fset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_self_dict);
  __Pyx_XDECREF((PyObject *)__pyx_v_dm_self);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":407
 * 
 * 
 * cdef object make_fset(Field field):             # <<<<<<<<<<<<<<
 *     def fset(object self, object value):
 *         cdef dict self_dict = self.__dict__
 */

static PyObject *__pyx_f_15c_data_model_v2_make_fset(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset *__pyx_cur_scope;
  PyObject *__pyx_v_fset = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("make_fset", 0);
  __pyx_cur_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset *)__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset(__pyx_ptype_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 407, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_field = __pyx_v_field;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_field);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_field);

  /* "c_data_model_v2.pyx":408
 * 
 * cdef object make_fset(Field field):
 *     def fset(object self, object value):             # <<<<<<<<<<<<<<
 *         cdef dict self_dict = self.__dict__
 *         cdef DataModel dm_self
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_15c_data_model_v2_9make_fset_1fset, 0, __pyx_n_s_make_fset_locals_fset, ((PyObject*)__pyx_cur_scope), __pyx_n_s_c_data_model_v2, __pyx_d, ((PyObject *)__pyx_codeobj__11)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fset = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":415
 *             dm_self = <DataModel>self
 *             dm_self._set_field_changed(field)
 *     return fset             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_fset);
  __pyx_r = __pyx_v_fset;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":407
 * 
 * 
 * cdef object make_fset(Field field):             # <<<<<<<<<<<<<<
 *     def fset(object self, object value):
 *         cdef dict self_dict = self.__dict__
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.make_fset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fset);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":419
 * 
 * cdef object make_fdel(Field field):
 *     def fdel(object self):             # <<<<<<<<<<<<<<
 *         cdef DataModel dm_self
 *         if hasattr(self, Field.key):
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_9make_fdel_1fdel(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_15c_data_model_v2_9make_fdel_1fdel = {"fdel", (PyCFunction)__pyx_pw_15c_data_model_v2_9make_fdel_1fdel, METH_O, 0};
static PyObject *__pyx_pw_15c_data_model_v2_9make_fdel_1fdel(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fdel (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_9make_fdel_fdel(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_9make_fdel_fdel(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel *__pyx_cur_scope;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel *__pyx_outer_scope;
  struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_dm_self = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("fdel", 0);
  __pyx_outer_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "c_data_model_v2.pyx":421
 *     def fdel(object self):
 *         cdef DataModel dm_self
 *         if hasattr(self, Field.key):             # <<<<<<<<<<<<<<
 *             delattr(self, Field.key)
 *             # FIXME: set dirty ?
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_15c_data_model_v2_Field), __pyx_n_s_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_HasAttr(__pyx_v_self, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":422
 *         cdef DataModel dm_self
 *         if hasattr(self, Field.key):
 *             delattr(self, Field.key)             # <<<<<<<<<<<<<<
 *             # FIXME: set dirty ?
 *             dm_self = <DataModel>self
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_15c_data_model_v2_Field), __pyx_n_s_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_DelAttr(__pyx_v_self, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "c_data_model_v2.pyx":424
 *             delattr(self, Field.key)
 *             # FIXME: set dirty ?
 *             dm_self = <DataModel>self             # <<<<<<<<<<<<<<
 *             dm_self._set_field_changed(field)
 *     return fdel
 */
    __pyx_t_1 = __pyx_v_self;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_dm_self = ((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "c_data_model_v2.pyx":425
 *             # FIXME: set dirty ?
 *             dm_self = <DataModel>self
 *             dm_self._set_field_changed(field)             # <<<<<<<<<<<<<<
 *     return fdel
 * 
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 425, __pyx_L1_error) }
    __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_v_field);
    __Pyx_INCREF(__pyx_t_1);
    ((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_dm_self->__pyx_vtab)->_set_field_changed(__pyx_v_dm_self, ((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_1));
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "c_data_model_v2.pyx":421
 *     def fdel(object self):
 *         cdef DataModel dm_self
 *         if hasattr(self, Field.key):             # <<<<<<<<<<<<<<
 *             delattr(self, Field.key)
 *             # FIXME: set dirty ?
 */
  }

  /* "c_data_model_v2.pyx":419
 * 
 * cdef object make_fdel(Field field):
 *     def fdel(object self):             # <<<<<<<<<<<<<<
 *         cdef DataModel dm_self
 *         if hasattr(self, Field.key):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.make_fdel.fdel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dm_self);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":418
 * 
 * 
 * cdef object make_fdel(Field field):             # <<<<<<<<<<<<<<
 *     def fdel(object self):
 *         cdef DataModel dm_self
 */

static PyObject *__pyx_f_15c_data_model_v2_make_fdel(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel *__pyx_cur_scope;
  PyObject *__pyx_v_fdel = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("make_fdel", 0);
  __pyx_cur_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel *)__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel(__pyx_ptype_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 418, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_field = __pyx_v_field;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_field);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_field);

  /* "c_data_model_v2.pyx":419
 * 
 * cdef object make_fdel(Field field):
 *     def fdel(object self):             # <<<<<<<<<<<<<<
 *         cdef DataModel dm_self
 *         if hasattr(self, Field.key):
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_15c_data_model_v2_9make_fdel_1fdel, 0, __pyx_n_s_make_fdel_locals_fdel, ((PyObject*)__pyx_cur_scope), __pyx_n_s_c_data_model_v2, __pyx_d, ((PyObject *)__pyx_codeobj__13)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fdel = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":426
 *             dm_self = <DataModel>self
 *             dm_self._set_field_changed(field)
 *     return fdel             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_fdel);
  __pyx_r = __pyx_v_fdel;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":418
 * 
 * 
 * cdef object make_fdel(Field field):             # <<<<<<<<<<<<<<
 *     def fdel(object self):
 *         cdef DataModel dm_self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.make_fdel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fdel);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":429
 * 
 * 
 * cdef object _field_value_to_dict(encoder, Field field, object value,             # <<<<<<<<<<<<<<
 *                                  bint recursive, bint only_changed,
 *                                  bint clear_changed, FieldFilter field_filter,
 */

static PyObject *__pyx_f_15c_data_model_v2__field_value_to_dict(PyObject *__pyx_v_encoder, struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field, PyObject *__pyx_v_value, int __pyx_v_recursive, int __pyx_v_only_changed, int __pyx_v_clear_changed, struct __pyx_obj_15c_data_model_v2_FieldFilter *__pyx_v_field_filter, struct __pyx_opt_args_15c_data_model_v2__field_value_to_dict *__pyx_optional_args) {

  /* "c_data_model_v2.pyx":432
 *                                  bint recursive, bint only_changed,
 *                                  bint clear_changed, FieldFilter field_filter,
 *                                  bint with_skip_from_pack=True):             # <<<<<<<<<<<<<<
 *     '''
 *     @memo:
 */
  int __pyx_v_with_skip_from_pack = ((int)1);
  int __pyx_v_have_data;
  PyObject *__pyx_v_dict_data = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("_field_value_to_dict", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_with_skip_from_pack = __pyx_optional_args->with_skip_from_pack;
    }
  }

  /* "c_data_model_v2.pyx":438
 *     '''
 *     cdef bint have_data
 *     if encoder:             # <<<<<<<<<<<<<<
 *         return encoder(value)
 *     elif recursive:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_encoder); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 438, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":439
 *     cdef bint have_data
 *     if encoder:
 *         return encoder(value)             # <<<<<<<<<<<<<<
 *     elif recursive:
 *         if field.ref:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_encoder);
    __pyx_t_3 = __pyx_v_encoder; __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_value};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_value};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 439, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_value);
        __Pyx_GIVEREF(__pyx_v_value);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_value);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":438
 *     '''
 *     cdef bint have_data
 *     if encoder:             # <<<<<<<<<<<<<<
 *         return encoder(value)
 *     elif recursive:
 */
  }

  /* "c_data_model_v2.pyx":440
 *     if encoder:
 *         return encoder(value)
 *     elif recursive:             # <<<<<<<<<<<<<<
 *         if field.ref:
 *             return field.dict_ref_encoder(getattr(value, "oid", None))
 */
  __pyx_t_1 = (__pyx_v_recursive != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":441
 *         return encoder(value)
 *     elif recursive:
 *         if field.ref:             # <<<<<<<<<<<<<<
 *             return field.dict_ref_encoder(getattr(value, "oid", None))
 *         else:
 */
    __pyx_t_1 = (__pyx_v_field->ref != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":442
 *     elif recursive:
 *         if field.ref:
 *             return field.dict_ref_encoder(getattr(value, "oid", None))             # <<<<<<<<<<<<<<
 *         else:
 *             dict_data = {}
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_GetAttr3(__pyx_v_value, __pyx_n_s_oid, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_field->dict_ref_encoder);
      __pyx_t_5 = __pyx_v_field->dict_ref_encoder; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 442, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 442, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 442, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 442, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 442, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":441
 *         return encoder(value)
 *     elif recursive:
 *         if field.ref:             # <<<<<<<<<<<<<<
 *             return field.dict_ref_encoder(getattr(value, "oid", None))
 *         else:
 */
    }

    /* "c_data_model_v2.pyx":444
 *             return field.dict_ref_encoder(getattr(value, "oid", None))
 *         else:
 *             dict_data = {}             # <<<<<<<<<<<<<<
 *             have_data = _encode_to_dict(dict_data,
 *                                         field.data_model_protocol,
 */
    /*else*/ {
      __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 444, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_dict_data = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "c_data_model_v2.pyx":446
 *             dict_data = {}
 *             have_data = _encode_to_dict(dict_data,
 *                                         field.data_model_protocol,             # <<<<<<<<<<<<<<
 *                                         value,
 *                                         recursive=recursive,
 */
      __pyx_t_2 = ((PyObject *)__pyx_v_field->data_model_protocol);
      __Pyx_INCREF(__pyx_t_2);

      /* "c_data_model_v2.pyx":445
 *         else:
 *             dict_data = {}
 *             have_data = _encode_to_dict(dict_data,             # <<<<<<<<<<<<<<
 *                                         field.data_model_protocol,
 *                                         value,
 */
      __pyx_v_have_data = __pyx_f_15c_data_model_v2__encode_to_dict(__pyx_v_dict_data, ((struct __pyx_obj_15c_data_model_v2_DataModelProtocol *)__pyx_t_2), __pyx_v_value, __pyx_v_recursive, __pyx_v_only_changed, __pyx_v_clear_changed, __pyx_v_field_filter);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "c_data_model_v2.pyx":452
 *                                         clear_changed=clear_changed,
 *                                         field_filter=field_filter)
 *             if with_skip_from_pack:             # <<<<<<<<<<<<<<
 *                 return dict_data if have_data else SKIP_FROM_PACK
 *             else:
 */
      __pyx_t_1 = (__pyx_v_with_skip_from_pack != 0);
      if (__pyx_t_1) {

        /* "c_data_model_v2.pyx":453
 *                                         field_filter=field_filter)
 *             if with_skip_from_pack:
 *                 return dict_data if have_data else SKIP_FROM_PACK             # <<<<<<<<<<<<<<
 *             else:
 *                 return dict_data
 */
        __Pyx_XDECREF(__pyx_r);
        if ((__pyx_v_have_data != 0)) {
          __Pyx_INCREF(__pyx_v_dict_data);
          __pyx_t_2 = __pyx_v_dict_data;
        } else {
          __Pyx_INCREF(__pyx_v_15c_data_model_v2_SKIP_FROM_PACK);
          __pyx_t_2 = __pyx_v_15c_data_model_v2_SKIP_FROM_PACK;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        goto __pyx_L0;

        /* "c_data_model_v2.pyx":452
 *                                         clear_changed=clear_changed,
 *                                         field_filter=field_filter)
 *             if with_skip_from_pack:             # <<<<<<<<<<<<<<
 *                 return dict_data if have_data else SKIP_FROM_PACK
 *             else:
 */
      }

      /* "c_data_model_v2.pyx":455
 *                 return dict_data if have_data else SKIP_FROM_PACK
 *             else:
 *                 return dict_data             # <<<<<<<<<<<<<<
 * 
 * 
 */
      /*else*/ {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_v_dict_data);
        __pyx_r = __pyx_v_dict_data;
        goto __pyx_L0;
      }
    }

    /* "c_data_model_v2.pyx":440
 *     if encoder:
 *         return encoder(value)
 *     elif recursive:             # <<<<<<<<<<<<<<
 *         if field.ref:
 *             return field.dict_ref_encoder(getattr(value, "oid", None))
 */
  }

  /* "c_data_model_v2.pyx":429
 * 
 * 
 * cdef object _field_value_to_dict(encoder, Field field, object value,             # <<<<<<<<<<<<<<
 *                                  bint recursive, bint only_changed,
 *                                  bint clear_changed, FieldFilter field_filter,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("c_data_model_v2._field_value_to_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dict_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":458
 * 
 * 
 * cdef bint _encode_to_dict(dict dict_data, DataModelProtocol protocol, object obj,             # <<<<<<<<<<<<<<
 *                           bint recursive, bint only_changed, bint clear_changed,
 *                           FieldFilter field_filter):
 */

static int __pyx_f_15c_data_model_v2__encode_to_dict(PyObject *__pyx_v_dict_data, struct __pyx_obj_15c_data_model_v2_DataModelProtocol *__pyx_v_protocol, PyObject *__pyx_v_obj, int __pyx_v_recursive, int __pyx_v_only_changed, int __pyx_v_clear_changed, struct __pyx_obj_15c_data_model_v2_FieldFilter *__pyx_v_field_filter) {
  PyObject *__pyx_v_obj_dict = 0;
  struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field = 0;
  PyObject *__pyx_v_d = 0;
  int __pyx_v_have_data;
  PyObject *__pyx_v_fvalue = 0;
  struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_dm_obj = 0;
  PyObject *__pyx_v_value = 0;
  struct __pyx_obj_15c_data_model_v2_FieldFilter *__pyx_v_i_field_filter = 0;
  PyObject *__pyx_v_encoder = NULL;
  PyObject *__pyx_v_kencoder = NULL;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_key = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  struct __pyx_opt_args_15c_data_model_v2__field_value_to_dict __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  __Pyx_RefNannySetupContext("_encode_to_dict", 0);

  /* "c_data_model_v2.pyx":462
 *                           FieldFilter field_filter):
 *     '''dict'''
 *     cdef dict obj_dict = obj.__dict__             # <<<<<<<<<<<<<<
 * 
 *     cdef Field field
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 462, __pyx_L1_error)
  __pyx_v_obj_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":467
 *     cdef dict d
 *     cdef Map map_value
 *     cdef bint have_data = False if only_changed else True             # <<<<<<<<<<<<<<
 *     cdef object fvalue
 *     cdef DataModel dm_obj = <DataModel>obj
 */
  if ((__pyx_v_only_changed != 0)) {
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = 1;
  }
  __pyx_v_have_data = __pyx_t_2;

  /* "c_data_model_v2.pyx":469
 *     cdef bint have_data = False if only_changed else True
 *     cdef object fvalue
 *     cdef DataModel dm_obj = <DataModel>obj             # <<<<<<<<<<<<<<
 *     cdef object value
 *     cdef FieldFilter i_field_filter
 */
  __pyx_t_1 = __pyx_v_obj;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_dm_obj = ((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":473
 *     cdef FieldFilter i_field_filter
 * 
 *     for field in protocol.fields_define.fields:             # <<<<<<<<<<<<<<
 *         value = obj_dict.get(field.key)
 *         if value is None:
 */
  if (unlikely(__pyx_v_protocol->fields_define->fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 473, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_protocol->fields_define->fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 473, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_15c_data_model_v2_Field))))) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_field, ((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":474
 * 
 *     for field in protocol.fields_define.fields:
 *         value = obj_dict.get(field.key)             # <<<<<<<<<<<<<<
 *         if value is None:
 *             continue
 */
    if (unlikely(__pyx_v_obj_dict == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
      __PYX_ERR(0, 474, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyDict_GetItemDefault(__pyx_v_obj_dict, __pyx_v_field->key, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":475
 *     for field in protocol.fields_define.fields:
 *         value = obj_dict.get(field.key)
 *         if value is None:             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
    __pyx_t_2 = (__pyx_v_value == Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (__pyx_t_5) {

      /* "c_data_model_v2.pyx":476
 *         value = obj_dict.get(field.key)
 *         if value is None:
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         if field_filter.is_filted(field):
 */
      goto __pyx_L3_continue;

      /* "c_data_model_v2.pyx":475
 *     for field in protocol.fields_define.fields:
 *         value = obj_dict.get(field.key)
 *         if value is None:             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
    }

    /* "c_data_model_v2.pyx":478
 *             continue
 * 
 *         if field_filter.is_filted(field):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    __pyx_t_5 = (((struct __pyx_vtabstruct_15c_data_model_v2_FieldFilter *)__pyx_v_field_filter->__pyx_vtab)->is_filted(__pyx_v_field_filter, __pyx_v_field) != 0);
    if (__pyx_t_5) {

      /* "c_data_model_v2.pyx":479
 * 
 *         if field_filter.is_filted(field):
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *         if only_changed:
 */
      goto __pyx_L3_continue;

      /* "c_data_model_v2.pyx":478
 *             continue
 * 
 *         if field_filter.is_filted(field):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    }

    /* "c_data_model_v2.pyx":481
 *                 continue
 * 
 *         if only_changed:             # <<<<<<<<<<<<<<
 *             if not dm_obj._has_field_changed(field, obj_dict, recursive):
 *                 continue
 */
    __pyx_t_5 = (__pyx_v_only_changed != 0);
    if (__pyx_t_5) {

      /* "c_data_model_v2.pyx":482
 * 
 *         if only_changed:
 *             if not dm_obj._has_field_changed(field, obj_dict, recursive):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      __pyx_t_5 = ((!(((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_dm_obj->__pyx_vtab)->_has_field_changed(__pyx_v_dm_obj, __pyx_v_field, __pyx_v_obj_dict, __pyx_v_recursive) != 0)) != 0);
      if (__pyx_t_5) {

        /* "c_data_model_v2.pyx":483
 *         if only_changed:
 *             if not dm_obj._has_field_changed(field, obj_dict, recursive):
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *         encoder = field.dict_encoder
 */
        goto __pyx_L3_continue;

        /* "c_data_model_v2.pyx":482
 * 
 *         if only_changed:
 *             if not dm_obj._has_field_changed(field, obj_dict, recursive):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      }

      /* "c_data_model_v2.pyx":481
 *                 continue
 * 
 *         if only_changed:             # <<<<<<<<<<<<<<
 *             if not dm_obj._has_field_changed(field, obj_dict, recursive):
 *                 continue
 */
    }

    /* "c_data_model_v2.pyx":485
 *                 continue
 * 
 *         encoder = field.dict_encoder             # <<<<<<<<<<<<<<
 *         kencoder = field.dict_key_encoder
 * 
 */
    __pyx_t_4 = __pyx_v_field->dict_encoder;
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_encoder, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":486
 * 
 *         encoder = field.dict_encoder
 *         kencoder = field.dict_key_encoder             # <<<<<<<<<<<<<<
 * 
 *         if field.array:
 */
    __pyx_t_4 = __pyx_v_field->dict_key_encoder;
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_kencoder, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":488
 *         kencoder = field.dict_key_encoder
 * 
 *         if field.array:             # <<<<<<<<<<<<<<
 *             dict_data[field.name] = [
 *                 _field_value_to_dict(
 */
    __pyx_t_5 = (__pyx_v_field->array != 0);
    if (__pyx_t_5) {

      /* "c_data_model_v2.pyx":489
 * 
 *         if field.array:
 *             dict_data[field.name] = [             # <<<<<<<<<<<<<<
 *                 _field_value_to_dict(
 *                     encoder, field, v,
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 489, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);

      /* "c_data_model_v2.pyx":497
 *                     field_filter=field_filter,
 *                     with_skip_from_pack=False)
 *                 for v in value             # <<<<<<<<<<<<<<
 *             ]
 *             have_data = True
 */
      if (likely(PyList_CheckExact(__pyx_v_value)) || PyTuple_CheckExact(__pyx_v_value)) {
        __pyx_t_6 = __pyx_v_value; __Pyx_INCREF(__pyx_t_6); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_value); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 497, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 497, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_8)) {
          if (likely(PyList_CheckExact(__pyx_t_6))) {
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_9 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 497, __pyx_L1_error)
            #else
            __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 497, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            #endif
          } else {
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 497, __pyx_L1_error)
            #else
            __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 497, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            #endif
          }
        } else {
          __pyx_t_9 = __pyx_t_8(__pyx_t_6);
          if (unlikely(!__pyx_t_9)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 497, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_9);
        }
        __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "c_data_model_v2.pyx":490
 *         if field.array:
 *             dict_data[field.name] = [
 *                 _field_value_to_dict(             # <<<<<<<<<<<<<<
 *                     encoder, field, v,
 *                     recursive=recursive,
 */
        __pyx_t_10.__pyx_n = 1;
        __pyx_t_10.with_skip_from_pack = 0;
        __pyx_t_9 = __pyx_f_15c_data_model_v2__field_value_to_dict(__pyx_v_encoder, __pyx_v_field, __pyx_v_v, __pyx_v_recursive, __pyx_v_only_changed, __pyx_v_clear_changed, __pyx_v_field_filter, &__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 490, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 489, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "c_data_model_v2.pyx":497
 *                     field_filter=field_filter,
 *                     with_skip_from_pack=False)
 *                 for v in value             # <<<<<<<<<<<<<<
 *             ]
 *             have_data = True
 */
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "c_data_model_v2.pyx":489
 * 
 *         if field.array:
 *             dict_data[field.name] = [             # <<<<<<<<<<<<<<
 *                 _field_value_to_dict(
 *                     encoder, field, v,
 */
      if (unlikely(__pyx_v_dict_data == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 489, __pyx_L1_error)
      }
      if (unlikely(PyDict_SetItem(__pyx_v_dict_data, __pyx_v_field->name, __pyx_t_4) < 0)) __PYX_ERR(0, 489, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "c_data_model_v2.pyx":499
 *                 for v in value
 *             ]
 *             have_data = True             # <<<<<<<<<<<<<<
 *             if clear_changed:
 *                 _container_clear_changed(field, value, recursive=False)
 */
      __pyx_v_have_data = 1;

      /* "c_data_model_v2.pyx":500
 *             ]
 *             have_data = True
 *             if clear_changed:             # <<<<<<<<<<<<<<
 *                 _container_clear_changed(field, value, recursive=False)
 *         elif field.map:
 */
      __pyx_t_5 = (__pyx_v_clear_changed != 0);
      if (__pyx_t_5) {

        /* "c_data_model_v2.pyx":501
 *             have_data = True
 *             if clear_changed:
 *                 _container_clear_changed(field, value, recursive=False)             # <<<<<<<<<<<<<<
 *         elif field.map:
 *             d = dict_data[field.name] = {}
 */
        __pyx_f_15c_data_model_v2__container_clear_changed(__pyx_v_field, __pyx_v_value, 0);

        /* "c_data_model_v2.pyx":500
 *             ]
 *             have_data = True
 *             if clear_changed:             # <<<<<<<<<<<<<<
 *                 _container_clear_changed(field, value, recursive=False)
 *         elif field.map:
 */
      }

      /* "c_data_model_v2.pyx":488
 *         kencoder = field.dict_key_encoder
 * 
 *         if field.array:             # <<<<<<<<<<<<<<
 *             dict_data[field.name] = [
 *                 _field_value_to_dict(
 */
      goto __pyx_L9;
    }

    /* "c_data_model_v2.pyx":502
 *             if clear_changed:
 *                 _container_clear_changed(field, value, recursive=False)
 *         elif field.map:             # <<<<<<<<<<<<<<
 *             d = dict_data[field.name] = {}
 *             for k, v in value.iteritems():
 */
    __pyx_t_5 = (__pyx_v_field->map != 0);
    if (__pyx_t_5) {

      /* "c_data_model_v2.pyx":503
 *                 _container_clear_changed(field, value, recursive=False)
 *         elif field.map:
 *             d = dict_data[field.name] = {}             # <<<<<<<<<<<<<<
 *             for k, v in value.iteritems():
 *                 key = kencoder(k)
 */
      __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 503, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_d, __pyx_t_4);
      if (unlikely(__pyx_v_dict_data == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 503, __pyx_L1_error)
      }
      if (unlikely(PyDict_SetItem(__pyx_v_dict_data, __pyx_v_field->name, __pyx_t_4) < 0)) __PYX_ERR(0, 503, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "c_data_model_v2.pyx":504
 *         elif field.map:
 *             d = dict_data[field.name] = {}
 *             for k, v in value.iteritems():             # <<<<<<<<<<<<<<
 *                 key = kencoder(k)
 *                 fvalue = _field_value_to_dict(
 */
      __pyx_t_7 = 0;
      if (unlikely(__pyx_v_value == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
        __PYX_ERR(0, 504, __pyx_L1_error)
      }
      __pyx_t_6 = __Pyx_dict_iterator(__pyx_v_value, 0, __pyx_n_s_iteritems, (&__pyx_t_11), (&__pyx_t_12)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 504, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4);
      __pyx_t_4 = __pyx_t_6;
      __pyx_t_6 = 0;
      while (1) {
        __pyx_t_13 = __Pyx_dict_iter_next(__pyx_t_4, __pyx_t_11, &__pyx_t_7, &__pyx_t_6, &__pyx_t_9, NULL, __pyx_t_12);
        if (unlikely(__pyx_t_13 == 0)) break;
        if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 504, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_6);
        __pyx_t_6 = 0;
        __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "c_data_model_v2.pyx":505
 *             d = dict_data[field.name] = {}
 *             for k, v in value.iteritems():
 *                 key = kencoder(k)             # <<<<<<<<<<<<<<
 *                 fvalue = _field_value_to_dict(
 *                     encoder, field, v,
 */
        __Pyx_INCREF(__pyx_v_kencoder);
        __pyx_t_6 = __pyx_v_kencoder; __pyx_t_14 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        if (!__pyx_t_14) {
          __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_k); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 505, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_6)) {
            PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_v_k};
            __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 505, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_GOTREF(__pyx_t_9);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
            PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_v_k};
            __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 505, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_GOTREF(__pyx_t_9);
          } else
          #endif
          {
            __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 505, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_14); __pyx_t_14 = NULL;
            __Pyx_INCREF(__pyx_v_k);
            __Pyx_GIVEREF(__pyx_v_k);
            PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_v_k);
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_15, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 505, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "c_data_model_v2.pyx":506
 *             for k, v in value.iteritems():
 *                 key = kencoder(k)
 *                 fvalue = _field_value_to_dict(             # <<<<<<<<<<<<<<
 *                     encoder, field, v,
 *                     recursive=recursive,
 */
        __pyx_t_9 = __pyx_f_15c_data_model_v2__field_value_to_dict(__pyx_v_encoder, __pyx_v_field, __pyx_v_v, __pyx_v_recursive, __pyx_v_only_changed, __pyx_v_clear_changed, __pyx_v_field_filter, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 506, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_XDECREF_SET(__pyx_v_fvalue, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "c_data_model_v2.pyx":512
 *                     clear_changed=clear_changed,
 *                     field_filter=field_filter)
 *                 if fvalue is not SKIP_FROM_PACK:             # <<<<<<<<<<<<<<
 *                     d[key] = fvalue
 *                     have_data = True
 */
        __pyx_t_5 = (__pyx_v_fvalue != __pyx_v_15c_data_model_v2_SKIP_FROM_PACK);
        __pyx_t_2 = (__pyx_t_5 != 0);
        if (__pyx_t_2) {

          /* "c_data_model_v2.pyx":513
 *                     field_filter=field_filter)
 *                 if fvalue is not SKIP_FROM_PACK:
 *                     d[key] = fvalue             # <<<<<<<<<<<<<<
 *                     have_data = True
 *             if only_changed:
 */
          if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_v_key, __pyx_v_fvalue) < 0)) __PYX_ERR(0, 513, __pyx_L1_error)

          /* "c_data_model_v2.pyx":514
 *                 if fvalue is not SKIP_FROM_PACK:
 *                     d[key] = fvalue
 *                     have_data = True             # <<<<<<<<<<<<<<
 *             if only_changed:
 *                 for key in (<Map>value).get_removed_set():
 */
          __pyx_v_have_data = 1;

          /* "c_data_model_v2.pyx":512
 *                     clear_changed=clear_changed,
 *                     field_filter=field_filter)
 *                 if fvalue is not SKIP_FROM_PACK:             # <<<<<<<<<<<<<<
 *                     d[key] = fvalue
 *                     have_data = True
 */
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "c_data_model_v2.pyx":515
 *                     d[key] = fvalue
 *                     have_data = True
 *             if only_changed:             # <<<<<<<<<<<<<<
 *                 for key in (<Map>value).get_removed_set():
 *                     d[key] = None
 */
      __pyx_t_2 = (__pyx_v_only_changed != 0);
      if (__pyx_t_2) {

        /* "c_data_model_v2.pyx":516
 *                     have_data = True
 *             if only_changed:
 *                 for key in (<Map>value).get_removed_set():             # <<<<<<<<<<<<<<
 *                     d[key] = None
 *                     have_data = True
 */
        __pyx_t_4 = __pyx_f_15c_data_model_v2_3Map_get_removed_set(((struct __pyx_obj_15c_data_model_v2_Map *)__pyx_v_value)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 516, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_9 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 516, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 516, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        for (;;) {
          {
            __pyx_t_4 = __pyx_t_8(__pyx_t_9);
            if (unlikely(!__pyx_t_4)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 516, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_4);
          }
          __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "c_data_model_v2.pyx":517
 *             if only_changed:
 *                 for key in (<Map>value).get_removed_set():
 *                     d[key] = None             # <<<<<<<<<<<<<<
 *                     have_data = True
 *             if clear_changed:
 */
          if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_v_key, Py_None) < 0)) __PYX_ERR(0, 517, __pyx_L1_error)

          /* "c_data_model_v2.pyx":518
 *                 for key in (<Map>value).get_removed_set():
 *                     d[key] = None
 *                     have_data = True             # <<<<<<<<<<<<<<
 *             if clear_changed:
 *                 _container_clear_changed(field, value, recursive=False)
 */
          __pyx_v_have_data = 1;

          /* "c_data_model_v2.pyx":516
 *                     have_data = True
 *             if only_changed:
 *                 for key in (<Map>value).get_removed_set():             # <<<<<<<<<<<<<<
 *                     d[key] = None
 *                     have_data = True
 */
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "c_data_model_v2.pyx":515
 *                     d[key] = fvalue
 *                     have_data = True
 *             if only_changed:             # <<<<<<<<<<<<<<
 *                 for key in (<Map>value).get_removed_set():
 *                     d[key] = None
 */
      }

      /* "c_data_model_v2.pyx":519
 *                     d[key] = None
 *                     have_data = True
 *             if clear_changed:             # <<<<<<<<<<<<<<
 *                 _container_clear_changed(field, value, recursive=False)
 *         elif field.id_map:
 */
      __pyx_t_2 = (__pyx_v_clear_changed != 0);
      if (__pyx_t_2) {

        /* "c_data_model_v2.pyx":520
 *                     have_data = True
 *             if clear_changed:
 *                 _container_clear_changed(field, value, recursive=False)             # <<<<<<<<<<<<<<
 *         elif field.id_map:
 *             d = dict_data[field.name] = {}
 */
        __pyx_f_15c_data_model_v2__container_clear_changed(__pyx_v_field, __pyx_v_value, 0);

        /* "c_data_model_v2.pyx":519
 *                     d[key] = None
 *                     have_data = True
 *             if clear_changed:             # <<<<<<<<<<<<<<
 *                 _container_clear_changed(field, value, recursive=False)
 *         elif field.id_map:
 */
      }

      /* "c_data_model_v2.pyx":502
 *             if clear_changed:
 *                 _container_clear_changed(field, value, recursive=False)
 *         elif field.map:             # <<<<<<<<<<<<<<
 *             d = dict_data[field.name] = {}
 *             for k, v in value.iteritems():
 */
      goto __pyx_L9;
    }

    /* "c_data_model_v2.pyx":521
 *             if clear_changed:
 *                 _container_clear_changed(field, value, recursive=False)
 *         elif field.id_map:             # <<<<<<<<<<<<<<
 *             d = dict_data[field.name] = {}
 *             i_field_filter = FieldFilter(field_filter, _exclude_oid_field)
 */
    __pyx_t_2 = (__pyx_v_field->id_map != 0);
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":522
 *                 _container_clear_changed(field, value, recursive=False)
 *         elif field.id_map:
 *             d = dict_data[field.name] = {}             # <<<<<<<<<<<<<<
 *             i_field_filter = FieldFilter(field_filter, _exclude_oid_field)
 *             for _, v in value.iteritems():
 */
      __pyx_t_9 = PyDict_New(); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 522, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_XDECREF_SET(__pyx_v_d, __pyx_t_9);
      if (unlikely(__pyx_v_dict_data == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 522, __pyx_L1_error)
      }
      if (unlikely(PyDict_SetItem(__pyx_v_dict_data, __pyx_v_field->name, __pyx_t_9) < 0)) __PYX_ERR(0, 522, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "c_data_model_v2.pyx":523
 *         elif field.id_map:
 *             d = dict_data[field.name] = {}
 *             i_field_filter = FieldFilter(field_filter, _exclude_oid_field)             # <<<<<<<<<<<<<<
 *             for _, v in value.iteritems():
 *                 key = kencoder(v.oid)
 */
      __pyx_t_9 = __Pyx_CFunc_bint____Field___to_py(__pyx_f_15c_data_model_v2__exclude_oid_field); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(((PyObject *)__pyx_v_field_filter));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_field_filter));
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_field_filter));
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_15c_data_model_v2_FieldFilter), __pyx_t_4, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_i_field_filter, ((struct __pyx_obj_15c_data_model_v2_FieldFilter *)__pyx_t_9));
      __pyx_t_9 = 0;

      /* "c_data_model_v2.pyx":524
 *             d = dict_data[field.name] = {}
 *             i_field_filter = FieldFilter(field_filter, _exclude_oid_field)
 *             for _, v in value.iteritems():             # <<<<<<<<<<<<<<
 *                 key = kencoder(v.oid)
 *                 fvalue = _field_value_to_dict(
 */
      __pyx_t_11 = 0;
      if (unlikely(__pyx_v_value == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
        __PYX_ERR(0, 524, __pyx_L1_error)
      }
      __pyx_t_4 = __Pyx_dict_iterator(__pyx_v_value, 0, __pyx_n_s_iteritems, (&__pyx_t_7), (&__pyx_t_12)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 524, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_9);
      __pyx_t_9 = __pyx_t_4;
      __pyx_t_4 = 0;
      while (1) {
        __pyx_t_13 = __Pyx_dict_iter_next(__pyx_t_9, __pyx_t_7, &__pyx_t_11, &__pyx_t_4, &__pyx_t_6, NULL, __pyx_t_12);
        if (unlikely(__pyx_t_13 == 0)) break;
        if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 524, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "c_data_model_v2.pyx":525
 *             i_field_filter = FieldFilter(field_filter, _exclude_oid_field)
 *             for _, v in value.iteritems():
 *                 key = kencoder(v.oid)             # <<<<<<<<<<<<<<
 *                 fvalue = _field_value_to_dict(
 *                     encoder, field, v,
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_v, __pyx_n_s_oid); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 525, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_v_kencoder);
        __pyx_t_15 = __pyx_v_kencoder; __pyx_t_14 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_15);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_15, function);
          }
        }
        if (!__pyx_t_14) {
          __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 525, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_6);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_15)) {
            PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_4};
            __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_15, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 525, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_15)) {
            PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_4};
            __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_15, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 525, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          } else
          #endif
          {
            __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 525, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_14); __pyx_t_14 = NULL;
            __Pyx_GIVEREF(__pyx_t_4);
            PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_t_4);
            __pyx_t_4 = 0;
            __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_16, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 525, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "c_data_model_v2.pyx":526
 *             for _, v in value.iteritems():
 *                 key = kencoder(v.oid)
 *                 fvalue = _field_value_to_dict(             # <<<<<<<<<<<<<<
 *                     encoder, field, v,
 *                     recursive=recursive,
 */
        __pyx_t_6 = __pyx_f_15c_data_model_v2__field_value_to_dict(__pyx_v_encoder, __pyx_v_field, __pyx_v_v, __pyx_v_recursive, __pyx_v_only_changed, __pyx_v_clear_changed, __pyx_v_i_field_filter, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 526, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_XDECREF_SET(__pyx_v_fvalue, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "c_data_model_v2.pyx":532
 *                     clear_changed=clear_changed,
 *                     field_filter=i_field_filter)
 *                 if fvalue is not SKIP_FROM_PACK:             # <<<<<<<<<<<<<<
 *                     d[key] = fvalue
 *                     have_data = True
 */
        __pyx_t_2 = (__pyx_v_fvalue != __pyx_v_15c_data_model_v2_SKIP_FROM_PACK);
        __pyx_t_5 = (__pyx_t_2 != 0);
        if (__pyx_t_5) {

          /* "c_data_model_v2.pyx":533
 *                     field_filter=i_field_filter)
 *                 if fvalue is not SKIP_FROM_PACK:
 *                     d[key] = fvalue             # <<<<<<<<<<<<<<
 *                     have_data = True
 *             if only_changed:
 */
          if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_v_key, __pyx_v_fvalue) < 0)) __PYX_ERR(0, 533, __pyx_L1_error)

          /* "c_data_model_v2.pyx":534
 *                 if fvalue is not SKIP_FROM_PACK:
 *                     d[key] = fvalue
 *                     have_data = True             # <<<<<<<<<<<<<<
 *             if only_changed:
 *                 for key in (<Map>value).get_removed_set():
 */
          __pyx_v_have_data = 1;

          /* "c_data_model_v2.pyx":532
 *                     clear_changed=clear_changed,
 *                     field_filter=i_field_filter)
 *                 if fvalue is not SKIP_FROM_PACK:             # <<<<<<<<<<<<<<
 *                     d[key] = fvalue
 *                     have_data = True
 */
        }
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "c_data_model_v2.pyx":535
 *                     d[key] = fvalue
 *                     have_data = True
 *             if only_changed:             # <<<<<<<<<<<<<<
 *                 for key in (<Map>value).get_removed_set():
 *                     d[key] = None
 */
      __pyx_t_5 = (__pyx_v_only_changed != 0);
      if (__pyx_t_5) {

        /* "c_data_model_v2.pyx":536
 *                     have_data = True
 *             if only_changed:
 *                 for key in (<Map>value).get_removed_set():             # <<<<<<<<<<<<<<
 *                     d[key] = None
 *                     have_data = True
 */
        __pyx_t_9 = __pyx_f_15c_data_model_v2_3Map_get_removed_set(((struct __pyx_obj_15c_data_model_v2_Map *)__pyx_v_value)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 536, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_6 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 536, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 536, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        for (;;) {
          {
            __pyx_t_9 = __pyx_t_8(__pyx_t_6);
            if (unlikely(!__pyx_t_9)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 536, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_9);
          }
          __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_9);
          __pyx_t_9 = 0;

          /* "c_data_model_v2.pyx":537
 *             if only_changed:
 *                 for key in (<Map>value).get_removed_set():
 *                     d[key] = None             # <<<<<<<<<<<<<<
 *                     have_data = True
 *             if clear_changed:
 */
          if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_v_key, Py_None) < 0)) __PYX_ERR(0, 537, __pyx_L1_error)

          /* "c_data_model_v2.pyx":538
 *                 for key in (<Map>value).get_removed_set():
 *                     d[key] = None
 *                     have_data = True             # <<<<<<<<<<<<<<
 *             if clear_changed:
 *                 _container_clear_changed(field, value, recursive=False)
 */
          __pyx_v_have_data = 1;

          /* "c_data_model_v2.pyx":536
 *                     have_data = True
 *             if only_changed:
 *                 for key in (<Map>value).get_removed_set():             # <<<<<<<<<<<<<<
 *                     d[key] = None
 *                     have_data = True
 */
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "c_data_model_v2.pyx":535
 *                     d[key] = fvalue
 *                     have_data = True
 *             if only_changed:             # <<<<<<<<<<<<<<
 *                 for key in (<Map>value).get_removed_set():
 *                     d[key] = None
 */
      }

      /* "c_data_model_v2.pyx":539
 *                     d[key] = None
 *                     have_data = True
 *             if clear_changed:             # <<<<<<<<<<<<<<
 *                 _container_clear_changed(field, value, recursive=False)
 *         else:
 */
      __pyx_t_5 = (__pyx_v_clear_changed != 0);
      if (__pyx_t_5) {

        /* "c_data_model_v2.pyx":540
 *                     have_data = True
 *             if clear_changed:
 *                 _container_clear_changed(field, value, recursive=False)             # <<<<<<<<<<<<<<
 *         else:
 *             fvalue = _field_value_to_dict(
 */
        __pyx_f_15c_data_model_v2__container_clear_changed(__pyx_v_field, __pyx_v_value, 0);

        /* "c_data_model_v2.pyx":539
 *                     d[key] = None
 *                     have_data = True
 *             if clear_changed:             # <<<<<<<<<<<<<<
 *                 _container_clear_changed(field, value, recursive=False)
 *         else:
 */
      }

      /* "c_data_model_v2.pyx":521
 *             if clear_changed:
 *                 _container_clear_changed(field, value, recursive=False)
 *         elif field.id_map:             # <<<<<<<<<<<<<<
 *             d = dict_data[field.name] = {}
 *             i_field_filter = FieldFilter(field_filter, _exclude_oid_field)
 */
      goto __pyx_L9;
    }

    /* "c_data_model_v2.pyx":542
 *                 _container_clear_changed(field, value, recursive=False)
 *         else:
 *             fvalue = _field_value_to_dict(             # <<<<<<<<<<<<<<
 *                 encoder, field, value,
 *                 recursive=recursive,
 */
    /*else*/ {

      /* "c_data_model_v2.pyx":547
 *                 only_changed=only_changed,
 *                 clear_changed=clear_changed,
 *                 field_filter=field_filter)             # <<<<<<<<<<<<<<
 *             if fvalue is not SKIP_FROM_PACK:
 *                 dict_data[field.name] = fvalue
 */
      __pyx_t_6 = __pyx_f_15c_data_model_v2__field_value_to_dict(__pyx_v_encoder, __pyx_v_field, __pyx_v_value, __pyx_v_recursive, __pyx_v_only_changed, __pyx_v_clear_changed, __pyx_v_field_filter, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 542, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_fvalue, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "c_data_model_v2.pyx":548
 *                 clear_changed=clear_changed,
 *                 field_filter=field_filter)
 *             if fvalue is not SKIP_FROM_PACK:             # <<<<<<<<<<<<<<
 *                 dict_data[field.name] = fvalue
 *                 have_data = True
 */
      __pyx_t_5 = (__pyx_v_fvalue != __pyx_v_15c_data_model_v2_SKIP_FROM_PACK);
      __pyx_t_2 = (__pyx_t_5 != 0);
      if (__pyx_t_2) {

        /* "c_data_model_v2.pyx":549
 *                 field_filter=field_filter)
 *             if fvalue is not SKIP_FROM_PACK:
 *                 dict_data[field.name] = fvalue             # <<<<<<<<<<<<<<
 *                 have_data = True
 * 
 */
        if (unlikely(__pyx_v_dict_data == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 549, __pyx_L1_error)
        }
        if (unlikely(PyDict_SetItem(__pyx_v_dict_data, __pyx_v_field->name, __pyx_v_fvalue) < 0)) __PYX_ERR(0, 549, __pyx_L1_error)

        /* "c_data_model_v2.pyx":550
 *             if fvalue is not SKIP_FROM_PACK:
 *                 dict_data[field.name] = fvalue
 *                 have_data = True             # <<<<<<<<<<<<<<
 * 
 *     if clear_changed:
 */
        __pyx_v_have_data = 1;

        /* "c_data_model_v2.pyx":548
 *                 clear_changed=clear_changed,
 *                 field_filter=field_filter)
 *             if fvalue is not SKIP_FROM_PACK:             # <<<<<<<<<<<<<<
 *                 dict_data[field.name] = fvalue
 *                 have_data = True
 */
      }
    }
    __pyx_L9:;

    /* "c_data_model_v2.pyx":473
 *     cdef FieldFilter i_field_filter
 * 
 *     for field in protocol.fields_define.fields:             # <<<<<<<<<<<<<<
 *         value = obj_dict.get(field.key)
 *         if value is None:
 */
    __pyx_L3_continue:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":552
 *                 have_data = True
 * 
 *     if clear_changed:             # <<<<<<<<<<<<<<
 *         (<DataModel>obj)._clear_changed(None, recursive=False)
 * 
 */
  __pyx_t_2 = (__pyx_v_clear_changed != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":553
 * 
 *     if clear_changed:
 *         (<DataModel>obj)._clear_changed(None, recursive=False)             # <<<<<<<<<<<<<<
 * 
 *     return have_data
 */
    ((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_v_obj)->__pyx_vtab)->_clear_changed(((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_v_obj), Py_None, 0);

    /* "c_data_model_v2.pyx":552
 *                 have_data = True
 * 
 *     if clear_changed:             # <<<<<<<<<<<<<<
 *         (<DataModel>obj)._clear_changed(None, recursive=False)
 * 
 */
  }

  /* "c_data_model_v2.pyx":555
 *         (<DataModel>obj)._clear_changed(None, recursive=False)
 * 
 *     return have_data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_have_data;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":458
 * 
 * 
 * cdef bint _encode_to_dict(dict dict_data, DataModelProtocol protocol, object obj,             # <<<<<<<<<<<<<<
 *                           bint recursive, bint only_changed, bint clear_changed,
 *                           FieldFilter field_filter):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_WriteUnraisable("c_data_model_v2._encode_to_dict", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj_dict);
  __Pyx_XDECREF((PyObject *)__pyx_v_field);
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_fvalue);
  __Pyx_XDECREF((PyObject *)__pyx_v_dm_obj);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF((PyObject *)__pyx_v_i_field_filter);
  __Pyx_XDECREF(__pyx_v_encoder);
  __Pyx_XDECREF(__pyx_v_kencoder);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":558
 * 
 * 
 * cdef inline object _field_value_from_dict(Field field, object decoder,             # <<<<<<<<<<<<<<
 *                                           object src_dict_value, object old_value,
 *                                           DecodeContext context):
 */

static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2__field_value_from_dict(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field, PyObject *__pyx_v_decoder, PyObject *__pyx_v_src_dict_value, PyObject *__pyx_v_old_value, struct __pyx_obj_15c_data_model_v2_DecodeContext *__pyx_v_context) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_field_value_from_dict", 0);

  /* "c_data_model_v2.pyx":561
 *                                           object src_dict_value, object old_value,
 *                                           DecodeContext context):
 *     if decoder:             # <<<<<<<<<<<<<<
 *         return decoder(src_dict_value)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_decoder); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 561, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":562
 *                                           DecodeContext context):
 *     if decoder:
 *         return decoder(src_dict_value)             # <<<<<<<<<<<<<<
 *     else:
 *         return _field_object_from_dict(field, None, src_dict_value, old_value, context)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_decoder);
    __pyx_t_3 = __pyx_v_decoder; __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_src_dict_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 562, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_src_dict_value};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 562, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_src_dict_value};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 562, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 562, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_src_dict_value);
        __Pyx_GIVEREF(__pyx_v_src_dict_value);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_src_dict_value);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 562, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":561
 *                                           object src_dict_value, object old_value,
 *                                           DecodeContext context):
 *     if decoder:             # <<<<<<<<<<<<<<
 *         return decoder(src_dict_value)
 *     else:
 */
  }

  /* "c_data_model_v2.pyx":564
 *         return decoder(src_dict_value)
 *     else:
 *         return _field_object_from_dict(field, None, src_dict_value, old_value, context)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_15c_data_model_v2__field_object_from_dict(__pyx_v_field, Py_None, __pyx_v_src_dict_value, __pyx_v_old_value, __pyx_v_context); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "c_data_model_v2.pyx":558
 * 
 * 
 * cdef inline object _field_value_from_dict(Field field, object decoder,             # <<<<<<<<<<<<<<
 *                                           object src_dict_value, object old_value,
 *                                           DecodeContext context):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("c_data_model_v2._field_value_from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":567
 * 
 * 
 * cdef _field_object_from_dict(Field field, object oid, object src_dict_value,             # <<<<<<<<<<<<<<
 *                              object old_value, DecodeContext context):
 *     cdef dict obj_dict
 */

static PyObject *__pyx_f_15c_data_model_v2__field_object_from_dict(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field, PyObject *__pyx_v_oid, PyObject *__pyx_v_src_dict_value, PyObject *__pyx_v_old_value, struct __pyx_obj_15c_data_model_v2_DecodeContext *__pyx_v_context) {
  PyObject *__pyx_v_obj_dict = 0;
  PyObject *__pyx_v_fobj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("_field_object_from_dict", 0);
  __Pyx_INCREF(__pyx_v_oid);

  /* "c_data_model_v2.pyx":570
 *                              object old_value, DecodeContext context):
 *     cdef dict obj_dict
 *     if field.ref:             # <<<<<<<<<<<<<<
 *         return field.dict_ref_decoder(src_dict_value)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_field->ref != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":571
 *     cdef dict obj_dict
 *     if field.ref:
 *         return field.dict_ref_decoder(src_dict_value)             # <<<<<<<<<<<<<<
 *     else:
 *         if old_value is not None:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_field->dict_ref_decoder);
    __pyx_t_3 = __pyx_v_field->dict_ref_decoder; __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_src_dict_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 571, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_src_dict_value};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 571, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_src_dict_value};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 571, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 571, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_src_dict_value);
        __Pyx_GIVEREF(__pyx_v_src_dict_value);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_src_dict_value);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 571, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":570
 *                              object old_value, DecodeContext context):
 *     cdef dict obj_dict
 *     if field.ref:             # <<<<<<<<<<<<<<
 *         return field.dict_ref_decoder(src_dict_value)
 *     else:
 */
  }

  /* "c_data_model_v2.pyx":573
 *         return field.dict_ref_decoder(src_dict_value)
 *     else:
 *         if old_value is not None:             # <<<<<<<<<<<<<<
 *             fobj = old_value
 *             obj_dict = fobj.__dict__
 */
  /*else*/ {
    __pyx_t_1 = (__pyx_v_old_value != Py_None);
    __pyx_t_6 = (__pyx_t_1 != 0);
    if (__pyx_t_6) {

      /* "c_data_model_v2.pyx":574
 *     else:
 *         if old_value is not None:
 *             fobj = old_value             # <<<<<<<<<<<<<<
 *             obj_dict = fobj.__dict__
 *         else:
 */
      __Pyx_INCREF(__pyx_v_old_value);
      __pyx_v_fobj = __pyx_v_old_value;

      /* "c_data_model_v2.pyx":575
 *         if old_value is not None:
 *             fobj = old_value
 *             obj_dict = fobj.__dict__             # <<<<<<<<<<<<<<
 *         else:
 *             fobj = None
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_fobj, __pyx_n_s_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 575, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 575, __pyx_L1_error)
      __pyx_v_obj_dict = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "c_data_model_v2.pyx":573
 *         return field.dict_ref_decoder(src_dict_value)
 *     else:
 *         if old_value is not None:             # <<<<<<<<<<<<<<
 *             fobj = old_value
 *             obj_dict = fobj.__dict__
 */
      goto __pyx_L4;
    }

    /* "c_data_model_v2.pyx":577
 *             obj_dict = fobj.__dict__
 *         else:
 *             fobj = None             # <<<<<<<<<<<<<<
 *             obj_dict = {}
 *         _decode_from_dict(field.data_model_protocol,
 */
    /*else*/ {
      __Pyx_INCREF(Py_None);
      __pyx_v_fobj = Py_None;

      /* "c_data_model_v2.pyx":578
 *         else:
 *             fobj = None
 *             obj_dict = {}             # <<<<<<<<<<<<<<
 *         _decode_from_dict(field.data_model_protocol,
 *                           fobj,
 */
      __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 578, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_obj_dict = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;
    }
    __pyx_L4:;

    /* "c_data_model_v2.pyx":579
 *             fobj = None
 *             obj_dict = {}
 *         _decode_from_dict(field.data_model_protocol,             # <<<<<<<<<<<<<<
 *                           fobj,
 *                           obj_dict,
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_field->data_model_protocol);
    __Pyx_INCREF(__pyx_t_2);

    /* "c_data_model_v2.pyx":582
 *                           fobj,
 *                           obj_dict,
 *                           src_dict_value,             # <<<<<<<<<<<<<<
 *                           context)
 *         if fobj is None:
 */
    if (!(likely(PyDict_CheckExact(__pyx_v_src_dict_value))||((__pyx_v_src_dict_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_src_dict_value)->tp_name), 0))) __PYX_ERR(0, 582, __pyx_L1_error)

    /* "c_data_model_v2.pyx":579
 *             fobj = None
 *             obj_dict = {}
 *         _decode_from_dict(field.data_model_protocol,             # <<<<<<<<<<<<<<
 *                           fobj,
 *                           obj_dict,
 */
    __pyx_f_15c_data_model_v2__decode_from_dict(((struct __pyx_obj_15c_data_model_v2_DataModelProtocol *)__pyx_t_2), __pyx_v_fobj, __pyx_v_obj_dict, ((PyObject*)__pyx_v_src_dict_value), __pyx_v_context);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "c_data_model_v2.pyx":584
 *                           src_dict_value,
 *                           context)
 *         if fobj is None:             # <<<<<<<<<<<<<<
 *             fobj = _create_object(field, obj_dict)
 *             _replace_obj_dict(fobj, obj_dict)
 */
    __pyx_t_6 = (__pyx_v_fobj == Py_None);
    __pyx_t_1 = (__pyx_t_6 != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":585
 *                           context)
 *         if fobj is None:
 *             fobj = _create_object(field, obj_dict)             # <<<<<<<<<<<<<<
 *             _replace_obj_dict(fobj, obj_dict)
 * 
 */
      __pyx_t_2 = __pyx_f_15c_data_model_v2__create_object(__pyx_v_field, __pyx_v_obj_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 585, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_fobj, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "c_data_model_v2.pyx":586
 *         if fobj is None:
 *             fobj = _create_object(field, obj_dict)
 *             _replace_obj_dict(fobj, obj_dict)             # <<<<<<<<<<<<<<
 * 
 *         if oid is not None:
 */
      __pyx_f_15c_data_model_v2__replace_obj_dict(__pyx_v_fobj, __pyx_v_obj_dict);

      /* "c_data_model_v2.pyx":584
 *                           src_dict_value,
 *                           context)
 *         if fobj is None:             # <<<<<<<<<<<<<<
 *             fobj = _create_object(field, obj_dict)
 *             _replace_obj_dict(fobj, obj_dict)
 */
    }

    /* "c_data_model_v2.pyx":588
 *             _replace_obj_dict(fobj, obj_dict)
 * 
 *         if oid is not None:             # <<<<<<<<<<<<<<
 *             fobj.__dict__['_oid'] = oid
 *         else:
 */
    __pyx_t_1 = (__pyx_v_oid != Py_None);
    __pyx_t_6 = (__pyx_t_1 != 0);
    if (__pyx_t_6) {

      /* "c_data_model_v2.pyx":589
 * 
 *         if oid is not None:
 *             fobj.__dict__['_oid'] = oid             # <<<<<<<<<<<<<<
 *         else:
 *             oid = obj_dict.get('_oid')
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_fobj, __pyx_n_s_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 589, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(PyObject_SetItem(__pyx_t_2, __pyx_n_s_oid_2, __pyx_v_oid) < 0)) __PYX_ERR(0, 589, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "c_data_model_v2.pyx":588
 *             _replace_obj_dict(fobj, obj_dict)
 * 
 *         if oid is not None:             # <<<<<<<<<<<<<<
 *             fobj.__dict__['_oid'] = oid
 *         else:
 */
      goto __pyx_L6;
    }

    /* "c_data_model_v2.pyx":591
 *             fobj.__dict__['_oid'] = oid
 *         else:
 *             oid = obj_dict.get('_oid')             # <<<<<<<<<<<<<<
 *         context.add_known_object(oid, fobj)
 *         return fobj
 */
    /*else*/ {
      if (unlikely(__pyx_v_obj_dict == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
        __PYX_ERR(0, 591, __pyx_L1_error)
      }
      __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_obj_dict, __pyx_n_s_oid_2, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_oid, __pyx_t_2);
      __pyx_t_2 = 0;
    }
    __pyx_L6:;

    /* "c_data_model_v2.pyx":592
 *         else:
 *             oid = obj_dict.get('_oid')
 *         context.add_known_object(oid, fobj)             # <<<<<<<<<<<<<<
 *         return fobj
 * 
 */
    ((struct __pyx_vtabstruct_15c_data_model_v2_DecodeContext *)__pyx_v_context->__pyx_vtab)->add_known_object(__pyx_v_context, __pyx_v_oid, __pyx_v_fobj);

    /* "c_data_model_v2.pyx":593
 *             oid = obj_dict.get('_oid')
 *         context.add_known_object(oid, fobj)
 *         return fobj             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_fobj);
    __pyx_r = __pyx_v_fobj;
    goto __pyx_L0;
  }

  /* "c_data_model_v2.pyx":567
 * 
 * 
 * cdef _field_object_from_dict(Field field, object oid, object src_dict_value,             # <<<<<<<<<<<<<<
 *                              object old_value, DecodeContext context):
 *     cdef dict obj_dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("c_data_model_v2._field_object_from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj_dict);
  __Pyx_XDECREF(__pyx_v_fobj);
  __Pyx_XDECREF(__pyx_v_oid);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":596
 * 
 * 
 * cdef void _decode_array_from_dict(Field field, dict obj_dict,             # <<<<<<<<<<<<<<
 *                                   object dvalue, DecodeContext context):
 *     cdef Array arr
 */

static void __pyx_f_15c_data_model_v2__decode_array_from_dict(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field, PyObject *__pyx_v_obj_dict, PyObject *__pyx_v_dvalue, struct __pyx_obj_15c_data_model_v2_DecodeContext *__pyx_v_context) {
  struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_arr = 0;
  PyObject *__pyx_v_dv = 0;
  PyObject *__pyx_v_decoder = 0;
  PyObject *__pyx_v_value = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("_decode_array_from_dict", 0);

  /* "c_data_model_v2.pyx":600
 *     cdef Array arr
 *     cdef object dv
 *     cdef object decoder = field.dict_decoder             # <<<<<<<<<<<<<<
 *     arr = obj_dict[field.key] = _new_array(field)
 *     for dv in dvalue:
 */
  __pyx_t_1 = __pyx_v_field->dict_decoder;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_decoder = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":601
 *     cdef object dv
 *     cdef object decoder = field.dict_decoder
 *     arr = obj_dict[field.key] = _new_array(field)             # <<<<<<<<<<<<<<
 *     for dv in dvalue:
 *         if not context.sync_mode:
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_15c_data_model_v2__new_array(__pyx_v_field)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_arr = ((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_t_1);
  if (unlikely(__pyx_v_obj_dict == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 601, __pyx_L1_error)
  }
  if (unlikely(PyDict_SetItem(__pyx_v_obj_dict, __pyx_v_field->key, __pyx_t_1) < 0)) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":602
 *     cdef object decoder = field.dict_decoder
 *     arr = obj_dict[field.key] = _new_array(field)
 *     for dv in dvalue:             # <<<<<<<<<<<<<<
 *         if not context.sync_mode:
 *             if dv is None: # None
 */
  if (likely(PyList_CheckExact(__pyx_v_dvalue)) || PyTuple_CheckExact(__pyx_v_dvalue)) {
    __pyx_t_1 = __pyx_v_dvalue; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_dvalue); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 602, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 602, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 602, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 602, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 602, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 602, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 602, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_dv, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":603
 *     arr = obj_dict[field.key] = _new_array(field)
 *     for dv in dvalue:
 *         if not context.sync_mode:             # <<<<<<<<<<<<<<
 *             if dv is None: # None
 *                 continue
 */
    __pyx_t_5 = ((!(__pyx_v_context->sync_mode != 0)) != 0);
    if (__pyx_t_5) {

      /* "c_data_model_v2.pyx":604
 *     for dv in dvalue:
 *         if not context.sync_mode:
 *             if dv is None: # None             # <<<<<<<<<<<<<<
 *                 continue
 *         value = _field_value_from_dict(field, decoder, dv, None, context)
 */
      __pyx_t_5 = (__pyx_v_dv == Py_None);
      __pyx_t_6 = (__pyx_t_5 != 0);
      if (__pyx_t_6) {

        /* "c_data_model_v2.pyx":605
 *         if not context.sync_mode:
 *             if dv is None: # None
 *                 continue             # <<<<<<<<<<<<<<
 *         value = _field_value_from_dict(field, decoder, dv, None, context)
 *         arr._append(value)
 */
        goto __pyx_L3_continue;

        /* "c_data_model_v2.pyx":604
 *     for dv in dvalue:
 *         if not context.sync_mode:
 *             if dv is None: # None             # <<<<<<<<<<<<<<
 *                 continue
 *         value = _field_value_from_dict(field, decoder, dv, None, context)
 */
      }

      /* "c_data_model_v2.pyx":603
 *     arr = obj_dict[field.key] = _new_array(field)
 *     for dv in dvalue:
 *         if not context.sync_mode:             # <<<<<<<<<<<<<<
 *             if dv is None: # None
 *                 continue
 */
    }

    /* "c_data_model_v2.pyx":606
 *             if dv is None: # None
 *                 continue
 *         value = _field_value_from_dict(field, decoder, dv, None, context)             # <<<<<<<<<<<<<<
 *         arr._append(value)
 *         if field.ref:
 */
    __pyx_t_4 = __pyx_f_15c_data_model_v2__field_value_from_dict(__pyx_v_field, __pyx_v_decoder, __pyx_v_dv, Py_None, __pyx_v_context); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":607
 *                 continue
 *         value = _field_value_from_dict(field, decoder, dv, None, context)
 *         arr._append(value)             # <<<<<<<<<<<<<<
 *         if field.ref:
 *             context.add_unsolved_ref(('array', arr, len(arr) - 1, value))
 */
    ((struct __pyx_vtabstruct_15c_data_model_v2_Array *)__pyx_v_arr->__pyx_vtab)->_append(__pyx_v_arr, __pyx_v_value, 0);

    /* "c_data_model_v2.pyx":608
 *         value = _field_value_from_dict(field, decoder, dv, None, context)
 *         arr._append(value)
 *         if field.ref:             # <<<<<<<<<<<<<<
 *             context.add_unsolved_ref(('array', arr, len(arr) - 1, value))
 * 
 */
    __pyx_t_6 = (__pyx_v_field->ref != 0);
    if (__pyx_t_6) {

      /* "c_data_model_v2.pyx":609
 *         arr._append(value)
 *         if field.ref:
 *             context.add_unsolved_ref(('array', arr, len(arr) - 1, value))             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_7 = PyObject_Length(((PyObject *)__pyx_v_arr)); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 609, __pyx_L1_error)
      __pyx_t_4 = PyInt_FromSsize_t((__pyx_t_7 - 1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 609, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 609, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_n_s_array);
      __Pyx_GIVEREF(__pyx_n_s_array);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_array);
      __Pyx_INCREF(((PyObject *)__pyx_v_arr));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_arr));
      PyTuple_SET_ITEM(__pyx_t_8, 1, ((PyObject *)__pyx_v_arr));
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_4);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_v_value);
      __pyx_t_4 = 0;
      ((struct __pyx_vtabstruct_15c_data_model_v2_DecodeContext *)__pyx_v_context->__pyx_vtab)->add_unsolved_ref(__pyx_v_context, __pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "c_data_model_v2.pyx":608
 *         value = _field_value_from_dict(field, decoder, dv, None, context)
 *         arr._append(value)
 *         if field.ref:             # <<<<<<<<<<<<<<
 *             context.add_unsolved_ref(('array', arr, len(arr) - 1, value))
 * 
 */
    }

    /* "c_data_model_v2.pyx":602
 *     cdef object decoder = field.dict_decoder
 *     arr = obj_dict[field.key] = _new_array(field)
 *     for dv in dvalue:             # <<<<<<<<<<<<<<
 *         if not context.sync_mode:
 *             if dv is None: # None
 */
    __pyx_L3_continue:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":596
 * 
 * 
 * cdef void _decode_array_from_dict(Field field, dict obj_dict,             # <<<<<<<<<<<<<<
 *                                   object dvalue, DecodeContext context):
 *     cdef Array arr
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("c_data_model_v2._decode_array_from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XDECREF(__pyx_v_dv);
  __Pyx_XDECREF(__pyx_v_decoder);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":612
 * 
 * 
 * cdef void _decode_map_from_dict(Field field, dict obj_dict,             # <<<<<<<<<<<<<<
 *                                 object dvalue, DecodeContext context):
 *     cdef Map m = None
 */

static void __pyx_f_15c_data_model_v2__decode_map_from_dict(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field, PyObject *__pyx_v_obj_dict, PyObject *__pyx_v_dvalue, struct __pyx_obj_15c_data_model_v2_DecodeContext *__pyx_v_context) {
  struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_m = 0;
  PyObject *__pyx_v_decoder = 0;
  PyObject *__pyx_v_kdecoder = 0;
  PyObject *__pyx_v_old_value = 0;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("_decode_map_from_dict", 0);

  /* "c_data_model_v2.pyx":614
 * cdef void _decode_map_from_dict(Field field, dict obj_dict,
 *                                 object dvalue, DecodeContext context):
 *     cdef Map m = None             # <<<<<<<<<<<<<<
 *     cdef object decoder = field.dict_decoder
 *     cdef object kdecoder = field.dict_key_decoder
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_m = ((struct __pyx_obj_15c_data_model_v2_Map *)Py_None);

  /* "c_data_model_v2.pyx":615
 *                                 object dvalue, DecodeContext context):
 *     cdef Map m = None
 *     cdef object decoder = field.dict_decoder             # <<<<<<<<<<<<<<
 *     cdef object kdecoder = field.dict_key_decoder
 *     cdef object old_value
 */
  __pyx_t_1 = __pyx_v_field->dict_decoder;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_decoder = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":616
 *     cdef Map m = None
 *     cdef object decoder = field.dict_decoder
 *     cdef object kdecoder = field.dict_key_decoder             # <<<<<<<<<<<<<<
 *     cdef object old_value
 * 
 */
  __pyx_t_1 = __pyx_v_field->dict_key_decoder;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_kdecoder = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":619
 *     cdef object old_value
 * 
 *     if context.sync_mode:             # <<<<<<<<<<<<<<
 *         m = obj_dict.get(field.key)
 *     if m is None:
 */
  __pyx_t_2 = (__pyx_v_context->sync_mode != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":620
 * 
 *     if context.sync_mode:
 *         m = obj_dict.get(field.key)             # <<<<<<<<<<<<<<
 *     if m is None:
 *         m = _new_map(field)
 */
    if (unlikely(__pyx_v_obj_dict == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
      __PYX_ERR(0, 620, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_obj_dict, __pyx_v_field->key, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 620, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_15c_data_model_v2_Map))))) __PYX_ERR(0, 620, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_m, ((struct __pyx_obj_15c_data_model_v2_Map *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "c_data_model_v2.pyx":619
 *     cdef object old_value
 * 
 *     if context.sync_mode:             # <<<<<<<<<<<<<<
 *         m = obj_dict.get(field.key)
 *     if m is None:
 */
  }

  /* "c_data_model_v2.pyx":621
 *     if context.sync_mode:
 *         m = obj_dict.get(field.key)
 *     if m is None:             # <<<<<<<<<<<<<<
 *         m = _new_map(field)
 *         obj_dict[field.key] = m
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_m) == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":622
 *         m = obj_dict.get(field.key)
 *     if m is None:
 *         m = _new_map(field)             # <<<<<<<<<<<<<<
 *         obj_dict[field.key] = m
 *     for k, v in dvalue.iteritems():
 */
    __pyx_t_1 = ((PyObject *)__pyx_f_15c_data_model_v2__new_map(__pyx_v_field)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_m, ((struct __pyx_obj_15c_data_model_v2_Map *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "c_data_model_v2.pyx":623
 *     if m is None:
 *         m = _new_map(field)
 *         obj_dict[field.key] = m             # <<<<<<<<<<<<<<
 *     for k, v in dvalue.iteritems():
 *         if not context.sync_mode:
 */
    if (unlikely(__pyx_v_obj_dict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 623, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_v_obj_dict, __pyx_v_field->key, ((PyObject *)__pyx_v_m)) < 0)) __PYX_ERR(0, 623, __pyx_L1_error)

    /* "c_data_model_v2.pyx":621
 *     if context.sync_mode:
 *         m = obj_dict.get(field.key)
 *     if m is None:             # <<<<<<<<<<<<<<
 *         m = _new_map(field)
 *         obj_dict[field.key] = m
 */
  }

  /* "c_data_model_v2.pyx":624
 *         m = _new_map(field)
 *         obj_dict[field.key] = m
 *     for k, v in dvalue.iteritems():             # <<<<<<<<<<<<<<
 *         if not context.sync_mode:
 *             if v is None:
 */
  __pyx_t_4 = 0;
  if (unlikely(__pyx_v_dvalue == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    __PYX_ERR(0, 624, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_dict_iterator(__pyx_v_dvalue, 0, __pyx_n_s_iteritems, (&__pyx_t_5), (&__pyx_t_6)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_7;
  __pyx_t_7 = 0;
  while (1) {
    __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_5, &__pyx_t_4, &__pyx_t_7, &__pyx_t_8, NULL, __pyx_t_6);
    if (unlikely(__pyx_t_9 == 0)) break;
    if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "c_data_model_v2.pyx":625
 *         obj_dict[field.key] = m
 *     for k, v in dvalue.iteritems():
 *         if not context.sync_mode:             # <<<<<<<<<<<<<<
 *             if v is None:
 *                 continue # None
 */
    __pyx_t_3 = ((!(__pyx_v_context->sync_mode != 0)) != 0);
    if (__pyx_t_3) {

      /* "c_data_model_v2.pyx":626
 *     for k, v in dvalue.iteritems():
 *         if not context.sync_mode:
 *             if v is None:             # <<<<<<<<<<<<<<
 *                 continue # None
 *         old_value = None
 */
      __pyx_t_3 = (__pyx_v_v == Py_None);
      __pyx_t_2 = (__pyx_t_3 != 0);
      if (__pyx_t_2) {

        /* "c_data_model_v2.pyx":627
 *         if not context.sync_mode:
 *             if v is None:
 *                 continue # None             # <<<<<<<<<<<<<<
 *         old_value = None
 *         key = kdecoder(k)
 */
        goto __pyx_L5_continue;

        /* "c_data_model_v2.pyx":626
 *     for k, v in dvalue.iteritems():
 *         if not context.sync_mode:
 *             if v is None:             # <<<<<<<<<<<<<<
 *                 continue # None
 *         old_value = None
 */
      }

      /* "c_data_model_v2.pyx":625
 *         obj_dict[field.key] = m
 *     for k, v in dvalue.iteritems():
 *         if not context.sync_mode:             # <<<<<<<<<<<<<<
 *             if v is None:
 *                 continue # None
 */
    }

    /* "c_data_model_v2.pyx":628
 *             if v is None:
 *                 continue # None
 *         old_value = None             # <<<<<<<<<<<<<<
 *         key = kdecoder(k)
 *         if context.sync_mode and v is None:
 */
    __Pyx_INCREF(Py_None);
    __Pyx_XDECREF_SET(__pyx_v_old_value, Py_None);

    /* "c_data_model_v2.pyx":629
 *                 continue # None
 *         old_value = None
 *         key = kdecoder(k)             # <<<<<<<<<<<<<<
 *         if context.sync_mode and v is None:
 *             if key in m:
 */
    __Pyx_INCREF(__pyx_v_kdecoder);
    __pyx_t_7 = __pyx_v_kdecoder; __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_10) {
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_k); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_k};
        __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 629, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_8);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_k};
        __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 629, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_8);
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 629, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
        __Pyx_INCREF(__pyx_v_k);
        __Pyx_GIVEREF(__pyx_v_k);
        PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_v_k);
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_11, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 629, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "c_data_model_v2.pyx":630
 *         old_value = None
 *         key = kdecoder(k)
 *         if context.sync_mode and v is None:             # <<<<<<<<<<<<<<
 *             if key in m:
 *                 del m[key]
 */
    __pyx_t_3 = (__pyx_v_context->sync_mode != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_3 = (__pyx_v_v == Py_None);
    __pyx_t_12 = (__pyx_t_3 != 0);
    __pyx_t_2 = __pyx_t_12;
    __pyx_L10_bool_binop_done:;
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":631
 *         key = kdecoder(k)
 *         if context.sync_mode and v is None:
 *             if key in m:             # <<<<<<<<<<<<<<
 *                 del m[key]
 *             continue
 */
      __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, ((PyObject *)__pyx_v_m), Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 631, __pyx_L1_error)
      __pyx_t_12 = (__pyx_t_2 != 0);
      if (__pyx_t_12) {

        /* "c_data_model_v2.pyx":632
 *         if context.sync_mode and v is None:
 *             if key in m:
 *                 del m[key]             # <<<<<<<<<<<<<<
 *             continue
 *         if context.sync_mode:
 */
        if (unlikely(PyObject_DelItem(((PyObject *)__pyx_v_m), __pyx_v_key) < 0)) __PYX_ERR(0, 632, __pyx_L1_error)

        /* "c_data_model_v2.pyx":631
 *         key = kdecoder(k)
 *         if context.sync_mode and v is None:
 *             if key in m:             # <<<<<<<<<<<<<<
 *                 del m[key]
 *             continue
 */
      }

      /* "c_data_model_v2.pyx":633
 *             if key in m:
 *                 del m[key]
 *             continue             # <<<<<<<<<<<<<<
 *         if context.sync_mode:
 *             old_value = m.get(key)
 */
      goto __pyx_L5_continue;

      /* "c_data_model_v2.pyx":630
 *         old_value = None
 *         key = kdecoder(k)
 *         if context.sync_mode and v is None:             # <<<<<<<<<<<<<<
 *             if key in m:
 *                 del m[key]
 */
    }

    /* "c_data_model_v2.pyx":634
 *                 del m[key]
 *             continue
 *         if context.sync_mode:             # <<<<<<<<<<<<<<
 *             old_value = m.get(key)
 *         value = _field_value_from_dict(field, decoder, v, old_value, context)
 */
    __pyx_t_12 = (__pyx_v_context->sync_mode != 0);
    if (__pyx_t_12) {

      /* "c_data_model_v2.pyx":635
 *             continue
 *         if context.sync_mode:
 *             old_value = m.get(key)             # <<<<<<<<<<<<<<
 *         value = _field_value_from_dict(field, decoder, v, old_value, context)
 *         m._raw_setitem(key, value)
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_m), __pyx_n_s_get); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 635, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      if (!__pyx_t_11) {
        __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_key); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 635, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_v_key};
          __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 635, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_8);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_v_key};
          __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 635, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_8);
        } else
        #endif
        {
          __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 635, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_11); __pyx_t_11 = NULL;
          __Pyx_INCREF(__pyx_v_key);
          __Pyx_GIVEREF(__pyx_v_key);
          PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_v_key);
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 635, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_old_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "c_data_model_v2.pyx":634
 *                 del m[key]
 *             continue
 *         if context.sync_mode:             # <<<<<<<<<<<<<<
 *             old_value = m.get(key)
 *         value = _field_value_from_dict(field, decoder, v, old_value, context)
 */
    }

    /* "c_data_model_v2.pyx":636
 *         if context.sync_mode:
 *             old_value = m.get(key)
 *         value = _field_value_from_dict(field, decoder, v, old_value, context)             # <<<<<<<<<<<<<<
 *         m._raw_setitem(key, value)
 *         if field.ref:
 */
    __pyx_t_8 = __pyx_f_15c_data_model_v2__field_value_from_dict(__pyx_v_field, __pyx_v_decoder, __pyx_v_v, __pyx_v_old_value, __pyx_v_context); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 636, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "c_data_model_v2.pyx":637
 *             old_value = m.get(key)
 *         value = _field_value_from_dict(field, decoder, v, old_value, context)
 *         m._raw_setitem(key, value)             # <<<<<<<<<<<<<<
 *         if field.ref:
 *             context.add_unsolved_ref(('map', m, key, value))
 */
    ((struct __pyx_vtabstruct_15c_data_model_v2_Map *)__pyx_v_m->__pyx_vtab)->_raw_setitem(__pyx_v_m, __pyx_v_key, __pyx_v_value);

    /* "c_data_model_v2.pyx":638
 *         value = _field_value_from_dict(field, decoder, v, old_value, context)
 *         m._raw_setitem(key, value)
 *         if field.ref:             # <<<<<<<<<<<<<<
 *             context.add_unsolved_ref(('map', m, key, value))
 * 
 */
    __pyx_t_12 = (__pyx_v_field->ref != 0);
    if (__pyx_t_12) {

      /* "c_data_model_v2.pyx":639
 *         m._raw_setitem(key, value)
 *         if field.ref:
 *             context.add_unsolved_ref(('map', m, key, value))             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 639, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_n_s_map);
      __Pyx_GIVEREF(__pyx_n_s_map);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_map);
      __Pyx_INCREF(((PyObject *)__pyx_v_m));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_m));
      PyTuple_SET_ITEM(__pyx_t_8, 1, ((PyObject *)__pyx_v_m));
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_v_key);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_v_value);
      ((struct __pyx_vtabstruct_15c_data_model_v2_DecodeContext *)__pyx_v_context->__pyx_vtab)->add_unsolved_ref(__pyx_v_context, __pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "c_data_model_v2.pyx":638
 *         value = _field_value_from_dict(field, decoder, v, old_value, context)
 *         m._raw_setitem(key, value)
 *         if field.ref:             # <<<<<<<<<<<<<<
 *             context.add_unsolved_ref(('map', m, key, value))
 * 
 */
    }
    __pyx_L5_continue:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":612
 * 
 * 
 * cdef void _decode_map_from_dict(Field field, dict obj_dict,             # <<<<<<<<<<<<<<
 *                                 object dvalue, DecodeContext context):
 *     cdef Map m = None
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("c_data_model_v2._decode_map_from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_decoder);
  __Pyx_XDECREF(__pyx_v_kdecoder);
  __Pyx_XDECREF(__pyx_v_old_value);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":642
 * 
 * 
 * cdef void _decode_idmap_from_dict(Field field, dict obj_dict,             # <<<<<<<<<<<<<<
 *                                   object dvalue, DecodeContext context):
 *     cdef IdMap idm = None
 */

static void __pyx_f_15c_data_model_v2__decode_idmap_from_dict(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field, PyObject *__pyx_v_obj_dict, PyObject *__pyx_v_dvalue, struct __pyx_obj_15c_data_model_v2_DecodeContext *__pyx_v_context) {
  struct __pyx_obj_15c_data_model_v2_IdMap *__pyx_v_idm = 0;
  CYTHON_UNUSED PyObject *__pyx_v_decoder = 0;
  PyObject *__pyx_v_kdecoder = 0;
  PyObject *__pyx_v_old_value = 0;
  PyObject *__pyx_v_oid = 0;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_value = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("_decode_idmap_from_dict", 0);

  /* "c_data_model_v2.pyx":644
 * cdef void _decode_idmap_from_dict(Field field, dict obj_dict,
 *                                   object dvalue, DecodeContext context):
 *     cdef IdMap idm = None             # <<<<<<<<<<<<<<
 *     cdef object decoder = field.dict_decoder
 *     cdef object kdecoder = field.dict_key_decoder
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_idm = ((struct __pyx_obj_15c_data_model_v2_IdMap *)Py_None);

  /* "c_data_model_v2.pyx":645
 *                                   object dvalue, DecodeContext context):
 *     cdef IdMap idm = None
 *     cdef object decoder = field.dict_decoder             # <<<<<<<<<<<<<<
 *     cdef object kdecoder = field.dict_key_decoder
 *     cdef object old_value
 */
  __pyx_t_1 = __pyx_v_field->dict_decoder;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_decoder = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":646
 *     cdef IdMap idm = None
 *     cdef object decoder = field.dict_decoder
 *     cdef object kdecoder = field.dict_key_decoder             # <<<<<<<<<<<<<<
 *     cdef object old_value
 *     cdef object oid
 */
  __pyx_t_1 = __pyx_v_field->dict_key_decoder;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_kdecoder = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":650
 *     cdef object oid
 * 
 *     if context.sync_mode:             # <<<<<<<<<<<<<<
 *         idm = obj_dict.get(field.key)
 *     if idm is None:
 */
  __pyx_t_2 = (__pyx_v_context->sync_mode != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":651
 * 
 *     if context.sync_mode:
 *         idm = obj_dict.get(field.key)             # <<<<<<<<<<<<<<
 *     if idm is None:
 *         idm = _new_id_map(field)
 */
    if (unlikely(__pyx_v_obj_dict == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
      __PYX_ERR(0, 651, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_obj_dict, __pyx_v_field->key, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_15c_data_model_v2_IdMap))))) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_idm, ((struct __pyx_obj_15c_data_model_v2_IdMap *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "c_data_model_v2.pyx":650
 *     cdef object oid
 * 
 *     if context.sync_mode:             # <<<<<<<<<<<<<<
 *         idm = obj_dict.get(field.key)
 *     if idm is None:
 */
  }

  /* "c_data_model_v2.pyx":652
 *     if context.sync_mode:
 *         idm = obj_dict.get(field.key)
 *     if idm is None:             # <<<<<<<<<<<<<<
 *         idm = _new_id_map(field)
 *         obj_dict[field.key] = idm
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_idm) == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":653
 *         idm = obj_dict.get(field.key)
 *     if idm is None:
 *         idm = _new_id_map(field)             # <<<<<<<<<<<<<<
 *         obj_dict[field.key] = idm
 *     for k, v in dvalue.iteritems():
 */
    __pyx_t_1 = ((PyObject *)__pyx_f_15c_data_model_v2__new_id_map(__pyx_v_field)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_idm, ((struct __pyx_obj_15c_data_model_v2_IdMap *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "c_data_model_v2.pyx":654
 *     if idm is None:
 *         idm = _new_id_map(field)
 *         obj_dict[field.key] = idm             # <<<<<<<<<<<<<<
 *     for k, v in dvalue.iteritems():
 *         if not context.sync_mode:
 */
    if (unlikely(__pyx_v_obj_dict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 654, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_v_obj_dict, __pyx_v_field->key, ((PyObject *)__pyx_v_idm)) < 0)) __PYX_ERR(0, 654, __pyx_L1_error)

    /* "c_data_model_v2.pyx":652
 *     if context.sync_mode:
 *         idm = obj_dict.get(field.key)
 *     if idm is None:             # <<<<<<<<<<<<<<
 *         idm = _new_id_map(field)
 *         obj_dict[field.key] = idm
 */
  }

  /* "c_data_model_v2.pyx":655
 *         idm = _new_id_map(field)
 *         obj_dict[field.key] = idm
 *     for k, v in dvalue.iteritems():             # <<<<<<<<<<<<<<
 *         if not context.sync_mode:
 *             if v is None:
 */
  __pyx_t_4 = 0;
  if (unlikely(__pyx_v_dvalue == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    __PYX_ERR(0, 655, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_dict_iterator(__pyx_v_dvalue, 0, __pyx_n_s_iteritems, (&__pyx_t_5), (&__pyx_t_6)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_7;
  __pyx_t_7 = 0;
  while (1) {
    __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_5, &__pyx_t_4, &__pyx_t_7, &__pyx_t_8, NULL, __pyx_t_6);
    if (unlikely(__pyx_t_9 == 0)) break;
    if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "c_data_model_v2.pyx":656
 *         obj_dict[field.key] = idm
 *     for k, v in dvalue.iteritems():
 *         if not context.sync_mode:             # <<<<<<<<<<<<<<
 *             if v is None:
 *                 continue # None
 */
    __pyx_t_3 = ((!(__pyx_v_context->sync_mode != 0)) != 0);
    if (__pyx_t_3) {

      /* "c_data_model_v2.pyx":657
 *     for k, v in dvalue.iteritems():
 *         if not context.sync_mode:
 *             if v is None:             # <<<<<<<<<<<<<<
 *                 continue # None
 *         old_value = None
 */
      __pyx_t_3 = (__pyx_v_v == Py_None);
      __pyx_t_2 = (__pyx_t_3 != 0);
      if (__pyx_t_2) {

        /* "c_data_model_v2.pyx":658
 *         if not context.sync_mode:
 *             if v is None:
 *                 continue # None             # <<<<<<<<<<<<<<
 *         old_value = None
 *         oid = kdecoder(k)
 */
        goto __pyx_L5_continue;

        /* "c_data_model_v2.pyx":657
 *     for k, v in dvalue.iteritems():
 *         if not context.sync_mode:
 *             if v is None:             # <<<<<<<<<<<<<<
 *                 continue # None
 *         old_value = None
 */
      }

      /* "c_data_model_v2.pyx":656
 *         obj_dict[field.key] = idm
 *     for k, v in dvalue.iteritems():
 *         if not context.sync_mode:             # <<<<<<<<<<<<<<
 *             if v is None:
 *                 continue # None
 */
    }

    /* "c_data_model_v2.pyx":659
 *             if v is None:
 *                 continue # None
 *         old_value = None             # <<<<<<<<<<<<<<
 *         oid = kdecoder(k)
 *         if context.sync_mode and v is None:
 */
    __Pyx_INCREF(Py_None);
    __Pyx_XDECREF_SET(__pyx_v_old_value, Py_None);

    /* "c_data_model_v2.pyx":660
 *                 continue # None
 *         old_value = None
 *         oid = kdecoder(k)             # <<<<<<<<<<<<<<
 *         if context.sync_mode and v is None:
 *             if oid in idm:
 */
    __Pyx_INCREF(__pyx_v_kdecoder);
    __pyx_t_7 = __pyx_v_kdecoder; __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_10) {
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_k); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 660, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_k};
        __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 660, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_8);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_k};
        __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 660, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_8);
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 660, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
        __Pyx_INCREF(__pyx_v_k);
        __Pyx_GIVEREF(__pyx_v_k);
        PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_v_k);
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_11, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 660, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_oid, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "c_data_model_v2.pyx":661
 *         old_value = None
 *         oid = kdecoder(k)
 *         if context.sync_mode and v is None:             # <<<<<<<<<<<<<<
 *             if oid in idm:
 *                 del idm[oid]
 */
    __pyx_t_3 = (__pyx_v_context->sync_mode != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_3 = (__pyx_v_v == Py_None);
    __pyx_t_12 = (__pyx_t_3 != 0);
    __pyx_t_2 = __pyx_t_12;
    __pyx_L10_bool_binop_done:;
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":662
 *         oid = kdecoder(k)
 *         if context.sync_mode and v is None:
 *             if oid in idm:             # <<<<<<<<<<<<<<
 *                 del idm[oid]
 *             continue
 */
      __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_oid, ((PyObject *)__pyx_v_idm), Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 662, __pyx_L1_error)
      __pyx_t_12 = (__pyx_t_2 != 0);
      if (__pyx_t_12) {

        /* "c_data_model_v2.pyx":663
 *         if context.sync_mode and v is None:
 *             if oid in idm:
 *                 del idm[oid]             # <<<<<<<<<<<<<<
 *             continue
 *         if context.sync_mode:
 */
        if (unlikely(PyObject_DelItem(((PyObject *)__pyx_v_idm), __pyx_v_oid) < 0)) __PYX_ERR(0, 663, __pyx_L1_error)

        /* "c_data_model_v2.pyx":662
 *         oid = kdecoder(k)
 *         if context.sync_mode and v is None:
 *             if oid in idm:             # <<<<<<<<<<<<<<
 *                 del idm[oid]
 *             continue
 */
      }

      /* "c_data_model_v2.pyx":664
 *             if oid in idm:
 *                 del idm[oid]
 *             continue             # <<<<<<<<<<<<<<
 *         if context.sync_mode:
 *             old_value = idm.get(oid)
 */
      goto __pyx_L5_continue;

      /* "c_data_model_v2.pyx":661
 *         old_value = None
 *         oid = kdecoder(k)
 *         if context.sync_mode and v is None:             # <<<<<<<<<<<<<<
 *             if oid in idm:
 *                 del idm[oid]
 */
    }

    /* "c_data_model_v2.pyx":665
 *                 del idm[oid]
 *             continue
 *         if context.sync_mode:             # <<<<<<<<<<<<<<
 *             old_value = idm.get(oid)
 *         value = _field_object_from_dict(field, oid, v, old_value, context)
 */
    __pyx_t_12 = (__pyx_v_context->sync_mode != 0);
    if (__pyx_t_12) {

      /* "c_data_model_v2.pyx":666
 *             continue
 *         if context.sync_mode:
 *             old_value = idm.get(oid)             # <<<<<<<<<<<<<<
 *         value = _field_object_from_dict(field, oid, v, old_value, context)
 *         idm._raw_setitem(oid, value)
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_idm), __pyx_n_s_get); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 666, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      if (!__pyx_t_11) {
        __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_oid); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 666, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_v_oid};
          __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 666, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_8);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_v_oid};
          __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 666, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_8);
        } else
        #endif
        {
          __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 666, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_11); __pyx_t_11 = NULL;
          __Pyx_INCREF(__pyx_v_oid);
          __Pyx_GIVEREF(__pyx_v_oid);
          PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_v_oid);
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 666, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_old_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "c_data_model_v2.pyx":665
 *                 del idm[oid]
 *             continue
 *         if context.sync_mode:             # <<<<<<<<<<<<<<
 *             old_value = idm.get(oid)
 *         value = _field_object_from_dict(field, oid, v, old_value, context)
 */
    }

    /* "c_data_model_v2.pyx":667
 *         if context.sync_mode:
 *             old_value = idm.get(oid)
 *         value = _field_object_from_dict(field, oid, v, old_value, context)             # <<<<<<<<<<<<<<
 *         idm._raw_setitem(oid, value)
 *         if field.ref:
 */
    __pyx_t_8 = __pyx_f_15c_data_model_v2__field_object_from_dict(__pyx_v_field, __pyx_v_oid, __pyx_v_v, __pyx_v_old_value, __pyx_v_context); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 667, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "c_data_model_v2.pyx":668
 *             old_value = idm.get(oid)
 *         value = _field_object_from_dict(field, oid, v, old_value, context)
 *         idm._raw_setitem(oid, value)             # <<<<<<<<<<<<<<
 *         if field.ref:
 *             context.add_unsolved_ref(('map', idm, oid, value))
 */
    ((struct __pyx_vtabstruct_15c_data_model_v2_IdMap *)__pyx_v_idm->__pyx_base.__pyx_vtab)->__pyx_base._raw_setitem(((struct __pyx_obj_15c_data_model_v2_Map *)__pyx_v_idm), __pyx_v_oid, __pyx_v_value);

    /* "c_data_model_v2.pyx":669
 *         value = _field_object_from_dict(field, oid, v, old_value, context)
 *         idm._raw_setitem(oid, value)
 *         if field.ref:             # <<<<<<<<<<<<<<
 *             context.add_unsolved_ref(('map', idm, oid, value))
 * 
 */
    __pyx_t_12 = (__pyx_v_field->ref != 0);
    if (__pyx_t_12) {

      /* "c_data_model_v2.pyx":670
 *         idm._raw_setitem(oid, value)
 *         if field.ref:
 *             context.add_unsolved_ref(('map', idm, oid, value))             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 670, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_n_s_map);
      __Pyx_GIVEREF(__pyx_n_s_map);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_map);
      __Pyx_INCREF(((PyObject *)__pyx_v_idm));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_idm));
      PyTuple_SET_ITEM(__pyx_t_8, 1, ((PyObject *)__pyx_v_idm));
      __Pyx_INCREF(__pyx_v_oid);
      __Pyx_GIVEREF(__pyx_v_oid);
      PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_v_oid);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_v_value);
      ((struct __pyx_vtabstruct_15c_data_model_v2_DecodeContext *)__pyx_v_context->__pyx_vtab)->add_unsolved_ref(__pyx_v_context, __pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "c_data_model_v2.pyx":669
 *         value = _field_object_from_dict(field, oid, v, old_value, context)
 *         idm._raw_setitem(oid, value)
 *         if field.ref:             # <<<<<<<<<<<<<<
 *             context.add_unsolved_ref(('map', idm, oid, value))
 * 
 */
    }
    __pyx_L5_continue:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":642
 * 
 * 
 * cdef void _decode_idmap_from_dict(Field field, dict obj_dict,             # <<<<<<<<<<<<<<
 *                                   object dvalue, DecodeContext context):
 *     cdef IdMap idm = None
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("c_data_model_v2._decode_idmap_from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_idm);
  __Pyx_XDECREF(__pyx_v_decoder);
  __Pyx_XDECREF(__pyx_v_kdecoder);
  __Pyx_XDECREF(__pyx_v_old_value);
  __Pyx_XDECREF(__pyx_v_oid);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":674
 * 
 * 
 * cdef void _decode_from_dict(DataModelProtocol protocol,             # <<<<<<<<<<<<<<
 *                             object obj, dict obj_dict,
 *                             dict src_dict_data,
 */

static void __pyx_f_15c_data_model_v2__decode_from_dict(struct __pyx_obj_15c_data_model_v2_DataModelProtocol *__pyx_v_protocol, PyObject *__pyx_v_obj, PyObject *__pyx_v_obj_dict, PyObject *__pyx_v_src_dict_data, struct __pyx_obj_15c_data_model_v2_DecodeContext *__pyx_v_context) {
  struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field = 0;
  PyObject *__pyx_v_dvalue = 0;
  struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_dm_obj = 0;
  PyObject *__pyx_v_old_value = 0;
  PyObject *__pyx_v_decoder = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_kdecoder = NULL;
  PyObject *__pyx_v_value = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("_decode_from_dict", 0);

  /* "c_data_model_v2.pyx":687
 *     cdef object old_value
 * 
 *     for field in protocol.fields_define.fields:             # <<<<<<<<<<<<<<
 *         dvalue = src_dict_data.get(field.name)
 *         if dvalue is None: # None
 */
  if (unlikely(__pyx_v_protocol->fields_define->fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 687, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_protocol->fields_define->fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 687, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_15c_data_model_v2_Field))))) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_field, ((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "c_data_model_v2.pyx":688
 * 
 *     for field in protocol.fields_define.fields:
 *         dvalue = src_dict_data.get(field.name)             # <<<<<<<<<<<<<<
 *         if dvalue is None: # None
 *             continue
 */
    if (unlikely(__pyx_v_src_dict_data == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
      __PYX_ERR(0, 688, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__pyx_v_src_dict_data, __pyx_v_field->name, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_dvalue, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "c_data_model_v2.pyx":689
 *     for field in protocol.fields_define.fields:
 *         dvalue = src_dict_data.get(field.name)
 *         if dvalue is None: # None             # <<<<<<<<<<<<<<
 *             continue
 *         decoder = field.dict_decoder
 */
    __pyx_t_4 = (__pyx_v_dvalue == Py_None);
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {

      /* "c_data_model_v2.pyx":690
 *         dvalue = src_dict_data.get(field.name)
 *         if dvalue is None: # None
 *             continue             # <<<<<<<<<<<<<<
 *         decoder = field.dict_decoder
 *         kdecoder = field.dict_key_decoder
 */
      goto __pyx_L3_continue;

      /* "c_data_model_v2.pyx":689
 *     for field in protocol.fields_define.fields:
 *         dvalue = src_dict_data.get(field.name)
 *         if dvalue is None: # None             # <<<<<<<<<<<<<<
 *             continue
 *         decoder = field.dict_decoder
 */
    }

    /* "c_data_model_v2.pyx":691
 *         if dvalue is None: # None
 *             continue
 *         decoder = field.dict_decoder             # <<<<<<<<<<<<<<
 *         kdecoder = field.dict_key_decoder
 *         if field.array:
 */
    __pyx_t_3 = __pyx_v_field->dict_decoder;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_decoder, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "c_data_model_v2.pyx":692
 *             continue
 *         decoder = field.dict_decoder
 *         kdecoder = field.dict_key_decoder             # <<<<<<<<<<<<<<
 *         if field.array:
 *             _decode_array_from_dict(field, obj_dict, dvalue, context)
 */
    __pyx_t_3 = __pyx_v_field->dict_key_decoder;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_kdecoder, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "c_data_model_v2.pyx":693
 *         decoder = field.dict_decoder
 *         kdecoder = field.dict_key_decoder
 *         if field.array:             # <<<<<<<<<<<<<<
 *             _decode_array_from_dict(field, obj_dict, dvalue, context)
 *         elif field.map:
 */
    __pyx_t_5 = (__pyx_v_field->array != 0);
    if (__pyx_t_5) {

      /* "c_data_model_v2.pyx":694
 *         kdecoder = field.dict_key_decoder
 *         if field.array:
 *             _decode_array_from_dict(field, obj_dict, dvalue, context)             # <<<<<<<<<<<<<<
 *         elif field.map:
 *             _decode_map_from_dict(field, obj_dict, dvalue, context)
 */
      __pyx_f_15c_data_model_v2__decode_array_from_dict(__pyx_v_field, __pyx_v_obj_dict, __pyx_v_dvalue, __pyx_v_context);

      /* "c_data_model_v2.pyx":693
 *         decoder = field.dict_decoder
 *         kdecoder = field.dict_key_decoder
 *         if field.array:             # <<<<<<<<<<<<<<
 *             _decode_array_from_dict(field, obj_dict, dvalue, context)
 *         elif field.map:
 */
      goto __pyx_L6;
    }

    /* "c_data_model_v2.pyx":695
 *         if field.array:
 *             _decode_array_from_dict(field, obj_dict, dvalue, context)
 *         elif field.map:             # <<<<<<<<<<<<<<
 *             _decode_map_from_dict(field, obj_dict, dvalue, context)
 *         elif field.id_map:
 */
    __pyx_t_5 = (__pyx_v_field->map != 0);
    if (__pyx_t_5) {

      /* "c_data_model_v2.pyx":696
 *             _decode_array_from_dict(field, obj_dict, dvalue, context)
 *         elif field.map:
 *             _decode_map_from_dict(field, obj_dict, dvalue, context)             # <<<<<<<<<<<<<<
 *         elif field.id_map:
 *             _decode_idmap_from_dict(field, obj_dict, dvalue, context)
 */
      __pyx_f_15c_data_model_v2__decode_map_from_dict(__pyx_v_field, __pyx_v_obj_dict, __pyx_v_dvalue, __pyx_v_context);

      /* "c_data_model_v2.pyx":695
 *         if field.array:
 *             _decode_array_from_dict(field, obj_dict, dvalue, context)
 *         elif field.map:             # <<<<<<<<<<<<<<
 *             _decode_map_from_dict(field, obj_dict, dvalue, context)
 *         elif field.id_map:
 */
      goto __pyx_L6;
    }

    /* "c_data_model_v2.pyx":697
 *         elif field.map:
 *             _decode_map_from_dict(field, obj_dict, dvalue, context)
 *         elif field.id_map:             # <<<<<<<<<<<<<<
 *             _decode_idmap_from_dict(field, obj_dict, dvalue, context)
 *         else:
 */
    __pyx_t_5 = (__pyx_v_field->id_map != 0);
    if (__pyx_t_5) {

      /* "c_data_model_v2.pyx":698
 *             _decode_map_from_dict(field, obj_dict, dvalue, context)
 *         elif field.id_map:
 *             _decode_idmap_from_dict(field, obj_dict, dvalue, context)             # <<<<<<<<<<<<<<
 *         else:
 *             old_value = None
 */
      __pyx_f_15c_data_model_v2__decode_idmap_from_dict(__pyx_v_field, __pyx_v_obj_dict, __pyx_v_dvalue, __pyx_v_context);

      /* "c_data_model_v2.pyx":697
 *         elif field.map:
 *             _decode_map_from_dict(field, obj_dict, dvalue, context)
 *         elif field.id_map:             # <<<<<<<<<<<<<<
 *             _decode_idmap_from_dict(field, obj_dict, dvalue, context)
 *         else:
 */
      goto __pyx_L6;
    }

    /* "c_data_model_v2.pyx":700
 *             _decode_idmap_from_dict(field, obj_dict, dvalue, context)
 *         else:
 *             old_value = None             # <<<<<<<<<<<<<<
 *             if context.sync_mode:
 *                 old_value = obj_dict.get(field.key)
 */
    /*else*/ {
      __Pyx_INCREF(Py_None);
      __Pyx_XDECREF_SET(__pyx_v_old_value, Py_None);

      /* "c_data_model_v2.pyx":701
 *         else:
 *             old_value = None
 *             if context.sync_mode:             # <<<<<<<<<<<<<<
 *                 old_value = obj_dict.get(field.key)
 *             value = _field_value_from_dict(field, decoder, dvalue, old_value, context)
 */
      __pyx_t_5 = (__pyx_v_context->sync_mode != 0);
      if (__pyx_t_5) {

        /* "c_data_model_v2.pyx":702
 *             old_value = None
 *             if context.sync_mode:
 *                 old_value = obj_dict.get(field.key)             # <<<<<<<<<<<<<<
 *             value = _field_value_from_dict(field, decoder, dvalue, old_value, context)
 *             obj_dict[field.key] = value
 */
        if (unlikely(__pyx_v_obj_dict == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
          __PYX_ERR(0, 702, __pyx_L1_error)
        }
        __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__pyx_v_obj_dict, __pyx_v_field->key, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 702, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF_SET(__pyx_v_old_value, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "c_data_model_v2.pyx":701
 *         else:
 *             old_value = None
 *             if context.sync_mode:             # <<<<<<<<<<<<<<
 *                 old_value = obj_dict.get(field.key)
 *             value = _field_value_from_dict(field, decoder, dvalue, old_value, context)
 */
      }

      /* "c_data_model_v2.pyx":703
 *             if context.sync_mode:
 *                 old_value = obj_dict.get(field.key)
 *             value = _field_value_from_dict(field, decoder, dvalue, old_value, context)             # <<<<<<<<<<<<<<
 *             obj_dict[field.key] = value
 *             if field.ref:
 */
      __pyx_t_3 = __pyx_f_15c_data_model_v2__field_value_from_dict(__pyx_v_field, __pyx_v_decoder, __pyx_v_dvalue, __pyx_v_old_value, __pyx_v_context); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "c_data_model_v2.pyx":704
 *                 old_value = obj_dict.get(field.key)
 *             value = _field_value_from_dict(field, decoder, dvalue, old_value, context)
 *             obj_dict[field.key] = value             # <<<<<<<<<<<<<<
 *             if field.ref:
 *                 context.add_unsolved_ref(('obj_dict', obj_dict, field.key, value))
 */
      if (unlikely(__pyx_v_obj_dict == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 704, __pyx_L1_error)
      }
      if (unlikely(PyDict_SetItem(__pyx_v_obj_dict, __pyx_v_field->key, __pyx_v_value) < 0)) __PYX_ERR(0, 704, __pyx_L1_error)

      /* "c_data_model_v2.pyx":705
 *             value = _field_value_from_dict(field, decoder, dvalue, old_value, context)
 *             obj_dict[field.key] = value
 *             if field.ref:             # <<<<<<<<<<<<<<
 *                 context.add_unsolved_ref(('obj_dict', obj_dict, field.key, value))
 * 
 */
      __pyx_t_5 = (__pyx_v_field->ref != 0);
      if (__pyx_t_5) {

        /* "c_data_model_v2.pyx":706
 *             obj_dict[field.key] = value
 *             if field.ref:
 *                 context.add_unsolved_ref(('obj_dict', obj_dict, field.key, value))             # <<<<<<<<<<<<<<
 * 
 *         if context.mark_change and obj is not None:
 */
        __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 706, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_n_s_obj_dict);
        __Pyx_GIVEREF(__pyx_n_s_obj_dict);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_obj_dict);
        __Pyx_INCREF(__pyx_v_obj_dict);
        __Pyx_GIVEREF(__pyx_v_obj_dict);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_obj_dict);
        __Pyx_INCREF(__pyx_v_field->key);
        __Pyx_GIVEREF(__pyx_v_field->key);
        PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_field->key);
        __Pyx_INCREF(__pyx_v_value);
        __Pyx_GIVEREF(__pyx_v_value);
        PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_value);
        ((struct __pyx_vtabstruct_15c_data_model_v2_DecodeContext *)__pyx_v_context->__pyx_vtab)->add_unsolved_ref(__pyx_v_context, __pyx_t_3);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "c_data_model_v2.pyx":705
 *             value = _field_value_from_dict(field, decoder, dvalue, old_value, context)
 *             obj_dict[field.key] = value
 *             if field.ref:             # <<<<<<<<<<<<<<
 *                 context.add_unsolved_ref(('obj_dict', obj_dict, field.key, value))
 * 
 */
      }
    }
    __pyx_L6:;

    /* "c_data_model_v2.pyx":708
 *                 context.add_unsolved_ref(('obj_dict', obj_dict, field.key, value))
 * 
 *         if context.mark_change and obj is not None:             # <<<<<<<<<<<<<<
 *             dm_obj = <DataModel>obj
 *             dm_obj._set_field_changed(field)
 */
    __pyx_t_4 = (__pyx_v_context->mark_change != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_5 = __pyx_t_4;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_obj != Py_None);
    __pyx_t_6 = (__pyx_t_4 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L10_bool_binop_done:;
    if (__pyx_t_5) {

      /* "c_data_model_v2.pyx":709
 * 
 *         if context.mark_change and obj is not None:
 *             dm_obj = <DataModel>obj             # <<<<<<<<<<<<<<
 *             dm_obj._set_field_changed(field)
 * 
 */
      __pyx_t_3 = __pyx_v_obj;
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_dm_obj, ((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "c_data_model_v2.pyx":710
 *         if context.mark_change and obj is not None:
 *             dm_obj = <DataModel>obj
 *             dm_obj._set_field_changed(field)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      ((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_dm_obj->__pyx_vtab)->_set_field_changed(__pyx_v_dm_obj, __pyx_v_field);

      /* "c_data_model_v2.pyx":708
 *                 context.add_unsolved_ref(('obj_dict', obj_dict, field.key, value))
 * 
 *         if context.mark_change and obj is not None:             # <<<<<<<<<<<<<<
 *             dm_obj = <DataModel>obj
 *             dm_obj._set_field_changed(field)
 */
    }

    /* "c_data_model_v2.pyx":687
 *     cdef object old_value
 * 
 *     for field in protocol.fields_define.fields:             # <<<<<<<<<<<<<<
 *         dvalue = src_dict_data.get(field.name)
 *         if dvalue is None: # None
 */
    __pyx_L3_continue:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":674
 * 
 * 
 * cdef void _decode_from_dict(DataModelProtocol protocol,             # <<<<<<<<<<<<<<
 *                             object obj, dict obj_dict,
 *                             dict src_dict_data,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("c_data_model_v2._decode_from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_field);
  __Pyx_XDECREF(__pyx_v_dvalue);
  __Pyx_XDECREF((PyObject *)__pyx_v_dm_obj);
  __Pyx_XDECREF(__pyx_v_old_value);
  __Pyx_XDECREF(__pyx_v_decoder);
  __Pyx_XDECREF(__pyx_v_kdecoder);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":723
 * 
 * 
 *     def __cinit__(self, str mode=None, object resolve_ref=None, bint mark_change=False):             # <<<<<<<<<<<<<<
 *         self.known_objects = {}
 *         self.tmp_unsolved_ref = []
 */

/* Python wrapper */
static int __pyx_pw_15c_data_model_v2_13DecodeContext_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_15c_data_model_v2_13DecodeContext_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_mode = 0;
  PyObject *__pyx_v_resolve_ref = 0;
  int __pyx_v_mark_change;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mode,&__pyx_n_s_resolve_ref,&__pyx_n_s_mark_change,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject*)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_resolve_ref);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mark_change);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 723, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_mode = ((PyObject*)values[0]);
    __pyx_v_resolve_ref = values[1];
    if (values[2]) {
      __pyx_v_mark_change = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_mark_change == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 723, __pyx_L3_error)
    } else {
      __pyx_v_mark_change = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 723, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.DecodeContext.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mode), (&PyString_Type), 1, "mode", 1))) __PYX_ERR(0, 723, __pyx_L1_error)
  __pyx_r = __pyx_pf_15c_data_model_v2_13DecodeContext___cinit__(((struct __pyx_obj_15c_data_model_v2_DecodeContext *)__pyx_v_self), __pyx_v_mode, __pyx_v_resolve_ref, __pyx_v_mark_change);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15c_data_model_v2_13DecodeContext___cinit__(struct __pyx_obj_15c_data_model_v2_DecodeContext *__pyx_v_self, PyObject *__pyx_v_mode, PyObject *__pyx_v_resolve_ref, int __pyx_v_mark_change) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "c_data_model_v2.pyx":724
 * 
 *     def __cinit__(self, str mode=None, object resolve_ref=None, bint mark_change=False):
 *         self.known_objects = {}             # <<<<<<<<<<<<<<
 *         self.tmp_unsolved_ref = []
 *         self.unsolved_ref = {}
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->known_objects);
  __Pyx_DECREF(__pyx_v_self->known_objects);
  __pyx_v_self->known_objects = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":725
 *     def __cinit__(self, str mode=None, object resolve_ref=None, bint mark_change=False):
 *         self.known_objects = {}
 *         self.tmp_unsolved_ref = []             # <<<<<<<<<<<<<<
 *         self.unsolved_ref = {}
 *         self.mark_change = mark_change
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->tmp_unsolved_ref);
  __Pyx_DECREF(__pyx_v_self->tmp_unsolved_ref);
  __pyx_v_self->tmp_unsolved_ref = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":726
 *         self.known_objects = {}
 *         self.tmp_unsolved_ref = []
 *         self.unsolved_ref = {}             # <<<<<<<<<<<<<<
 *         self.mark_change = mark_change
 *         self.set_mode('override')
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->unsolved_ref);
  __Pyx_DECREF(__pyx_v_self->unsolved_ref);
  __pyx_v_self->unsolved_ref = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":727
 *         self.tmp_unsolved_ref = []
 *         self.unsolved_ref = {}
 *         self.mark_change = mark_change             # <<<<<<<<<<<<<<
 *         self.set_mode('override')
 *         if mode is not None:
 */
  __pyx_v_self->mark_change = __pyx_v_mark_change;

  /* "c_data_model_v2.pyx":728
 *         self.unsolved_ref = {}
 *         self.mark_change = mark_change
 *         self.set_mode('override')             # <<<<<<<<<<<<<<
 *         if mode is not None:
 *             self.set_mode(mode)
 */
  ((struct __pyx_vtabstruct_15c_data_model_v2_DecodeContext *)__pyx_v_self->__pyx_vtab)->set_mode(__pyx_v_self, __pyx_n_s_override);

  /* "c_data_model_v2.pyx":729
 *         self.mark_change = mark_change
 *         self.set_mode('override')
 *         if mode is not None:             # <<<<<<<<<<<<<<
 *             self.set_mode(mode)
 *         if resolve_ref is not None:
 */
  __pyx_t_2 = (__pyx_v_mode != ((PyObject*)Py_None));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":730
 *         self.set_mode('override')
 *         if mode is not None:
 *             self.set_mode(mode)             # <<<<<<<<<<<<<<
 *         if resolve_ref is not None:
 *             self.resolve_ref_func = resolve_ref
 */
    ((struct __pyx_vtabstruct_15c_data_model_v2_DecodeContext *)__pyx_v_self->__pyx_vtab)->set_mode(__pyx_v_self, __pyx_v_mode);

    /* "c_data_model_v2.pyx":729
 *         self.mark_change = mark_change
 *         self.set_mode('override')
 *         if mode is not None:             # <<<<<<<<<<<<<<
 *             self.set_mode(mode)
 *         if resolve_ref is not None:
 */
  }

  /* "c_data_model_v2.pyx":731
 *         if mode is not None:
 *             self.set_mode(mode)
 *         if resolve_ref is not None:             # <<<<<<<<<<<<<<
 *             self.resolve_ref_func = resolve_ref
 * 
 */
  __pyx_t_3 = (__pyx_v_resolve_ref != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":732
 *             self.set_mode(mode)
 *         if resolve_ref is not None:
 *             self.resolve_ref_func = resolve_ref             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_INCREF(__pyx_v_resolve_ref);
    __Pyx_GIVEREF(__pyx_v_resolve_ref);
    __Pyx_GOTREF(__pyx_v_self->resolve_ref_func);
    __Pyx_DECREF(__pyx_v_self->resolve_ref_func);
    __pyx_v_self->resolve_ref_func = __pyx_v_resolve_ref;

    /* "c_data_model_v2.pyx":731
 *         if mode is not None:
 *             self.set_mode(mode)
 *         if resolve_ref is not None:             # <<<<<<<<<<<<<<
 *             self.resolve_ref_func = resolve_ref
 * 
 */
  }

  /* "c_data_model_v2.pyx":723
 * 
 * 
 *     def __cinit__(self, str mode=None, object resolve_ref=None, bint mark_change=False):             # <<<<<<<<<<<<<<
 *         self.known_objects = {}
 *         self.tmp_unsolved_ref = []
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.DecodeContext.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":735
 * 
 * 
 *     cdef void set_mode(self, mode):             # <<<<<<<<<<<<<<
 *         if mode == 'sync':
 *             self.mode = 'sync'
 */

static void __pyx_f_15c_data_model_v2_13DecodeContext_set_mode(struct __pyx_obj_15c_data_model_v2_DecodeContext *__pyx_v_self, PyObject *__pyx_v_mode) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("set_mode", 0);

  /* "c_data_model_v2.pyx":736
 * 
 *     cdef void set_mode(self, mode):
 *         if mode == 'sync':             # <<<<<<<<<<<<<<
 *             self.mode = 'sync'
 *             self.sync_mode = True
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_sync, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 736, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":737
 *     cdef void set_mode(self, mode):
 *         if mode == 'sync':
 *             self.mode = 'sync'             # <<<<<<<<<<<<<<
 *             self.sync_mode = True
 *         else:
 */
    __Pyx_INCREF(__pyx_n_s_sync);
    __Pyx_GIVEREF(__pyx_n_s_sync);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_s_sync;

    /* "c_data_model_v2.pyx":738
 *         if mode == 'sync':
 *             self.mode = 'sync'
 *             self.sync_mode = True             # <<<<<<<<<<<<<<
 *         else:
 *             self.mode = 'override'
 */
    __pyx_v_self->sync_mode = 1;

    /* "c_data_model_v2.pyx":736
 * 
 *     cdef void set_mode(self, mode):
 *         if mode == 'sync':             # <<<<<<<<<<<<<<
 *             self.mode = 'sync'
 *             self.sync_mode = True
 */
    goto __pyx_L3;
  }

  /* "c_data_model_v2.pyx":740
 *             self.sync_mode = True
 *         else:
 *             self.mode = 'override'             # <<<<<<<<<<<<<<
 *             self.sync_mode = False
 * 
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_n_s_override);
    __Pyx_GIVEREF(__pyx_n_s_override);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_s_override;

    /* "c_data_model_v2.pyx":741
 *         else:
 *             self.mode = 'override'
 *             self.sync_mode = False             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_self->sync_mode = 0;
  }
  __pyx_L3:;

  /* "c_data_model_v2.pyx":735
 * 
 * 
 *     cdef void set_mode(self, mode):             # <<<<<<<<<<<<<<
 *         if mode == 'sync':
 *             self.mode = 'sync'
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("c_data_model_v2.DecodeContext.set_mode", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":744
 * 
 * 
 *     cdef void add_known_object(self, object oid, object obj):             # <<<<<<<<<<<<<<
 *         if self.resolve_ref_func is not None:
 *             return
 */

static void __pyx_f_15c_data_model_v2_13DecodeContext_add_known_object(struct __pyx_obj_15c_data_model_v2_DecodeContext *__pyx_v_self, PyObject *__pyx_v_oid, PyObject *__pyx_v_obj) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("add_known_object", 0);

  /* "c_data_model_v2.pyx":745
 * 
 *     cdef void add_known_object(self, object oid, object obj):
 *         if self.resolve_ref_func is not None:             # <<<<<<<<<<<<<<
 *             return
 *         self.known_objects[oid] = obj
 */
  __pyx_t_1 = (__pyx_v_self->resolve_ref_func != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":746
 *     cdef void add_known_object(self, object oid, object obj):
 *         if self.resolve_ref_func is not None:
 *             return             # <<<<<<<<<<<<<<
 *         self.known_objects[oid] = obj
 * 
 */
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":745
 * 
 *     cdef void add_known_object(self, object oid, object obj):
 *         if self.resolve_ref_func is not None:             # <<<<<<<<<<<<<<
 *             return
 *         self.known_objects[oid] = obj
 */
  }

  /* "c_data_model_v2.pyx":747
 *         if self.resolve_ref_func is not None:
 *             return
 *         self.known_objects[oid] = obj             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->known_objects == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 747, __pyx_L1_error)
  }
  if (unlikely(PyDict_SetItem(__pyx_v_self->known_objects, __pyx_v_oid, __pyx_v_obj) < 0)) __PYX_ERR(0, 747, __pyx_L1_error)

  /* "c_data_model_v2.pyx":744
 * 
 * 
 *     cdef void add_known_object(self, object oid, object obj):             # <<<<<<<<<<<<<<
 *         if self.resolve_ref_func is not None:
 *             return
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("c_data_model_v2.DecodeContext.add_known_object", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":750
 * 
 * 
 *     cdef void add_unsolved_ref(self, data):             # <<<<<<<<<<<<<<
 *         self.tmp_unsolved_ref.append(data)
 * 
 */

static void __pyx_f_15c_data_model_v2_13DecodeContext_add_unsolved_ref(struct __pyx_obj_15c_data_model_v2_DecodeContext *__pyx_v_self, PyObject *__pyx_v_data) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("add_unsolved_ref", 0);

  /* "c_data_model_v2.pyx":751
 * 
 *     cdef void add_unsolved_ref(self, data):
 *         self.tmp_unsolved_ref.append(data)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->tmp_unsolved_ref == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
    __PYX_ERR(0, 751, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_Append(__pyx_v_self->tmp_unsolved_ref, __pyx_v_data); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 751, __pyx_L1_error)

  /* "c_data_model_v2.pyx":750
 * 
 * 
 *     cdef void add_unsolved_ref(self, data):             # <<<<<<<<<<<<<<
 *         self.tmp_unsolved_ref.append(data)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("c_data_model_v2.DecodeContext.add_unsolved_ref", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":754
 * 
 * 
 *     cdef void resolve_ref(self):             # <<<<<<<<<<<<<<
 *         cdef object container
 *         resolve_ref_func = self.resolve_ref_func
 */

static void __pyx_f_15c_data_model_v2_13DecodeContext_resolve_ref(struct __pyx_obj_15c_data_model_v2_DecodeContext *__pyx_v_self) {
  PyObject *__pyx_v_container = 0;
  PyObject *__pyx_v_resolve_ref_func = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_v_known_objects = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  __Pyx_RefNannySetupContext("resolve_ref", 0);

  /* "c_data_model_v2.pyx":756
 *     cdef void resolve_ref(self):
 *         cdef object container
 *         resolve_ref_func = self.resolve_ref_func             # <<<<<<<<<<<<<<
 *         if resolve_ref_func is not None:
 *             for _, container, k, v in self.tmp_unsolved_ref:
 */
  __pyx_t_1 = __pyx_v_self->resolve_ref_func;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_resolve_ref_func = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":757
 *         cdef object container
 *         resolve_ref_func = self.resolve_ref_func
 *         if resolve_ref_func is not None:             # <<<<<<<<<<<<<<
 *             for _, container, k, v in self.tmp_unsolved_ref:
 *                 obj = resolve_ref_func(v)
 */
  __pyx_t_2 = (__pyx_v_resolve_ref_func != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":758
 *         resolve_ref_func = self.resolve_ref_func
 *         if resolve_ref_func is not None:
 *             for _, container, k, v in self.tmp_unsolved_ref:             # <<<<<<<<<<<<<<
 *                 obj = resolve_ref_func(v)
 *                 if obj is None:
 */
    if (unlikely(__pyx_v_self->tmp_unsolved_ref == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 758, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_v_self->tmp_unsolved_ref; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    for (;;) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 758, __pyx_L1_error)
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 758, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
        PyObject* sequence = __pyx_t_5;
        #if !CYTHON_COMPILING_IN_PYPY
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 4)) {
          if (size > 4) __Pyx_RaiseTooManyValuesError(4);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 758, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 2); 
          __pyx_t_9 = PyTuple_GET_ITEM(sequence, 3); 
        } else {
          __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 2); 
          __pyx_t_9 = PyList_GET_ITEM(sequence, 3); 
        }
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        #else
        {
          Py_ssize_t i;
          PyObject** temps[4] = {&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
          for (i=0; i < 4; i++) {
            PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 758, __pyx_L1_error)
            __Pyx_GOTREF(item);
            *(temps[i]) = item;
          }
        }
        #endif
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else {
        Py_ssize_t index = -1;
        PyObject** temps[4] = {&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
        __pyx_t_10 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 758, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
        for (index=0; index < 4; index++) {
          PyObject* item = __pyx_t_11(__pyx_t_10); if (unlikely(!item)) goto __pyx_L6_unpacking_failed;
          __Pyx_GOTREF(item);
          *(temps[index]) = item;
        }
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 4) < 0) __PYX_ERR(0, 758, __pyx_L1_error)
        __pyx_t_11 = NULL;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L7_unpacking_done;
        __pyx_L6_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_11 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 758, __pyx_L1_error)
        __pyx_L7_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_v_container, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "c_data_model_v2.pyx":759
 *         if resolve_ref_func is not None:
 *             for _, container, k, v in self.tmp_unsolved_ref:
 *                 obj = resolve_ref_func(v)             # <<<<<<<<<<<<<<
 *                 if obj is None:
 *                     self.unsolved_ref[v] = True
 */
      __Pyx_INCREF(__pyx_v_resolve_ref_func);
      __pyx_t_9 = __pyx_v_resolve_ref_func; __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      if (!__pyx_t_8) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_v); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 759, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_v};
          __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 759, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_GOTREF(__pyx_t_5);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_v};
          __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 759, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_GOTREF(__pyx_t_5);
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 759, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8); __pyx_t_8 = NULL;
          __Pyx_INCREF(__pyx_v_v);
          __Pyx_GIVEREF(__pyx_v_v);
          PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_v);
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 759, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF_SET(__pyx_v_obj, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "c_data_model_v2.pyx":760
 *             for _, container, k, v in self.tmp_unsolved_ref:
 *                 obj = resolve_ref_func(v)
 *                 if obj is None:             # <<<<<<<<<<<<<<
 *                     self.unsolved_ref[v] = True
 *                     continue
 */
      __pyx_t_3 = (__pyx_v_obj == Py_None);
      __pyx_t_2 = (__pyx_t_3 != 0);
      if (__pyx_t_2) {

        /* "c_data_model_v2.pyx":761
 *                 obj = resolve_ref_func(v)
 *                 if obj is None:
 *                     self.unsolved_ref[v] = True             # <<<<<<<<<<<<<<
 *                     continue
 *                 container[k] = obj
 */
        if (unlikely(__pyx_v_self->unsolved_ref == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 761, __pyx_L1_error)
        }
        if (unlikely(PyDict_SetItem(__pyx_v_self->unsolved_ref, __pyx_v_v, Py_True) < 0)) __PYX_ERR(0, 761, __pyx_L1_error)

        /* "c_data_model_v2.pyx":762
 *                 if obj is None:
 *                     self.unsolved_ref[v] = True
 *                     continue             # <<<<<<<<<<<<<<
 *                 container[k] = obj
 *         else:
 */
        goto __pyx_L4_continue;

        /* "c_data_model_v2.pyx":760
 *             for _, container, k, v in self.tmp_unsolved_ref:
 *                 obj = resolve_ref_func(v)
 *                 if obj is None:             # <<<<<<<<<<<<<<
 *                     self.unsolved_ref[v] = True
 *                     continue
 */
      }

      /* "c_data_model_v2.pyx":763
 *                     self.unsolved_ref[v] = True
 *                     continue
 *                 container[k] = obj             # <<<<<<<<<<<<<<
 *         else:
 *             known_objects = self.known_objects
 */
      if (unlikely(PyObject_SetItem(__pyx_v_container, __pyx_v_k, __pyx_v_obj) < 0)) __PYX_ERR(0, 763, __pyx_L1_error)

      /* "c_data_model_v2.pyx":758
 *         resolve_ref_func = self.resolve_ref_func
 *         if resolve_ref_func is not None:
 *             for _, container, k, v in self.tmp_unsolved_ref:             # <<<<<<<<<<<<<<
 *                 obj = resolve_ref_func(v)
 *                 if obj is None:
 */
      __pyx_L4_continue:;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "c_data_model_v2.pyx":757
 *         cdef object container
 *         resolve_ref_func = self.resolve_ref_func
 *         if resolve_ref_func is not None:             # <<<<<<<<<<<<<<
 *             for _, container, k, v in self.tmp_unsolved_ref:
 *                 obj = resolve_ref_func(v)
 */
    goto __pyx_L3;
  }

  /* "c_data_model_v2.pyx":765
 *                 container[k] = obj
 *         else:
 *             known_objects = self.known_objects             # <<<<<<<<<<<<<<
 *             for _, container, k, v in self.tmp_unsolved_ref:
 *                 obj = known_objects.get(v)
 */
  /*else*/ {
    __pyx_t_1 = __pyx_v_self->known_objects;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_known_objects = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "c_data_model_v2.pyx":766
 *         else:
 *             known_objects = self.known_objects
 *             for _, container, k, v in self.tmp_unsolved_ref:             # <<<<<<<<<<<<<<
 *                 obj = known_objects.get(v)
 *                 if obj is None:
 */
    if (unlikely(__pyx_v_self->tmp_unsolved_ref == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 766, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_v_self->tmp_unsolved_ref; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    for (;;) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 766, __pyx_L1_error)
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
        PyObject* sequence = __pyx_t_5;
        #if !CYTHON_COMPILING_IN_PYPY
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 4)) {
          if (size > 4) __Pyx_RaiseTooManyValuesError(4);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 766, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 2); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
        } else {
          __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 2); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
        }
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_6);
        #else
        {
          Py_ssize_t i;
          PyObject** temps[4] = {&__pyx_t_9,&__pyx_t_7,&__pyx_t_8,&__pyx_t_6};
          for (i=0; i < 4; i++) {
            PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 766, __pyx_L1_error)
            __Pyx_GOTREF(item);
            *(temps[i]) = item;
          }
        }
        #endif
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else {
        Py_ssize_t index = -1;
        PyObject** temps[4] = {&__pyx_t_9,&__pyx_t_7,&__pyx_t_8,&__pyx_t_6};
        __pyx_t_10 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 766, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
        for (index=0; index < 4; index++) {
          PyObject* item = __pyx_t_11(__pyx_t_10); if (unlikely(!item)) goto __pyx_L11_unpacking_failed;
          __Pyx_GOTREF(item);
          *(temps[index]) = item;
        }
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 4) < 0) __PYX_ERR(0, 766, __pyx_L1_error)
        __pyx_t_11 = NULL;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L12_unpacking_done;
        __pyx_L11_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_11 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 766, __pyx_L1_error)
        __pyx_L12_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_XDECREF_SET(__pyx_v_container, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "c_data_model_v2.pyx":767
 *             known_objects = self.known_objects
 *             for _, container, k, v in self.tmp_unsolved_ref:
 *                 obj = known_objects.get(v)             # <<<<<<<<<<<<<<
 *                 if obj is None:
 *                     self.unsolved_ref[v] = True
 */
      if (unlikely(__pyx_v_known_objects == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
        __PYX_ERR(0, 767, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_PyDict_GetItemDefault(__pyx_v_known_objects, __pyx_v_v, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 767, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_obj, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "c_data_model_v2.pyx":768
 *             for _, container, k, v in self.tmp_unsolved_ref:
 *                 obj = known_objects.get(v)
 *                 if obj is None:             # <<<<<<<<<<<<<<
 *                     self.unsolved_ref[v] = True
 *                     continue
 */
      __pyx_t_2 = (__pyx_v_obj == Py_None);
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (__pyx_t_3) {

        /* "c_data_model_v2.pyx":769
 *                 obj = known_objects.get(v)
 *                 if obj is None:
 *                     self.unsolved_ref[v] = True             # <<<<<<<<<<<<<<
 *                     continue
 *                 container[k] = obj
 */
        if (unlikely(__pyx_v_self->unsolved_ref == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 769, __pyx_L1_error)
        }
        if (unlikely(PyDict_SetItem(__pyx_v_self->unsolved_ref, __pyx_v_v, Py_True) < 0)) __PYX_ERR(0, 769, __pyx_L1_error)

        /* "c_data_model_v2.pyx":770
 *                 if obj is None:
 *                     self.unsolved_ref[v] = True
 *                     continue             # <<<<<<<<<<<<<<
 *                 container[k] = obj
 * 
 */
        goto __pyx_L9_continue;

        /* "c_data_model_v2.pyx":768
 *             for _, container, k, v in self.tmp_unsolved_ref:
 *                 obj = known_objects.get(v)
 *                 if obj is None:             # <<<<<<<<<<<<<<
 *                     self.unsolved_ref[v] = True
 *                     continue
 */
      }

      /* "c_data_model_v2.pyx":771
 *                     self.unsolved_ref[v] = True
 *                     continue
 *                 container[k] = obj             # <<<<<<<<<<<<<<
 * 
 * 
 */
      if (unlikely(PyObject_SetItem(__pyx_v_container, __pyx_v_k, __pyx_v_obj) < 0)) __PYX_ERR(0, 771, __pyx_L1_error)

      /* "c_data_model_v2.pyx":766
 *         else:
 *             known_objects = self.known_objects
 *             for _, container, k, v in self.tmp_unsolved_ref:             # <<<<<<<<<<<<<<
 *                 obj = known_objects.get(v)
 *                 if obj is None:
 */
      __pyx_L9_continue:;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "c_data_model_v2.pyx":754
 * 
 * 
 *     cdef void resolve_ref(self):             # <<<<<<<<<<<<<<
 *         cdef object container
 *         resolve_ref_func = self.resolve_ref_func
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("c_data_model_v2.DecodeContext.resolve_ref", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_container);
  __Pyx_XDECREF(__pyx_v_resolve_ref_func);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_known_objects);
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":779
 * 
 * 
 *     def __cinit__(self, *arg, **kwargs):             # <<<<<<<<<<<<<<
 *         list.__init__(self, *arg, **kwargs)
 *         self.changed = False
 */

/* Python wrapper */
static int __pyx_pw_15c_data_model_v2_5Array_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_15c_data_model_v2_5Array_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_arg = __pyx_args;
  __pyx_r = __pyx_pf_15c_data_model_v2_5Array___cinit__(((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_v_self), __pyx_v_arg, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15c_data_model_v2_5Array___cinit__(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "c_data_model_v2.pyx":780
 * 
 *     def __cinit__(self, *arg, **kwargs):
 *         list.__init__(self, *arg, **kwargs)             # <<<<<<<<<<<<<<
 *         self.changed = False
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyList_Type)), __pyx_n_s_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_v_arg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_v_kwargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":781
 *     def __cinit__(self, *arg, **kwargs):
 *         list.__init__(self, *arg, **kwargs)
 *         self.changed = False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->changed = 0;

  /* "c_data_model_v2.pyx":779
 * 
 * 
 *     def __cinit__(self, *arg, **kwargs):             # <<<<<<<<<<<<<<
 *         list.__init__(self, *arg, **kwargs)
 *         self.changed = False
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("c_data_model_v2.Array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":784
 * 
 * 
 *     cpdef bint _has_changed(self, recursive=False):             # <<<<<<<<<<<<<<
 *         if self.changed:
 *             return True
 */

static PyObject *__pyx_pw_15c_data_model_v2_5Array_3_has_changed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_15c_data_model_v2_5Array__has_changed(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_15c_data_model_v2_5Array__has_changed *__pyx_optional_args) {
  PyObject *__pyx_v_recursive = ((PyObject *)Py_False);
  PyObject *__pyx_v_value = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("_has_changed", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_recursive = __pyx_optional_args->recursive;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_has_changed); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_15c_data_model_v2_5Array_3_has_changed)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_recursive); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 784, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_recursive};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 784, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_recursive};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 784, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 784, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(__pyx_v_recursive);
          __Pyx_GIVEREF(__pyx_v_recursive);
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_recursive);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 784, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 784, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_6;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "c_data_model_v2.pyx":785
 * 
 *     cpdef bint _has_changed(self, recursive=False):
 *         if self.changed:             # <<<<<<<<<<<<<<
 *             return True
 *         if recursive:
 */
  __pyx_t_6 = (__pyx_v_self->changed != 0);
  if (__pyx_t_6) {

    /* "c_data_model_v2.pyx":786
 *     cpdef bint _has_changed(self, recursive=False):
 *         if self.changed:
 *             return True             # <<<<<<<<<<<<<<
 *         if recursive:
 *             for value in self:
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":785
 * 
 *     cpdef bint _has_changed(self, recursive=False):
 *         if self.changed:             # <<<<<<<<<<<<<<
 *             return True
 *         if recursive:
 */
  }

  /* "c_data_model_v2.pyx":787
 *         if self.changed:
 *             return True
 *         if recursive:             # <<<<<<<<<<<<<<
 *             for value in self:
 *                 if _container_item_has_changed(self.field, value, recursive):
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_recursive); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 787, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "c_data_model_v2.pyx":788
 *             return True
 *         if recursive:
 *             for value in self:             # <<<<<<<<<<<<<<
 *                 if _container_item_has_changed(self.field, value, recursive):
 *                     return True
 */
    if (likely(PyList_CheckExact(((PyObject *)__pyx_v_self))) || PyTuple_CheckExact(((PyObject *)__pyx_v_self))) {
      __pyx_t_1 = ((PyObject *)__pyx_v_self); __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 788, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 788, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 788, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 788, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 788, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 788, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_8(__pyx_t_1);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 788, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "c_data_model_v2.pyx":789
 *         if recursive:
 *             for value in self:
 *                 if _container_item_has_changed(self.field, value, recursive):             # <<<<<<<<<<<<<<
 *                     return True
 *         return False
 */
      __pyx_t_2 = ((PyObject *)__pyx_v_self->field);
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_recursive); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 789, __pyx_L1_error)
      __pyx_t_9 = (__pyx_f_15c_data_model_v2__container_item_has_changed(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_2), __pyx_v_value, __pyx_t_6) != 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_9) {

        /* "c_data_model_v2.pyx":790
 *             for value in self:
 *                 if _container_item_has_changed(self.field, value, recursive):
 *                     return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
        __pyx_r = 1;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;

        /* "c_data_model_v2.pyx":789
 *         if recursive:
 *             for value in self:
 *                 if _container_item_has_changed(self.field, value, recursive):             # <<<<<<<<<<<<<<
 *                     return True
 *         return False
 */
      }

      /* "c_data_model_v2.pyx":788
 *             return True
 *         if recursive:
 *             for value in self:             # <<<<<<<<<<<<<<
 *                 if _container_item_has_changed(self.field, value, recursive):
 *                     return True
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "c_data_model_v2.pyx":787
 *         if self.changed:
 *             return True
 *         if recursive:             # <<<<<<<<<<<<<<
 *             for value in self:
 *                 if _container_item_has_changed(self.field, value, recursive):
 */
  }

  /* "c_data_model_v2.pyx":791
 *                 if _container_item_has_changed(self.field, value, recursive):
 *                     return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":784
 * 
 * 
 *     cpdef bint _has_changed(self, recursive=False):             # <<<<<<<<<<<<<<
 *         if self.changed:
 *             return True
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("c_data_model_v2.Array._has_changed", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_5Array_3_has_changed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15c_data_model_v2_5Array_2_has_changed[] = "Array._has_changed(self, recursive=False) -> bool";
static PyObject *__pyx_pw_15c_data_model_v2_5Array_3_has_changed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_recursive = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_has_changed (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_recursive,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_recursive);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_has_changed") < 0)) __PYX_ERR(0, 784, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_recursive = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_has_changed", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 784, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.Array._has_changed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_5Array_2_has_changed(((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_v_self), __pyx_v_recursive);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_5Array_2_has_changed(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_recursive) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_opt_args_15c_data_model_v2_5Array__has_changed __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_has_changed", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.recursive = __pyx_v_recursive;
  __pyx_t_1 = __pyx_vtabptr_15c_data_model_v2_Array->_has_changed(__pyx_v_self, 1, &__pyx_t_2); 
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("c_data_model_v2.Array._has_changed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":794
 * 
 * 
 *     cdef void _clear_changed(self, bint recursive=False):             # <<<<<<<<<<<<<<
 *         self.changed = False
 *         if recursive:
 */

static void __pyx_f_15c_data_model_v2_5Array__clear_changed(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, struct __pyx_opt_args_15c_data_model_v2_5Array__clear_changed *__pyx_optional_args) {
  int __pyx_v_recursive = ((int)0);
  PyObject *__pyx_v_value = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("_clear_changed", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_recursive = __pyx_optional_args->recursive;
    }
  }

  /* "c_data_model_v2.pyx":795
 * 
 *     cdef void _clear_changed(self, bint recursive=False):
 *         self.changed = False             # <<<<<<<<<<<<<<
 *         if recursive:
 *             for value in self:
 */
  __pyx_v_self->changed = 0;

  /* "c_data_model_v2.pyx":796
 *     cdef void _clear_changed(self, bint recursive=False):
 *         self.changed = False
 *         if recursive:             # <<<<<<<<<<<<<<
 *             for value in self:
 *                 _container_item_clear_changed(self.field, value, recursive)
 */
  __pyx_t_1 = (__pyx_v_recursive != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":797
 *         self.changed = False
 *         if recursive:
 *             for value in self:             # <<<<<<<<<<<<<<
 *                 _container_item_clear_changed(self.field, value, recursive)
 * 
 */
    if (likely(PyList_CheckExact(((PyObject *)__pyx_v_self))) || PyTuple_CheckExact(((PyObject *)__pyx_v_self))) {
      __pyx_t_2 = ((PyObject *)__pyx_v_self); __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 797, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 797, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 797, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 797, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 797, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 797, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 797, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "c_data_model_v2.pyx":798
 *         if recursive:
 *             for value in self:
 *                 _container_item_clear_changed(self.field, value, recursive)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = ((PyObject *)__pyx_v_self->field);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_6 = __pyx_f_15c_data_model_v2__container_item_clear_changed(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_5), __pyx_v_value, __pyx_v_recursive); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 798, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "c_data_model_v2.pyx":797
 *         self.changed = False
 *         if recursive:
 *             for value in self:             # <<<<<<<<<<<<<<
 *                 _container_item_clear_changed(self.field, value, recursive)
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "c_data_model_v2.pyx":796
 *     cdef void _clear_changed(self, bint recursive=False):
 *         self.changed = False
 *         if recursive:             # <<<<<<<<<<<<<<
 *             for value in self:
 *                 _container_item_clear_changed(self.field, value, recursive)
 */
  }

  /* "c_data_model_v2.pyx":794
 * 
 * 
 *     cdef void _clear_changed(self, bint recursive=False):             # <<<<<<<<<<<<<<
 *         self.changed = False
 *         if recursive:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("c_data_model_v2.Array._clear_changed", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":801
 * 
 * 
 *     cdef void _broadcast_changed(self, bint recursive):             # <<<<<<<<<<<<<<
 *         for value in self:
 *             _container_item_set_changed(self.field, value, recursive)
 */

static void __pyx_f_15c_data_model_v2_5Array__broadcast_changed(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, int __pyx_v_recursive) {
  PyObject *__pyx_v_value = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_broadcast_changed", 0);

  /* "c_data_model_v2.pyx":802
 * 
 *     cdef void _broadcast_changed(self, bint recursive):
 *         for value in self:             # <<<<<<<<<<<<<<
 *             _container_item_set_changed(self.field, value, recursive)
 * 
 */
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_self))) || PyTuple_CheckExact(((PyObject *)__pyx_v_self))) {
    __pyx_t_1 = ((PyObject *)__pyx_v_self); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 802, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 802, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 802, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 802, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 802, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 802, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":803
 *     cdef void _broadcast_changed(self, bint recursive):
 *         for value in self:
 *             _container_item_set_changed(self.field, value, recursive)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_4 = ((PyObject *)__pyx_v_self->field);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_5 = __pyx_f_15c_data_model_v2__container_item_set_changed(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_4), __pyx_v_value, __pyx_v_recursive); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 803, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "c_data_model_v2.pyx":802
 * 
 *     cdef void _broadcast_changed(self, bint recursive):
 *         for value in self:             # <<<<<<<<<<<<<<
 *             _container_item_set_changed(self.field, value, recursive)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":801
 * 
 * 
 *     cdef void _broadcast_changed(self, bint recursive):             # <<<<<<<<<<<<<<
 *         for value in self:
 *             _container_item_set_changed(self.field, value, recursive)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("c_data_model_v2.Array._broadcast_changed", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":806
 * 
 * 
 *     cdef void _copy_from(self, object src):             # <<<<<<<<<<<<<<
 *         for x in src:
 *             list.append(self, x)
 */

static void __pyx_f_15c_data_model_v2_5Array__copy_from(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_src) {
  PyObject *__pyx_v_x = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("_copy_from", 0);

  /* "c_data_model_v2.pyx":807
 * 
 *     cdef void _copy_from(self, object src):
 *         for x in src:             # <<<<<<<<<<<<<<
 *             list.append(self, x)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_src)) || PyTuple_CheckExact(__pyx_v_src)) {
    __pyx_t_1 = __pyx_v_src; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_src); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 807, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 807, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 807, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 807, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 807, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 807, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 807, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":808
 *     cdef void _copy_from(self, object src):
 *         for x in src:
 *             list.append(self, x)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_TypeError, "descriptor '%s' requires a '%s' object but received a 'NoneType'", "append", "list");
      __PYX_ERR(0, 808, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyList_Append(((PyObject*)__pyx_v_self), __pyx_v_x); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 808, __pyx_L1_error)

    /* "c_data_model_v2.pyx":807
 * 
 *     cdef void _copy_from(self, object src):
 *         for x in src:             # <<<<<<<<<<<<<<
 *             list.append(self, x)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":806
 * 
 * 
 *     cdef void _copy_from(self, object src):             # <<<<<<<<<<<<<<
 *         for x in src:
 *             list.append(self, x)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("c_data_model_v2.Array._copy_from", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":811
 * 
 * 
 *     def __setitem__(self, k, v):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self._broadcast_changed(False)
 */

/* Python wrapper */
static int __pyx_pw_15c_data_model_v2_5Array_5__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_k, PyObject *__pyx_v_v); /*proto*/
static int __pyx_pw_15c_data_model_v2_5Array_5__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_k, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_5Array_4__setitem__(((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_v_self), ((PyObject *)__pyx_v_k), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15c_data_model_v2_5Array_4__setitem__(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_k, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "c_data_model_v2.pyx":812
 * 
 *     def __setitem__(self, k, v):
 *         self.changed = True             # <<<<<<<<<<<<<<
 *         self._broadcast_changed(False)
 *         list.__setitem__(self, k, v)
 */
  __pyx_v_self->changed = 1;

  /* "c_data_model_v2.pyx":813
 *     def __setitem__(self, k, v):
 *         self.changed = True
 *         self._broadcast_changed(False)             # <<<<<<<<<<<<<<
 *         list.__setitem__(self, k, v)
 * 
 */
  ((struct __pyx_vtabstruct_15c_data_model_v2_Array *)__pyx_v_self->__pyx_vtab)->_broadcast_changed(__pyx_v_self, 0);

  /* "c_data_model_v2.pyx":814
 *         self.changed = True
 *         self._broadcast_changed(False)
 *         list.__setitem__(self, k, v)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyList_Type)), __pyx_n_s_setitem); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_k, __pyx_v_v};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_k, __pyx_v_v};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_k);
    __Pyx_GIVEREF(__pyx_v_k);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_k);
    __Pyx_INCREF(__pyx_v_v);
    __Pyx_GIVEREF(__pyx_v_v);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_v);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":811
 * 
 * 
 *     def __setitem__(self, k, v):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self._broadcast_changed(False)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("c_data_model_v2.Array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":817
 * 
 * 
 *     def __delitem__(self, k):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self._broadcast_changed(False)
 */

/* Python wrapper */
static int __pyx_pw_15c_data_model_v2_5Array_7__delitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_k); /*proto*/
static int __pyx_pw_15c_data_model_v2_5Array_7__delitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_k) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__delitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_5Array_6__delitem__(((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_v_self), ((PyObject *)__pyx_v_k));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15c_data_model_v2_5Array_6__delitem__(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_k) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__delitem__", 0);

  /* "c_data_model_v2.pyx":818
 * 
 *     def __delitem__(self, k):
 *         self.changed = True             # <<<<<<<<<<<<<<
 *         self._broadcast_changed(False)
 *         list.__delitem__(self, k)
 */
  __pyx_v_self->changed = 1;

  /* "c_data_model_v2.pyx":819
 *     def __delitem__(self, k):
 *         self.changed = True
 *         self._broadcast_changed(False)             # <<<<<<<<<<<<<<
 *         list.__delitem__(self, k)
 * 
 */
  ((struct __pyx_vtabstruct_15c_data_model_v2_Array *)__pyx_v_self->__pyx_vtab)->_broadcast_changed(__pyx_v_self, 0);

  /* "c_data_model_v2.pyx":820
 *         self.changed = True
 *         self._broadcast_changed(False)
 *         list.__delitem__(self, k)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyList_Type)), __pyx_n_s_delitem); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_k};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_k};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_k);
    __Pyx_GIVEREF(__pyx_v_k);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_k);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":817
 * 
 * 
 *     def __delitem__(self, k):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self._broadcast_changed(False)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("c_data_model_v2.Array.__delitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":823
 * 
 * 
 *     def __iadd__(self, other):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self._broadcast_changed(False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_5Array_9__iadd__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_15c_data_model_v2_5Array_9__iadd__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iadd__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_5Array_8__iadd__(((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_5Array_8__iadd__(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__iadd__", 0);

  /* "c_data_model_v2.pyx":824
 * 
 *     def __iadd__(self, other):
 *         self.changed = True             # <<<<<<<<<<<<<<
 *         self._broadcast_changed(False)
 *         return list.__iadd__(self, other)
 */
  __pyx_v_self->changed = 1;

  /* "c_data_model_v2.pyx":825
 *     def __iadd__(self, other):
 *         self.changed = True
 *         self._broadcast_changed(False)             # <<<<<<<<<<<<<<
 *         return list.__iadd__(self, other)
 * 
 */
  ((struct __pyx_vtabstruct_15c_data_model_v2_Array *)__pyx_v_self->__pyx_vtab)->_broadcast_changed(__pyx_v_self, 0);

  /* "c_data_model_v2.pyx":826
 *         self.changed = True
 *         self._broadcast_changed(False)
 *         return list.__iadd__(self, other)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyList_Type)), __pyx_n_s_iadd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 826, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_other};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 826, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_other};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 826, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 826, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_other);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 826, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":823
 * 
 * 
 *     def __iadd__(self, other):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self._broadcast_changed(False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("c_data_model_v2.Array.__iadd__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":829
 * 
 * 
 *     def __imul__(self, other):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('unsupport')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_5Array_11__imul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_15c_data_model_v2_5Array_11__imul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__imul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_5Array_10__imul__(((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_5Array_10__imul__(CYTHON_UNUSED struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__imul__", 0);

  /* "c_data_model_v2.pyx":830
 * 
 *     def __imul__(self, other):
 *         raise NotImplementedError('unsupport')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 830, __pyx_L1_error)

  /* "c_data_model_v2.pyx":829
 * 
 * 
 *     def __imul__(self, other):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('unsupport')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.Array.__imul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":833
 * 
 * 
 *     def append(self, v):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self._broadcast_changed(False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_5Array_13append(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_15c_data_model_v2_5Array_12append[] = "Array.append(self, v)";
static PyObject *__pyx_pw_15c_data_model_v2_5Array_13append(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("append (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_5Array_12append(((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_5Array_12append(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("append", 0);

  /* "c_data_model_v2.pyx":834
 * 
 *     def append(self, v):
 *         self.changed = True             # <<<<<<<<<<<<<<
 *         self._broadcast_changed(False)
 *         return list.append(self, v)
 */
  __pyx_v_self->changed = 1;

  /* "c_data_model_v2.pyx":835
 *     def append(self, v):
 *         self.changed = True
 *         self._broadcast_changed(False)             # <<<<<<<<<<<<<<
 *         return list.append(self, v)
 * 
 */
  ((struct __pyx_vtabstruct_15c_data_model_v2_Array *)__pyx_v_self->__pyx_vtab)->_broadcast_changed(__pyx_v_self, 0);

  /* "c_data_model_v2.pyx":836
 *         self.changed = True
 *         self._broadcast_changed(False)
 *         return list.append(self, v)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "descriptor '%s' requires a '%s' object but received a 'NoneType'", "append", "list");
    __PYX_ERR(0, 836, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_Append(((PyObject*)__pyx_v_self), __pyx_v_v); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 836, __pyx_L1_error)
  __pyx_t_2 = __Pyx_Owned_Py_None(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":833
 * 
 * 
 *     def append(self, v):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self._broadcast_changed(False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("c_data_model_v2.Array.append", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":839
 * 
 * 
 *     cpdef void _append(self, v):             # <<<<<<<<<<<<<<
 *         list.append(self, v)
 * 
 */

static PyObject *__pyx_pw_15c_data_model_v2_5Array_15_append(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static void __pyx_f_15c_data_model_v2_5Array__append(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_v, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("_append", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_append); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 839, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_15c_data_model_v2_5Array_15_append)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_v); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 839, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_v};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 839, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_v};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 839, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 839, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(__pyx_v_v);
          __Pyx_GIVEREF(__pyx_v_v);
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_v);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 839, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "c_data_model_v2.pyx":840
 * 
 *     cpdef void _append(self, v):
 *         list.append(self, v)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "descriptor '%s' requires a '%s' object but received a 'NoneType'", "append", "list");
    __PYX_ERR(0, 840, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyList_Append(((PyObject*)__pyx_v_self), __pyx_v_v); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 840, __pyx_L1_error)

  /* "c_data_model_v2.pyx":839
 * 
 * 
 *     cpdef void _append(self, v):             # <<<<<<<<<<<<<<
 *         list.append(self, v)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("c_data_model_v2.Array._append", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_5Array_15_append(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_15c_data_model_v2_5Array_14_append[] = "Array._append(self, v) -> void";
static PyObject *__pyx_pw_15c_data_model_v2_5Array_15_append(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_append (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_5Array_14_append(((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_5Array_14_append(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_append", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_15c_data_model_v2_5Array__append(__pyx_v_self, __pyx_v_v, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.Array._append", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":843
 * 
 * 
 *     def extend(self, v):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self._broadcast_changed(False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_5Array_17extend(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_15c_data_model_v2_5Array_16extend[] = "Array.extend(self, v)";
static PyObject *__pyx_pw_15c_data_model_v2_5Array_17extend(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extend (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_5Array_16extend(((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_5Array_16extend(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("extend", 0);

  /* "c_data_model_v2.pyx":844
 * 
 *     def extend(self, v):
 *         self.changed = True             # <<<<<<<<<<<<<<
 *         self._broadcast_changed(False)
 *         return list.extend(self, v)
 */
  __pyx_v_self->changed = 1;

  /* "c_data_model_v2.pyx":845
 *     def extend(self, v):
 *         self.changed = True
 *         self._broadcast_changed(False)             # <<<<<<<<<<<<<<
 *         return list.extend(self, v)
 * 
 */
  ((struct __pyx_vtabstruct_15c_data_model_v2_Array *)__pyx_v_self->__pyx_vtab)->_broadcast_changed(__pyx_v_self, 0);

  /* "c_data_model_v2.pyx":846
 *         self.changed = True
 *         self._broadcast_changed(False)
 *         return list.extend(self, v)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "descriptor '%s' requires a '%s' object but received a 'NoneType'", "extend", "list");
    __PYX_ERR(0, 846, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_Extend(((PyObject*)__pyx_v_self), __pyx_v_v); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 846, __pyx_L1_error)
  __pyx_t_2 = __Pyx_Owned_Py_None(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":843
 * 
 * 
 *     def extend(self, v):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self._broadcast_changed(False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("c_data_model_v2.Array.extend", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":849
 * 
 * 
 *     def insert(self, k, v):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self._broadcast_changed(False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_5Array_19insert(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15c_data_model_v2_5Array_18insert[] = "Array.insert(self, k, v)";
static PyObject *__pyx_pw_15c_data_model_v2_5Array_19insert(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_v = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("insert (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_v,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert", 1, 2, 2, 1); __PYX_ERR(0, 849, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "insert") < 0)) __PYX_ERR(0, 849, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_k = values[0];
    __pyx_v_v = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("insert", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 849, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.Array.insert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_5Array_18insert(((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_v_self), __pyx_v_k, __pyx_v_v);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_5Array_18insert(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_k, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("insert", 0);

  /* "c_data_model_v2.pyx":850
 * 
 *     def insert(self, k, v):
 *         self.changed = True             # <<<<<<<<<<<<<<
 *         self._broadcast_changed(False)
 *         return list.insert(self, k, v)
 */
  __pyx_v_self->changed = 1;

  /* "c_data_model_v2.pyx":851
 *     def insert(self, k, v):
 *         self.changed = True
 *         self._broadcast_changed(False)             # <<<<<<<<<<<<<<
 *         return list.insert(self, k, v)
 * 
 */
  ((struct __pyx_vtabstruct_15c_data_model_v2_Array *)__pyx_v_self->__pyx_vtab)->_broadcast_changed(__pyx_v_self, 0);

  /* "c_data_model_v2.pyx":852
 *         self.changed = True
 *         self._broadcast_changed(False)
 *         return list.insert(self, k, v)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "descriptor '%s' requires a '%s' object but received a 'NoneType'", "insert", "list");
    __PYX_ERR(0, 852, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_k); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 852, __pyx_L1_error)
  __pyx_t_2 = PyList_Insert(((PyObject*)__pyx_v_self), __pyx_t_1, __pyx_v_v); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 852, __pyx_L1_error)
  __pyx_t_3 = __Pyx_Owned_Py_None(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":849
 * 
 * 
 *     def insert(self, k, v):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self._broadcast_changed(False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("c_data_model_v2.Array.insert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":855
 * 
 * 
 *     def pop(self, k=None):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self._broadcast_changed(False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_5Array_21pop(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15c_data_model_v2_5Array_20pop[] = "Array.pop(self, k=None)";
static PyObject *__pyx_pw_15c_data_model_v2_5Array_21pop(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_k);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pop") < 0)) __PYX_ERR(0, 855, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pop", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 855, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.Array.pop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_5Array_20pop(((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_v_self), __pyx_v_k);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_5Array_20pop(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("pop", 0);

  /* "c_data_model_v2.pyx":856
 * 
 *     def pop(self, k=None):
 *         self.changed = True             # <<<<<<<<<<<<<<
 *         self._broadcast_changed(False)
 *         if k is None:
 */
  __pyx_v_self->changed = 1;

  /* "c_data_model_v2.pyx":857
 *     def pop(self, k=None):
 *         self.changed = True
 *         self._broadcast_changed(False)             # <<<<<<<<<<<<<<
 *         if k is None:
 *             return list.pop(self)
 */
  ((struct __pyx_vtabstruct_15c_data_model_v2_Array *)__pyx_v_self->__pyx_vtab)->_broadcast_changed(__pyx_v_self, 0);

  /* "c_data_model_v2.pyx":858
 *         self.changed = True
 *         self._broadcast_changed(False)
 *         if k is None:             # <<<<<<<<<<<<<<
 *             return list.pop(self)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_k == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":859
 *         self._broadcast_changed(False)
 *         if k is None:
 *             return list.pop(self)             # <<<<<<<<<<<<<<
 *         else:
 *             return list.pop(self, k)
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "pop");
      __PYX_ERR(0, 859, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyList_Pop(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 859, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":858
 *         self.changed = True
 *         self._broadcast_changed(False)
 *         if k is None:             # <<<<<<<<<<<<<<
 *             return list.pop(self)
 *         else:
 */
  }

  /* "c_data_model_v2.pyx":861
 *             return list.pop(self)
 *         else:
 *             return list.pop(self, k)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "pop");
      __PYX_ERR(0, 861, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyIndex_AsSsize_t(__pyx_v_k); if (unlikely((__pyx_t_4 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 861, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyList_PopIndex(((PyObject *)__pyx_v_self), __pyx_v_k, __pyx_t_4, 1, Py_ssize_t, PyInt_FromSsize_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "c_data_model_v2.pyx":855
 * 
 * 
 *     def pop(self, k=None):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self._broadcast_changed(False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("c_data_model_v2.Array.pop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":864
 * 
 * 
 *     def remove(self, x):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self._broadcast_changed(False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_5Array_23remove(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static char __pyx_doc_15c_data_model_v2_5Array_22remove[] = "Array.remove(self, x)";
static PyObject *__pyx_pw_15c_data_model_v2_5Array_23remove(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_5Array_22remove(((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_5Array_22remove(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("remove", 0);

  /* "c_data_model_v2.pyx":865
 * 
 *     def remove(self, x):
 *         self.changed = True             # <<<<<<<<<<<<<<
 *         self._broadcast_changed(False)
 *         return list.remove(self, x)
 */
  __pyx_v_self->changed = 1;

  /* "c_data_model_v2.pyx":866
 *     def remove(self, x):
 *         self.changed = True
 *         self._broadcast_changed(False)             # <<<<<<<<<<<<<<
 *         return list.remove(self, x)
 * 
 */
  ((struct __pyx_vtabstruct_15c_data_model_v2_Array *)__pyx_v_self->__pyx_vtab)->_broadcast_changed(__pyx_v_self, 0);

  /* "c_data_model_v2.pyx":867
 *         self.changed = True
 *         self._broadcast_changed(False)
 *         return list.remove(self, x)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyList_Type)), __pyx_n_s_remove); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_x};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 867, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_x};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 867, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_x);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":864
 * 
 * 
 *     def remove(self, x):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self._broadcast_changed(False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("c_data_model_v2.Array.remove", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":870
 * 
 * 
 *     def sort(self, *arg, **kwargs):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self._broadcast_changed(False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_5Array_25sort(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15c_data_model_v2_5Array_24sort[] = "Array.sort(self, *arg, **kwargs)";
static PyObject *__pyx_pw_15c_data_model_v2_5Array_25sort(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sort (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "sort", 1))) return NULL;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return NULL;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_arg = __pyx_args;
  __pyx_r = __pyx_pf_15c_data_model_v2_5Array_24sort(((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_v_self), __pyx_v_arg, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_5Array_24sort(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("sort", 0);

  /* "c_data_model_v2.pyx":871
 * 
 *     def sort(self, *arg, **kwargs):
 *         self.changed = True             # <<<<<<<<<<<<<<
 *         self._broadcast_changed(False)
 *         return list.sort(self, *arg, **kwargs)
 */
  __pyx_v_self->changed = 1;

  /* "c_data_model_v2.pyx":872
 *     def sort(self, *arg, **kwargs):
 *         self.changed = True
 *         self._broadcast_changed(False)             # <<<<<<<<<<<<<<
 *         return list.sort(self, *arg, **kwargs)
 * 
 */
  ((struct __pyx_vtabstruct_15c_data_model_v2_Array *)__pyx_v_self->__pyx_vtab)->_broadcast_changed(__pyx_v_self, 0);

  /* "c_data_model_v2.pyx":873
 *         self.changed = True
 *         self._broadcast_changed(False)
 *         return list.sort(self, *arg, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def has_changed(self, bint recursive=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyList_Type)), __pyx_n_s_sort); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_v_arg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_v_kwargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":870
 * 
 * 
 *     def sort(self, *arg, **kwargs):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self._broadcast_changed(False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("c_data_model_v2.Array.sort", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":875
 *         return list.sort(self, *arg, **kwargs)
 * 
 *     def has_changed(self, bint recursive=False):             # <<<<<<<<<<<<<<
 *         return self._has_changed(recursive)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_5Array_27has_changed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15c_data_model_v2_5Array_26has_changed[] = "Array.has_changed(self, bool recursive=False)";
static PyObject *__pyx_pw_15c_data_model_v2_5Array_27has_changed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_recursive;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_changed (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_recursive,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_recursive);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "has_changed") < 0)) __PYX_ERR(0, 875, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_recursive = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_recursive == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 875, __pyx_L3_error)
    } else {
      __pyx_v_recursive = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("has_changed", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 875, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.Array.has_changed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_5Array_26has_changed(((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_v_self), __pyx_v_recursive);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_5Array_26has_changed(struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_self, int __pyx_v_recursive) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  struct __pyx_opt_args_15c_data_model_v2_5Array__has_changed __pyx_t_3;
  __Pyx_RefNannySetupContext("has_changed", 0);

  /* "c_data_model_v2.pyx":876
 * 
 *     def has_changed(self, bint recursive=False):
 *         return self._has_changed(recursive)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_recursive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.recursive = __pyx_t_1;
  __pyx_t_2 = ((struct __pyx_vtabstruct_15c_data_model_v2_Array *)__pyx_v_self->__pyx_vtab)->_has_changed(__pyx_v_self, 0, &__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":875
 *         return list.sort(self, *arg, **kwargs)
 * 
 *     def has_changed(self, bint recursive=False):             # <<<<<<<<<<<<<<
 *         return self._has_changed(recursive)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.Array.has_changed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":885
 * 
 * 
 *     def __cinit__(self, *arg, **kwargs):             # <<<<<<<<<<<<<<
 *         dict.__init__(self, *arg, **kwargs)
 *         self.removed = set()
 */

/* Python wrapper */
static int __pyx_pw_15c_data_model_v2_3Map_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_15c_data_model_v2_3Map_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_arg = __pyx_args;
  __pyx_r = __pyx_pf_15c_data_model_v2_3Map___cinit__(((struct __pyx_obj_15c_data_model_v2_Map *)__pyx_v_self), __pyx_v_arg, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15c_data_model_v2_3Map___cinit__(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "c_data_model_v2.pyx":886
 * 
 *     def __cinit__(self, *arg, **kwargs):
 *         dict.__init__(self, *arg, **kwargs)             # <<<<<<<<<<<<<<
 *         self.removed = set()
 *         self.changed = False
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyDict_Type)), __pyx_n_s_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_v_arg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_v_kwargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":887
 *     def __cinit__(self, *arg, **kwargs):
 *         dict.__init__(self, *arg, **kwargs)
 *         self.removed = set()             # <<<<<<<<<<<<<<
 *         self.changed = False
 * 
 */
  __pyx_t_2 = PySet_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->removed);
  __Pyx_DECREF(__pyx_v_self->removed);
  __pyx_v_self->removed = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":888
 *         dict.__init__(self, *arg, **kwargs)
 *         self.removed = set()
 *         self.changed = False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->changed = 0;

  /* "c_data_model_v2.pyx":885
 * 
 * 
 *     def __cinit__(self, *arg, **kwargs):             # <<<<<<<<<<<<<<
 *         dict.__init__(self, *arg, **kwargs)
 *         self.removed = set()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("c_data_model_v2.Map.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":891
 * 
 * 
 *     cpdef bint _has_changed(self, bint recursive=False):             # <<<<<<<<<<<<<<
 *         if self.changed:
 *             return self.changed
 */

static PyObject *__pyx_pw_15c_data_model_v2_3Map_3_has_changed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_15c_data_model_v2_3Map__has_changed(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_15c_data_model_v2_3Map__has_changed *__pyx_optional_args) {
  int __pyx_v_recursive = ((int)0);
  PyObject *__pyx_v_value = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("_has_changed", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_recursive = __pyx_optional_args->recursive;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_has_changed); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 891, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_15c_data_model_v2_3Map_3_has_changed)) {
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_recursive); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 891, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 891, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 891, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 891, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 891, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 891, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_7;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "c_data_model_v2.pyx":892
 * 
 *     cpdef bint _has_changed(self, bint recursive=False):
 *         if self.changed:             # <<<<<<<<<<<<<<
 *             return self.changed
 *         if recursive:
 */
  __pyx_t_7 = (__pyx_v_self->changed != 0);
  if (__pyx_t_7) {

    /* "c_data_model_v2.pyx":893
 *     cpdef bint _has_changed(self, bint recursive=False):
 *         if self.changed:
 *             return self.changed             # <<<<<<<<<<<<<<
 *         if recursive:
 *             for value in self.itervalues():
 */
    __pyx_r = __pyx_v_self->changed;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":892
 * 
 *     cpdef bint _has_changed(self, bint recursive=False):
 *         if self.changed:             # <<<<<<<<<<<<<<
 *             return self.changed
 *         if recursive:
 */
  }

  /* "c_data_model_v2.pyx":894
 *         if self.changed:
 *             return self.changed
 *         if recursive:             # <<<<<<<<<<<<<<
 *             for value in self.itervalues():
 *                 if _container_item_has_changed(self.field, value, recursive):
 */
  __pyx_t_7 = (__pyx_v_recursive != 0);
  if (__pyx_t_7) {

    /* "c_data_model_v2.pyx":895
 *             return self.changed
 *         if recursive:
 *             for value in self.itervalues():             # <<<<<<<<<<<<<<
 *                 if _container_item_has_changed(self.field, value, recursive):
 *                     return True
 */
    __pyx_t_8 = 0;
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "itervalues");
      __PYX_ERR(0, 895, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_dict_iterator(((PyObject *)__pyx_v_self), 0, __pyx_n_s_itervalues, (&__pyx_t_9), (&__pyx_t_10)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
    while (1) {
      __pyx_t_11 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_9, &__pyx_t_8, NULL, &__pyx_t_2, NULL, __pyx_t_10);
      if (unlikely(__pyx_t_11 == 0)) break;
      if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 895, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "c_data_model_v2.pyx":896
 *         if recursive:
 *             for value in self.itervalues():
 *                 if _container_item_has_changed(self.field, value, recursive):             # <<<<<<<<<<<<<<
 *                     return True
 *         return False
 */
      __pyx_t_2 = ((PyObject *)__pyx_v_self->field);
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_7 = (__pyx_f_15c_data_model_v2__container_item_has_changed(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_2), __pyx_v_value, __pyx_v_recursive) != 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_7) {

        /* "c_data_model_v2.pyx":897
 *             for value in self.itervalues():
 *                 if _container_item_has_changed(self.field, value, recursive):
 *                     return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
        __pyx_r = 1;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;

        /* "c_data_model_v2.pyx":896
 *         if recursive:
 *             for value in self.itervalues():
 *                 if _container_item_has_changed(self.field, value, recursive):             # <<<<<<<<<<<<<<
 *                     return True
 *         return False
 */
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "c_data_model_v2.pyx":894
 *         if self.changed:
 *             return self.changed
 *         if recursive:             # <<<<<<<<<<<<<<
 *             for value in self.itervalues():
 *                 if _container_item_has_changed(self.field, value, recursive):
 */
  }

  /* "c_data_model_v2.pyx":898
 *                 if _container_item_has_changed(self.field, value, recursive):
 *                     return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":891
 * 
 * 
 *     cpdef bint _has_changed(self, bint recursive=False):             # <<<<<<<<<<<<<<
 *         if self.changed:
 *             return self.changed
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("c_data_model_v2.Map._has_changed", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_3Map_3_has_changed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15c_data_model_v2_3Map_2_has_changed[] = "Map._has_changed(self, bool recursive=False) -> bool";
static PyObject *__pyx_pw_15c_data_model_v2_3Map_3_has_changed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_recursive;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_has_changed (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_recursive,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_recursive);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_has_changed") < 0)) __PYX_ERR(0, 891, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_recursive = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_recursive == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 891, __pyx_L3_error)
    } else {
      __pyx_v_recursive = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_has_changed", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 891, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.Map._has_changed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_3Map_2_has_changed(((struct __pyx_obj_15c_data_model_v2_Map *)__pyx_v_self), __pyx_v_recursive);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_3Map_2_has_changed(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, int __pyx_v_recursive) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_opt_args_15c_data_model_v2_3Map__has_changed __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_has_changed", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.recursive = __pyx_v_recursive;
  __pyx_t_1 = __pyx_vtabptr_15c_data_model_v2_Map->_has_changed(__pyx_v_self, 1, &__pyx_t_2); 
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("c_data_model_v2.Map._has_changed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":901
 * 
 * 
 *     cdef inline set get_removed_set(self):             # <<<<<<<<<<<<<<
 *         return self.removed
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_15c_data_model_v2_3Map_get_removed_set(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_removed_set", 0);

  /* "c_data_model_v2.pyx":902
 * 
 *     cdef inline set get_removed_set(self):
 *         return self.removed             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->removed);
  __pyx_r = __pyx_v_self->removed;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":901
 * 
 * 
 *     cdef inline set get_removed_set(self):             # <<<<<<<<<<<<<<
 *         return self.removed
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":905
 * 
 * 
 *     cdef inline void _clear_changed(self, bint recursive=False):             # <<<<<<<<<<<<<<
 *         self.changed = False
 *         self.removed.clear()
 */

static CYTHON_INLINE void __pyx_f_15c_data_model_v2_3Map__clear_changed(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, struct __pyx_opt_args_15c_data_model_v2_3Map__clear_changed *__pyx_optional_args) {
  int __pyx_v_recursive = ((int)0);
  PyObject *__pyx_v_value = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("_clear_changed", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_recursive = __pyx_optional_args->recursive;
    }
  }

  /* "c_data_model_v2.pyx":906
 * 
 *     cdef inline void _clear_changed(self, bint recursive=False):
 *         self.changed = False             # <<<<<<<<<<<<<<
 *         self.removed.clear()
 *         if recursive:
 */
  __pyx_v_self->changed = 0;

  /* "c_data_model_v2.pyx":907
 *     cdef inline void _clear_changed(self, bint recursive=False):
 *         self.changed = False
 *         self.removed.clear()             # <<<<<<<<<<<<<<
 *         if recursive:
 *             for value in self.itervalues():
 */
  if (unlikely(__pyx_v_self->removed == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "clear");
    __PYX_ERR(0, 907, __pyx_L1_error)
  }
  __pyx_t_1 = PySet_Clear(__pyx_v_self->removed); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 907, __pyx_L1_error)

  /* "c_data_model_v2.pyx":908
 *         self.changed = False
 *         self.removed.clear()
 *         if recursive:             # <<<<<<<<<<<<<<
 *             for value in self.itervalues():
 *                 _container_item_clear_changed(self.field, value, recursive)
 */
  __pyx_t_2 = (__pyx_v_recursive != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":909
 *         self.removed.clear()
 *         if recursive:
 *             for value in self.itervalues():             # <<<<<<<<<<<<<<
 *                 _container_item_clear_changed(self.field, value, recursive)
 * 
 */
    __pyx_t_4 = 0;
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "itervalues");
      __PYX_ERR(0, 909, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_dict_iterator(((PyObject *)__pyx_v_self), 0, __pyx_n_s_itervalues, (&__pyx_t_5), (&__pyx_t_6)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 909, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;
    while (1) {
      __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_5, &__pyx_t_4, NULL, &__pyx_t_7, NULL, __pyx_t_6);
      if (unlikely(__pyx_t_8 == 0)) break;
      if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 909, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "c_data_model_v2.pyx":910
 *         if recursive:
 *             for value in self.itervalues():
 *                 _container_item_clear_changed(self.field, value, recursive)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_7 = ((PyObject *)__pyx_v_self->field);
      __Pyx_INCREF(__pyx_t_7);
      __pyx_t_9 = __pyx_f_15c_data_model_v2__container_item_clear_changed(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_7), __pyx_v_value, __pyx_v_recursive); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 910, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "c_data_model_v2.pyx":908
 *         self.changed = False
 *         self.removed.clear()
 *         if recursive:             # <<<<<<<<<<<<<<
 *             for value in self.itervalues():
 *                 _container_item_clear_changed(self.field, value, recursive)
 */
  }

  /* "c_data_model_v2.pyx":905
 * 
 * 
 *     cdef inline void _clear_changed(self, bint recursive=False):             # <<<<<<<<<<<<<<
 *         self.changed = False
 *         self.removed.clear()
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("c_data_model_v2.Map._clear_changed", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":913
 * 
 * 
 *     cdef void _broadcast_changed(self, bint recursive):             # <<<<<<<<<<<<<<
 *         for v in self.itervalues():
 *             _container_item_set_changed(self.field, v, recursive)
 */

static void __pyx_f_15c_data_model_v2_3Map__broadcast_changed(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, int __pyx_v_recursive) {
  PyObject *__pyx_v_v = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("_broadcast_changed", 0);

  /* "c_data_model_v2.pyx":914
 * 
 *     cdef void _broadcast_changed(self, bint recursive):
 *         for v in self.itervalues():             # <<<<<<<<<<<<<<
 *             _container_item_set_changed(self.field, v, recursive)
 * 
 */
  __pyx_t_2 = 0;
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "itervalues");
    __PYX_ERR(0, 914, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(((PyObject *)__pyx_v_self), 0, __pyx_n_s_itervalues, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_6 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, NULL, &__pyx_t_5, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_6 == 0)) break;
    if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "c_data_model_v2.pyx":915
 *     cdef void _broadcast_changed(self, bint recursive):
 *         for v in self.itervalues():
 *             _container_item_set_changed(self.field, v, recursive)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_5 = ((PyObject *)__pyx_v_self->field);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_7 = __pyx_f_15c_data_model_v2__container_item_set_changed(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_5), __pyx_v_v, __pyx_v_recursive); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 915, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":913
 * 
 * 
 *     cdef void _broadcast_changed(self, bint recursive):             # <<<<<<<<<<<<<<
 *         for v in self.itervalues():
 *             _container_item_set_changed(self.field, v, recursive)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("c_data_model_v2.Map._broadcast_changed", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":918
 * 
 * 
 *     def __setitem__(self, k, v):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         _container_item_set_changed(self.field, v, False)
 */

/* Python wrapper */
static int __pyx_pw_15c_data_model_v2_3Map_5__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_k, PyObject *__pyx_v_v); /*proto*/
static int __pyx_pw_15c_data_model_v2_3Map_5__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_k, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_3Map_4__setitem__(((struct __pyx_obj_15c_data_model_v2_Map *)__pyx_v_self), ((PyObject *)__pyx_v_k), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15c_data_model_v2_3Map_4__setitem__(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, PyObject *__pyx_v_k, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "c_data_model_v2.pyx":919
 * 
 *     def __setitem__(self, k, v):
 *         self.changed = True             # <<<<<<<<<<<<<<
 *         _container_item_set_changed(self.field, v, False)
 *         dict.__setitem__(self, k, v)
 */
  __pyx_v_self->changed = 1;

  /* "c_data_model_v2.pyx":920
 *     def __setitem__(self, k, v):
 *         self.changed = True
 *         _container_item_set_changed(self.field, v, False)             # <<<<<<<<<<<<<<
 *         dict.__setitem__(self, k, v)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->field);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_15c_data_model_v2__container_item_set_changed(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_1), __pyx_v_v, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":921
 *         self.changed = True
 *         _container_item_set_changed(self.field, v, False)
 *         dict.__setitem__(self, k, v)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyDict_Type)), __pyx_n_s_setitem); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_k, __pyx_v_v};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 921, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_k, __pyx_v_v};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 921, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 921, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_k);
    __Pyx_GIVEREF(__pyx_v_k);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_k);
    __Pyx_INCREF(__pyx_v_v);
    __Pyx_GIVEREF(__pyx_v_v);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_v);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 921, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":918
 * 
 * 
 *     def __setitem__(self, k, v):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         _container_item_set_changed(self.field, v, False)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("c_data_model_v2.Map.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":924
 * 
 * 
 *     def __delitem__(self, k):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self.removed.add(k)
 */

/* Python wrapper */
static int __pyx_pw_15c_data_model_v2_3Map_7__delitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_k); /*proto*/
static int __pyx_pw_15c_data_model_v2_3Map_7__delitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_k) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__delitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_3Map_6__delitem__(((struct __pyx_obj_15c_data_model_v2_Map *)__pyx_v_self), ((PyObject *)__pyx_v_k));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15c_data_model_v2_3Map_6__delitem__(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, PyObject *__pyx_v_k) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__delitem__", 0);

  /* "c_data_model_v2.pyx":925
 * 
 *     def __delitem__(self, k):
 *         self.changed = True             # <<<<<<<<<<<<<<
 *         self.removed.add(k)
 *         dict.__delitem__(self, k)
 */
  __pyx_v_self->changed = 1;

  /* "c_data_model_v2.pyx":926
 *     def __delitem__(self, k):
 *         self.changed = True
 *         self.removed.add(k)             # <<<<<<<<<<<<<<
 *         dict.__delitem__(self, k)
 * 
 */
  if (unlikely(__pyx_v_self->removed == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "add");
    __PYX_ERR(0, 926, __pyx_L1_error)
  }
  __pyx_t_1 = PySet_Add(__pyx_v_self->removed, __pyx_v_k); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 926, __pyx_L1_error)

  /* "c_data_model_v2.pyx":927
 *         self.changed = True
 *         self.removed.add(k)
 *         dict.__delitem__(self, k)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyDict_Type)), __pyx_n_s_delitem); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_self), __pyx_v_k};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 927, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_self), __pyx_v_k};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 927, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 927, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_k);
    __Pyx_GIVEREF(__pyx_v_k);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_k);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 927, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":924
 * 
 * 
 *     def __delitem__(self, k):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self.removed.add(k)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("c_data_model_v2.Map.__delitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":930
 * 
 * 
 *     cdef void _raw_setitem(self, k, v):             # <<<<<<<<<<<<<<
 *         dict.__setitem__(self, k, v)
 * 
 */

static void __pyx_f_15c_data_model_v2_3Map__raw_setitem(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, PyObject *__pyx_v_k, PyObject *__pyx_v_v) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_raw_setitem", 0);

  /* "c_data_model_v2.pyx":931
 * 
 *     cdef void _raw_setitem(self, k, v):
 *         dict.__setitem__(self, k, v)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyDict_Type)), __pyx_n_s_setitem); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_k, __pyx_v_v};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_k, __pyx_v_v};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_k);
    __Pyx_GIVEREF(__pyx_v_k);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_k);
    __Pyx_INCREF(__pyx_v_v);
    __Pyx_GIVEREF(__pyx_v_v);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_v);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":930
 * 
 * 
 *     cdef void _raw_setitem(self, k, v):             # <<<<<<<<<<<<<<
 *         dict.__setitem__(self, k, v)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("c_data_model_v2.Map._raw_setitem", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":934
 * 
 * 
 *     cdef void _copy_from(self, object src):             # <<<<<<<<<<<<<<
 *         dict.update(self, src)
 * 
 */

static void __pyx_f_15c_data_model_v2_3Map__copy_from(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, PyObject *__pyx_v_src) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_copy_from", 0);

  /* "c_data_model_v2.pyx":935
 * 
 *     cdef void _copy_from(self, object src):
 *         dict.update(self, src)             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyDict_Type)), __pyx_n_s_update); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_src};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 935, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_src};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 935, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 935, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_src);
    __Pyx_GIVEREF(__pyx_v_src);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_src);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 935, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":934
 * 
 * 
 *     cdef void _copy_from(self, object src):             # <<<<<<<<<<<<<<
 *         dict.update(self, src)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("c_data_model_v2.Map._copy_from", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":937
 *         dict.update(self, src)
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self.removed.update(self.iterkeys())
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_3Map_9clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_15c_data_model_v2_3Map_8clear[] = "Map.clear(self)";
static PyObject *__pyx_pw_15c_data_model_v2_3Map_9clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_3Map_8clear(((struct __pyx_obj_15c_data_model_v2_Map *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_3Map_8clear(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("clear", 0);

  /* "c_data_model_v2.pyx":938
 * 
 *     def clear(self):
 *         self.changed = True             # <<<<<<<<<<<<<<
 *         self.removed.update(self.iterkeys())
 *         return dict.clear(self)
 */
  __pyx_v_self->changed = 1;

  /* "c_data_model_v2.pyx":939
 *     def clear(self):
 *         self.changed = True
 *         self.removed.update(self.iterkeys())             # <<<<<<<<<<<<<<
 *         return dict.clear(self)
 * 
 */
  if (unlikely(__pyx_v_self->removed == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "update");
    __PYX_ERR(0, 939, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iterkeys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 939, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 939, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PySet_Update(__pyx_v_self->removed, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":940
 *         self.changed = True
 *         self.removed.update(self.iterkeys())
 *         return dict.clear(self)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "descriptor '%s' requires a '%s' object but received a 'NoneType'", "clear", "dict");
    __PYX_ERR(0, 940, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyDict_Clear(((PyObject*)__pyx_v_self)); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 940, __pyx_L1_error)
  __pyx_t_1 = __Pyx_Owned_Py_None(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":937
 *         dict.update(self, src)
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self.removed.update(self.iterkeys())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("c_data_model_v2.Map.clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":943
 * 
 * 
 *     def pop(self, key, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self.removed.add(key)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_3Map_11pop(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15c_data_model_v2_3Map_10pop[] = "Map.pop(self, key, *args, **kwargs)";
static PyObject *__pyx_pw_15c_data_model_v2_3Map_11pop(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "pop") < 0)) __PYX_ERR(0, 943, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_key = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pop", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 943, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("c_data_model_v2.Map.pop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_3Map_10pop(((struct __pyx_obj_15c_data_model_v2_Map *)__pyx_v_self), __pyx_v_key, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_3Map_10pop(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("pop", 0);

  /* "c_data_model_v2.pyx":944
 * 
 *     def pop(self, key, *args, **kwargs):
 *         self.changed = True             # <<<<<<<<<<<<<<
 *         self.removed.add(key)
 *         return dict.pop(self, key, *args, **kwargs)
 */
  __pyx_v_self->changed = 1;

  /* "c_data_model_v2.pyx":945
 *     def pop(self, key, *args, **kwargs):
 *         self.changed = True
 *         self.removed.add(key)             # <<<<<<<<<<<<<<
 *         return dict.pop(self, key, *args, **kwargs)
 * 
 */
  if (unlikely(__pyx_v_self->removed == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "add");
    __PYX_ERR(0, 945, __pyx_L1_error)
  }
  __pyx_t_1 = PySet_Add(__pyx_v_self->removed, __pyx_v_key); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 945, __pyx_L1_error)

  /* "c_data_model_v2.pyx":946
 *         self.changed = True
 *         self.removed.add(key)
 *         return dict.pop(self, key, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyDict_Type)), __pyx_n_s_pop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_INCREF(__pyx_v_key);
  __Pyx_GIVEREF(__pyx_v_key);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_key);
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":943
 * 
 * 
 *     def pop(self, key, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self.removed.add(key)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("c_data_model_v2.Map.pop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":949
 * 
 * 
 *     def popitem(self):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         key, value = dict.popitem(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_3Map_13popitem(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_15c_data_model_v2_3Map_12popitem[] = "Map.popitem(self)";
static PyObject *__pyx_pw_15c_data_model_v2_3Map_13popitem(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("popitem (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_3Map_12popitem(((struct __pyx_obj_15c_data_model_v2_Map *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_3Map_12popitem(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("popitem", 0);

  /* "c_data_model_v2.pyx":950
 * 
 *     def popitem(self):
 *         self.changed = True             # <<<<<<<<<<<<<<
 *         key, value = dict.popitem(self)
 *         self.removed.add(key)
 */
  __pyx_v_self->changed = 1;

  /* "c_data_model_v2.pyx":951
 *     def popitem(self):
 *         self.changed = True
 *         key, value = dict.popitem(self)             # <<<<<<<<<<<<<<
 *         self.removed.add(key)
 *         return (key, value)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyDict_Type)), __pyx_n_s_popitem); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 951, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 951, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 951, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 951, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, ((PyObject *)__pyx_v_self));
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 951, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 951, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 951, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 951, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 951, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_4 = __pyx_t_5(__pyx_t_3); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_3), 2) < 0) __PYX_ERR(0, 951, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 951, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_key = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_value = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "c_data_model_v2.pyx":952
 *         self.changed = True
 *         key, value = dict.popitem(self)
 *         self.removed.add(key)             # <<<<<<<<<<<<<<
 *         return (key, value)
 * 
 */
  if (unlikely(__pyx_v_self->removed == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "add");
    __PYX_ERR(0, 952, __pyx_L1_error)
  }
  __pyx_t_6 = PySet_Add(__pyx_v_self->removed, __pyx_v_key); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 952, __pyx_L1_error)

  /* "c_data_model_v2.pyx":953
 *         key, value = dict.popitem(self)
 *         self.removed.add(key)
 *         return (key, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_key);
  __Pyx_GIVEREF(__pyx_v_key);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_key);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_value);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":949
 * 
 * 
 *     def popitem(self):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         key, value = dict.popitem(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("c_data_model_v2.Map.popitem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":956
 * 
 * 
 *     def setdefault(self, key, default=None):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         if default is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_3Map_15setdefault(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15c_data_model_v2_3Map_14setdefault[] = "Map.setdefault(self, key, default=None)";
static PyObject *__pyx_pw_15c_data_model_v2_3Map_15setdefault(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_default = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setdefault (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_default,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_default);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setdefault") < 0)) __PYX_ERR(0, 956, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = values[0];
    __pyx_v_default = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setdefault", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 956, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.Map.setdefault", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_3Map_14setdefault(((struct __pyx_obj_15c_data_model_v2_Map *)__pyx_v_self), __pyx_v_key, __pyx_v_default);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_3Map_14setdefault(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_default) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("setdefault", 0);
  __Pyx_INCREF(__pyx_v_default);

  /* "c_data_model_v2.pyx":957
 * 
 *     def setdefault(self, key, default=None):
 *         self.changed = True             # <<<<<<<<<<<<<<
 *         if default is None:
 *             default = _create_object(self.field, None)
 */
  __pyx_v_self->changed = 1;

  /* "c_data_model_v2.pyx":958
 *     def setdefault(self, key, default=None):
 *         self.changed = True
 *         if default is None:             # <<<<<<<<<<<<<<
 *             default = _create_object(self.field, None)
 *         return dict.setdefault(self, key, default)
 */
  __pyx_t_1 = (__pyx_v_default == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":959
 *         self.changed = True
 *         if default is None:
 *             default = _create_object(self.field, None)             # <<<<<<<<<<<<<<
 *         return dict.setdefault(self, key, default)
 * 
 */
    __pyx_t_3 = ((PyObject *)__pyx_v_self->field);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = __pyx_f_15c_data_model_v2__create_object(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_3), ((PyObject*)Py_None)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 959, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_default, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":958
 *     def setdefault(self, key, default=None):
 *         self.changed = True
 *         if default is None:             # <<<<<<<<<<<<<<
 *             default = _create_object(self.field, None)
 *         return dict.setdefault(self, key, default)
 */
  }

  /* "c_data_model_v2.pyx":960
 *         if default is None:
 *             default = _create_object(self.field, None)
 *         return dict.setdefault(self, key, default)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "descriptor '%s' requires a '%s' object but received a 'NoneType'", "setdefault", "dict");
    __PYX_ERR(0, 960, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyDict_SetDefault(((PyObject *)__pyx_v_self), __pyx_v_key, __pyx_v_default, -1L); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":956
 * 
 * 
 *     def setdefault(self, key, default=None):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         if default is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("c_data_model_v2.Map.setdefault", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_default);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":963
 * 
 * 
 *     def update(self, *arg, **kwargs):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self._broadcast_changed(False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_3Map_17update(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15c_data_model_v2_3Map_16update[] = "Map.update(self, *arg, **kwargs)";
static PyObject *__pyx_pw_15c_data_model_v2_3Map_17update(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "update", 1))) return NULL;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return NULL;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_arg = __pyx_args;
  __pyx_r = __pyx_pf_15c_data_model_v2_3Map_16update(((struct __pyx_obj_15c_data_model_v2_Map *)__pyx_v_self), __pyx_v_arg, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_3Map_16update(struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("update", 0);

  /* "c_data_model_v2.pyx":964
 * 
 *     def update(self, *arg, **kwargs):
 *         self.changed = True             # <<<<<<<<<<<<<<
 *         self._broadcast_changed(False)
 *         return dict.update(self, *arg, **kwargs)
 */
  __pyx_v_self->changed = 1;

  /* "c_data_model_v2.pyx":965
 *     def update(self, *arg, **kwargs):
 *         self.changed = True
 *         self._broadcast_changed(False)             # <<<<<<<<<<<<<<
 *         return dict.update(self, *arg, **kwargs)
 * 
 */
  ((struct __pyx_vtabstruct_15c_data_model_v2_Map *)__pyx_v_self->__pyx_vtab)->_broadcast_changed(__pyx_v_self, 0);

  /* "c_data_model_v2.pyx":966
 *         self.changed = True
 *         self._broadcast_changed(False)
 *         return dict.update(self, *arg, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyDict_Type)), __pyx_n_s_update); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_v_arg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_v_kwargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":963
 * 
 * 
 *     def update(self, *arg, **kwargs):             # <<<<<<<<<<<<<<
 *         self.changed = True
 *         self._broadcast_changed(False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("c_data_model_v2.Map.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":971
 * 
 * cdef class IdMap(Map):
 *     def add(self, obj):             # <<<<<<<<<<<<<<
 *         self[obj.oid] = obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_5IdMap_1add(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static char __pyx_doc_15c_data_model_v2_5IdMap_add[] = "IdMap.add(self, obj)";
static PyObject *__pyx_pw_15c_data_model_v2_5IdMap_1add(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_5IdMap_add(((struct __pyx_obj_15c_data_model_v2_IdMap *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_5IdMap_add(struct __pyx_obj_15c_data_model_v2_IdMap *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("add", 0);

  /* "c_data_model_v2.pyx":972
 * cdef class IdMap(Map):
 *     def add(self, obj):
 *         self[obj.oid] = obj             # <<<<<<<<<<<<<<
 * 
 *     def remove(self, obj):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_oid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self), __pyx_t_1, __pyx_v_obj) < 0)) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":971
 * 
 * cdef class IdMap(Map):
 *     def add(self, obj):             # <<<<<<<<<<<<<<
 *         self[obj.oid] = obj
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.IdMap.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":974
 *         self[obj.oid] = obj
 * 
 *     def remove(self, obj):             # <<<<<<<<<<<<<<
 *         key = obj.oid
 *         self.removed.add(key)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_5IdMap_3remove(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static char __pyx_doc_15c_data_model_v2_5IdMap_2remove[] = "IdMap.remove(self, obj)";
static PyObject *__pyx_pw_15c_data_model_v2_5IdMap_3remove(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_5IdMap_2remove(((struct __pyx_obj_15c_data_model_v2_IdMap *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_5IdMap_2remove(struct __pyx_obj_15c_data_model_v2_IdMap *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("remove", 0);

  /* "c_data_model_v2.pyx":975
 * 
 *     def remove(self, obj):
 *         key = obj.oid             # <<<<<<<<<<<<<<
 *         self.removed.add(key)
 *         del self[key]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_oid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_key = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":976
 *     def remove(self, obj):
 *         key = obj.oid
 *         self.removed.add(key)             # <<<<<<<<<<<<<<
 *         del self[key]
 * 
 */
  if (unlikely(__pyx_v_self->__pyx_base.removed == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "add");
    __PYX_ERR(0, 976, __pyx_L1_error)
  }
  __pyx_t_2 = PySet_Add(__pyx_v_self->__pyx_base.removed, __pyx_v_key); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 976, __pyx_L1_error)

  /* "c_data_model_v2.pyx":977
 *         key = obj.oid
 *         self.removed.add(key)
 *         del self[key]             # <<<<<<<<<<<<<<
 * 
 *     def has(self, obj):
 */
  if (unlikely(PyObject_DelItem(((PyObject *)__pyx_v_self), __pyx_v_key) < 0)) __PYX_ERR(0, 977, __pyx_L1_error)

  /* "c_data_model_v2.pyx":974
 *         self[obj.oid] = obj
 * 
 *     def remove(self, obj):             # <<<<<<<<<<<<<<
 *         key = obj.oid
 *         self.removed.add(key)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.IdMap.remove", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":979
 *         del self[key]
 * 
 *     def has(self, obj):             # <<<<<<<<<<<<<<
 *         return obj.oid in self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_5IdMap_5has(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static char __pyx_doc_15c_data_model_v2_5IdMap_4has[] = "IdMap.has(self, obj)";
static PyObject *__pyx_pw_15c_data_model_v2_5IdMap_5has(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_5IdMap_4has(((struct __pyx_obj_15c_data_model_v2_IdMap *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_5IdMap_4has(struct __pyx_obj_15c_data_model_v2_IdMap *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("has", 0);

  /* "c_data_model_v2.pyx":980
 * 
 *     def has(self, obj):
 *         return obj.oid in self             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_oid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, ((PyObject *)__pyx_v_self), Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":979
 *         del self[key]
 * 
 *     def has(self, obj):             # <<<<<<<<<<<<<<
 *         return obj.oid in self
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.IdMap.has", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":983
 * 
 * 
 * cdef Array _new_array(Field field):             # <<<<<<<<<<<<<<
 *     cdef Array v = Array()
 *     v.field = field
 */

static struct __pyx_obj_15c_data_model_v2_Array *__pyx_f_15c_data_model_v2__new_array(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  struct __pyx_obj_15c_data_model_v2_Array *__pyx_v_v = 0;
  struct __pyx_obj_15c_data_model_v2_Array *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_new_array", 0);

  /* "c_data_model_v2.pyx":984
 * 
 * cdef Array _new_array(Field field):
 *     cdef Array v = Array()             # <<<<<<<<<<<<<<
 *     v.field = field
 *     return v
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_15c_data_model_v2_Array), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_v = ((struct __pyx_obj_15c_data_model_v2_Array *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":985
 * cdef Array _new_array(Field field):
 *     cdef Array v = Array()
 *     v.field = field             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_field));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_field));
  __Pyx_GOTREF(__pyx_v_v->field);
  __Pyx_DECREF(((PyObject *)__pyx_v_v->field));
  __pyx_v_v->field = __pyx_v_field;

  /* "c_data_model_v2.pyx":986
 *     cdef Array v = Array()
 *     v.field = field
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_v));
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":983
 * 
 * 
 * cdef Array _new_array(Field field):             # <<<<<<<<<<<<<<
 *     cdef Array v = Array()
 *     v.field = field
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2._new_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":989
 * 
 * 
 * cdef Map _new_map(Field field):             # <<<<<<<<<<<<<<
 *     cdef Map v = Map()
 *     v.field = field
 */

static struct __pyx_obj_15c_data_model_v2_Map *__pyx_f_15c_data_model_v2__new_map(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  struct __pyx_obj_15c_data_model_v2_Map *__pyx_v_v = 0;
  struct __pyx_obj_15c_data_model_v2_Map *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_new_map", 0);

  /* "c_data_model_v2.pyx":990
 * 
 * cdef Map _new_map(Field field):
 *     cdef Map v = Map()             # <<<<<<<<<<<<<<
 *     v.field = field
 *     return v
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_15c_data_model_v2_Map), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_v = ((struct __pyx_obj_15c_data_model_v2_Map *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":991
 * cdef Map _new_map(Field field):
 *     cdef Map v = Map()
 *     v.field = field             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_field));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_field));
  __Pyx_GOTREF(__pyx_v_v->field);
  __Pyx_DECREF(((PyObject *)__pyx_v_v->field));
  __pyx_v_v->field = __pyx_v_field;

  /* "c_data_model_v2.pyx":992
 *     cdef Map v = Map()
 *     v.field = field
 *     return v             # <<<<<<<<<<<<<<
 * 
 * cdef IdMap _new_id_map(Field field):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_v));
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":989
 * 
 * 
 * cdef Map _new_map(Field field):             # <<<<<<<<<<<<<<
 *     cdef Map v = Map()
 *     v.field = field
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2._new_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":994
 *     return v
 * 
 * cdef IdMap _new_id_map(Field field):             # <<<<<<<<<<<<<<
 *     cdef IdMap v = IdMap()
 *     v.field = field
 */

static struct __pyx_obj_15c_data_model_v2_IdMap *__pyx_f_15c_data_model_v2__new_id_map(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  struct __pyx_obj_15c_data_model_v2_IdMap *__pyx_v_v = 0;
  struct __pyx_obj_15c_data_model_v2_IdMap *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_new_id_map", 0);

  /* "c_data_model_v2.pyx":995
 * 
 * cdef IdMap _new_id_map(Field field):
 *     cdef IdMap v = IdMap()             # <<<<<<<<<<<<<<
 *     v.field = field
 *     return v
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_15c_data_model_v2_IdMap), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_v = ((struct __pyx_obj_15c_data_model_v2_IdMap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":996
 * cdef IdMap _new_id_map(Field field):
 *     cdef IdMap v = IdMap()
 *     v.field = field             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_field));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_field));
  __Pyx_GOTREF(__pyx_v_v->__pyx_base.field);
  __Pyx_DECREF(((PyObject *)__pyx_v_v->__pyx_base.field));
  __pyx_v_v->__pyx_base.field = __pyx_v_field;

  /* "c_data_model_v2.pyx":997
 *     cdef IdMap v = IdMap()
 *     v.field = field
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_v));
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":994
 *     return v
 * 
 * cdef IdMap _new_id_map(Field field):             # <<<<<<<<<<<<<<
 *     cdef IdMap v = IdMap()
 *     v.field = field
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2._new_id_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1000
 * 
 * 
 * cdef object _new_container(Field field):             # <<<<<<<<<<<<<<
 *     if field.array:
 *         return _new_array(field)
 */

static PyObject *__pyx_f_15c_data_model_v2__new_container(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_new_container", 0);

  /* "c_data_model_v2.pyx":1001
 * 
 * cdef object _new_container(Field field):
 *     if field.array:             # <<<<<<<<<<<<<<
 *         return _new_array(field)
 *     if field.map:
 */
  __pyx_t_1 = (__pyx_v_field->array != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":1002
 * cdef object _new_container(Field field):
 *     if field.array:
 *         return _new_array(field)             # <<<<<<<<<<<<<<
 *     if field.map:
 *         return _new_map(field)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_f_15c_data_model_v2__new_array(__pyx_v_field)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1002, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1001
 * 
 * cdef object _new_container(Field field):
 *     if field.array:             # <<<<<<<<<<<<<<
 *         return _new_array(field)
 *     if field.map:
 */
  }

  /* "c_data_model_v2.pyx":1003
 *     if field.array:
 *         return _new_array(field)
 *     if field.map:             # <<<<<<<<<<<<<<
 *         return _new_map(field)
 *     if field.id_map:
 */
  __pyx_t_1 = (__pyx_v_field->map != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":1004
 *         return _new_array(field)
 *     if field.map:
 *         return _new_map(field)             # <<<<<<<<<<<<<<
 *     if field.id_map:
 *         return _new_id_map(field)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_f_15c_data_model_v2__new_map(__pyx_v_field)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1004, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1003
 *     if field.array:
 *         return _new_array(field)
 *     if field.map:             # <<<<<<<<<<<<<<
 *         return _new_map(field)
 *     if field.id_map:
 */
  }

  /* "c_data_model_v2.pyx":1005
 *     if field.map:
 *         return _new_map(field)
 *     if field.id_map:             # <<<<<<<<<<<<<<
 *         return _new_id_map(field)
 *     return None
 */
  __pyx_t_1 = (__pyx_v_field->id_map != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":1006
 *         return _new_map(field)
 *     if field.id_map:
 *         return _new_id_map(field)             # <<<<<<<<<<<<<<
 *     return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_f_15c_data_model_v2__new_id_map(__pyx_v_field)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1006, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1005
 *     if field.map:
 *         return _new_map(field)
 *     if field.id_map:             # <<<<<<<<<<<<<<
 *         return _new_id_map(field)
 *     return None
 */
  }

  /* "c_data_model_v2.pyx":1007
 *     if field.id_map:
 *         return _new_id_map(field)
 *     return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1000
 * 
 * 
 * cdef object _new_container(Field field):             # <<<<<<<<<<<<<<
 *     if field.array:
 *         return _new_array(field)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("c_data_model_v2._new_container", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1010
 * 
 * 
 * cdef object _get_container_class(Field field):             # <<<<<<<<<<<<<<
 *     if field.array:
 *         return Array
 */

static PyObject *__pyx_f_15c_data_model_v2__get_container_class(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_get_container_class", 0);

  /* "c_data_model_v2.pyx":1011
 * 
 * cdef object _get_container_class(Field field):
 *     if field.array:             # <<<<<<<<<<<<<<
 *         return Array
 *     if field.map:
 */
  __pyx_t_1 = (__pyx_v_field->array != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":1012
 * cdef object _get_container_class(Field field):
 *     if field.array:
 *         return Array             # <<<<<<<<<<<<<<
 *     if field.map:
 *         return Map
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_ptype_15c_data_model_v2_Array));
    __pyx_r = ((PyObject *)__pyx_ptype_15c_data_model_v2_Array);
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1011
 * 
 * cdef object _get_container_class(Field field):
 *     if field.array:             # <<<<<<<<<<<<<<
 *         return Array
 *     if field.map:
 */
  }

  /* "c_data_model_v2.pyx":1013
 *     if field.array:
 *         return Array
 *     if field.map:             # <<<<<<<<<<<<<<
 *         return Map
 *     if field.id_map:
 */
  __pyx_t_1 = (__pyx_v_field->map != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":1014
 *         return Array
 *     if field.map:
 *         return Map             # <<<<<<<<<<<<<<
 *     if field.id_map:
 *         return IdMap
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_ptype_15c_data_model_v2_Map));
    __pyx_r = ((PyObject *)__pyx_ptype_15c_data_model_v2_Map);
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1013
 *     if field.array:
 *         return Array
 *     if field.map:             # <<<<<<<<<<<<<<
 *         return Map
 *     if field.id_map:
 */
  }

  /* "c_data_model_v2.pyx":1015
 *     if field.map:
 *         return Map
 *     if field.id_map:             # <<<<<<<<<<<<<<
 *         return IdMap
 * 
 */
  __pyx_t_1 = (__pyx_v_field->id_map != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":1016
 *         return Map
 *     if field.id_map:
 *         return IdMap             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_ptype_15c_data_model_v2_IdMap));
    __pyx_r = ((PyObject *)__pyx_ptype_15c_data_model_v2_IdMap);
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1015
 *     if field.map:
 *         return Map
 *     if field.id_map:             # <<<<<<<<<<<<<<
 *         return IdMap
 * 
 */
  }

  /* "c_data_model_v2.pyx":1010
 * 
 * 
 * cdef object _get_container_class(Field field):             # <<<<<<<<<<<<<<
 *     if field.array:
 *         return Array
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1056
 * 
 *     property index:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.index
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_5Field_5index_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15c_data_model_v2_5Field_5index_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_5Field_5index___get__(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_5Field_5index___get__(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "c_data_model_v2.pyx":1057
 *     property index:
 *         def __get__(self):
 *             return self.index             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1056
 * 
 *     property index:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.index
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.Field.index.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1061
 * 
 *     property name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_5Field_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15c_data_model_v2_5Field_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_5Field_4name___get__(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_5Field_4name___get__(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "c_data_model_v2.pyx":1062
 *     property name:
 *         def __get__(self):
 *             return self.name             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1061
 * 
 *     property name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1066
 * 
 *     property key:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.key
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_5Field_3key_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15c_data_model_v2_5Field_3key_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_5Field_3key___get__(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_5Field_3key___get__(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "c_data_model_v2.pyx":1067
 *     property key:
 *         def __get__(self):
 *             return self.key             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bint is_data_model_type(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->key);
  __pyx_r = __pyx_v_self->key;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1066
 * 
 *     property key:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.key
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1069
 *             return self.key
 * 
 *     cdef inline bint is_data_model_type(self):             # <<<<<<<<<<<<<<
 *         return self.data_model_protocol is not None
 * 
 */

static CYTHON_INLINE int __pyx_f_15c_data_model_v2_5Field_is_data_model_type(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("is_data_model_type", 0);

  /* "c_data_model_v2.pyx":1070
 * 
 *     cdef inline bint is_data_model_type(self):
 *         return self.data_model_protocol is not None             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, object typ, int index, bint array=False, bint map=False, bint id_map=False,
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->data_model_protocol) != Py_None);
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1069
 *             return self.key
 * 
 *     cdef inline bint is_data_model_type(self):             # <<<<<<<<<<<<<<
 *         return self.data_model_protocol is not None
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1072
 *         return self.data_model_protocol is not None
 * 
 *     def __cinit__(self, object typ, int index, bint array=False, bint map=False, bint id_map=False,             # <<<<<<<<<<<<<<
 *                   str key=None, object default=None, object min_value=None, bint arithm=False,
 *                   bint ref=False, **kwargs):
 */

/* Python wrapper */
static int __pyx_pw_15c_data_model_v2_5Field_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_15c_data_model_v2_5Field_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_typ = 0;
  int __pyx_v_index;
  int __pyx_v_array;
  int __pyx_v_map;
  int __pyx_v_id_map;
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_default = 0;
  PyObject *__pyx_v_min_value = 0;
  int __pyx_v_arithm;
  int __pyx_v_ref;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_typ,&__pyx_n_s_index,&__pyx_n_s_array,&__pyx_n_s_map,&__pyx_n_s_id_map,&__pyx_n_s_key,&__pyx_n_s_default,&__pyx_n_s_min_value,&__pyx_n_s_arithm,&__pyx_n_s_ref,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};

    /* "c_data_model_v2.pyx":1073
 * 
 *     def __cinit__(self, object typ, int index, bint array=False, bint map=False, bint id_map=False,
 *                   str key=None, object default=None, object min_value=None, bint arithm=False,             # <<<<<<<<<<<<<<
 *                   bint ref=False, **kwargs):
 * 
 */
    values[5] = ((PyObject*)Py_None);
    values[6] = ((PyObject *)Py_None);
    values[7] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_typ)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 10, 1); __PYX_ERR(0, 1072, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_map);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id_map);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_default);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arithm);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ref);
          if (value) { values[9] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1072, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_typ = values[0];
    __pyx_v_index = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1072, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_array = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_array == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1072, __pyx_L3_error)
    } else {

      /* "c_data_model_v2.pyx":1072
 *         return self.data_model_protocol is not None
 * 
 *     def __cinit__(self, object typ, int index, bint array=False, bint map=False, bint id_map=False,             # <<<<<<<<<<<<<<
 *                   str key=None, object default=None, object min_value=None, bint arithm=False,
 *                   bint ref=False, **kwargs):
 */
      __pyx_v_array = ((int)0);
    }
    if (values[3]) {
      __pyx_v_map = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_map == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1072, __pyx_L3_error)
    } else {
      __pyx_v_map = ((int)0);
    }
    if (values[4]) {
      __pyx_v_id_map = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_id_map == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1072, __pyx_L3_error)
    } else {
      __pyx_v_id_map = ((int)0);
    }
    __pyx_v_key = ((PyObject*)values[5]);
    __pyx_v_default = values[6];
    __pyx_v_min_value = values[7];
    if (values[8]) {
      __pyx_v_arithm = __Pyx_PyObject_IsTrue(values[8]); if (unlikely((__pyx_v_arithm == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1073, __pyx_L3_error)
    } else {

      /* "c_data_model_v2.pyx":1073
 * 
 *     def __cinit__(self, object typ, int index, bint array=False, bint map=False, bint id_map=False,
 *                   str key=None, object default=None, object min_value=None, bint arithm=False,             # <<<<<<<<<<<<<<
 *                   bint ref=False, **kwargs):
 * 
 */
      __pyx_v_arithm = ((int)0);
    }
    if (values[9]) {
      __pyx_v_ref = __Pyx_PyObject_IsTrue(values[9]); if (unlikely((__pyx_v_ref == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1074, __pyx_L3_error)
    } else {

      /* "c_data_model_v2.pyx":1074
 *     def __cinit__(self, object typ, int index, bint array=False, bint map=False, bint id_map=False,
 *                   str key=None, object default=None, object min_value=None, bint arithm=False,
 *                   bint ref=False, **kwargs):             # <<<<<<<<<<<<<<
 * 
 *         self.__dict__ = {}
 */
      __pyx_v_ref = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1072, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("c_data_model_v2.Field.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), (&PyString_Type), 1, "key", 1))) __PYX_ERR(0, 1073, __pyx_L1_error)
  __pyx_r = __pyx_pf_15c_data_model_v2_5Field___cinit__(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_v_self), __pyx_v_typ, __pyx_v_index, __pyx_v_array, __pyx_v_map, __pyx_v_id_map, __pyx_v_key, __pyx_v_default, __pyx_v_min_value, __pyx_v_arithm, __pyx_v_ref, __pyx_v_kwargs);

  /* "c_data_model_v2.pyx":1072
 *         return self.data_model_protocol is not None
 * 
 *     def __cinit__(self, object typ, int index, bint array=False, bint map=False, bint id_map=False,             # <<<<<<<<<<<<<<
 *                   str key=None, object default=None, object min_value=None, bint arithm=False,
 *                   bint ref=False, **kwargs):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15c_data_model_v2_5Field___cinit__(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_self, PyObject *__pyx_v_typ, int __pyx_v_index, int __pyx_v_array, int __pyx_v_map, int __pyx_v_id_map, PyObject *__pyx_v_key, PyObject *__pyx_v_default, PyObject *__pyx_v_min_value, int __pyx_v_arithm, int __pyx_v_ref, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_value_field = 0;
  PyObject *__pyx_v_dict_key_encoder = 0;
  PyObject *__pyx_v_dict_key_decoder = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "c_data_model_v2.pyx":1076
 *                   bint ref=False, **kwargs):
 * 
 *         self.__dict__ = {}             # <<<<<<<<<<<<<<
 *         self.typ = typ
 *         if isinstance(typ, (str, unicode)) and typ in _default_values:
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__dict__);
  __Pyx_DECREF(__pyx_v_self->__dict__);
  __pyx_v_self->__dict__ = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1077
 * 
 *         self.__dict__ = {}
 *         self.typ = typ             # <<<<<<<<<<<<<<
 *         if isinstance(typ, (str, unicode)) and typ in _default_values:
 *             self.type_name = typ
 */
  __Pyx_INCREF(__pyx_v_typ);
  __Pyx_GIVEREF(__pyx_v_typ);
  __Pyx_GOTREF(__pyx_v_self->typ);
  __Pyx_DECREF(__pyx_v_self->typ);
  __pyx_v_self->typ = __pyx_v_typ;

  /* "c_data_model_v2.pyx":1078
 *         self.__dict__ = {}
 *         self.typ = typ
 *         if isinstance(typ, (str, unicode)) and typ in _default_values:             # <<<<<<<<<<<<<<
 *             self.type_name = typ
 *             self.base_value_type = typ
 */
  __pyx_t_4 = PyString_Check(__pyx_v_typ); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_5 = PyUnicode_Check(__pyx_v_typ); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L6_bool_binop_done:;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  if (unlikely(__pyx_v_15c_data_model_v2__default_values == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1078, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_v_typ, __pyx_v_15c_data_model_v2__default_values, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":1079
 *         self.typ = typ
 *         if isinstance(typ, (str, unicode)) and typ in _default_values:
 *             self.type_name = typ             # <<<<<<<<<<<<<<
 *             self.base_value_type = typ
 *         elif issubclass(typ, DataModel):
 */
    if (!(likely(PyString_CheckExact(__pyx_v_typ))||((__pyx_v_typ) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_typ)->tp_name), 0))) __PYX_ERR(0, 1079, __pyx_L1_error)
    __pyx_t_1 = __pyx_v_typ;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->type_name);
    __Pyx_DECREF(__pyx_v_self->type_name);
    __pyx_v_self->type_name = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "c_data_model_v2.pyx":1080
 *         if isinstance(typ, (str, unicode)) and typ in _default_values:
 *             self.type_name = typ
 *             self.base_value_type = typ             # <<<<<<<<<<<<<<
 *         elif issubclass(typ, DataModel):
 *             self.type_name = typ.__name__
 */
    __Pyx_INCREF(__pyx_v_typ);
    __Pyx_GIVEREF(__pyx_v_typ);
    __Pyx_GOTREF(__pyx_v_self->base_value_type);
    __Pyx_DECREF(__pyx_v_self->base_value_type);
    __pyx_v_self->base_value_type = __pyx_v_typ;

    /* "c_data_model_v2.pyx":1078
 *         self.__dict__ = {}
 *         self.typ = typ
 *         if isinstance(typ, (str, unicode)) and typ in _default_values:             # <<<<<<<<<<<<<<
 *             self.type_name = typ
 *             self.base_value_type = typ
 */
    goto __pyx_L3;
  }

  /* "c_data_model_v2.pyx":1081
 *             self.type_name = typ
 *             self.base_value_type = typ
 *         elif issubclass(typ, DataModel):             # <<<<<<<<<<<<<<
 *             self.type_name = typ.__name__
 *             self.data_model_protocol = <DataModelProtocol>typ._protocol_
 */
  __pyx_t_2 = PyObject_IsSubclass(__pyx_v_typ, ((PyObject *)__pyx_ptype_15c_data_model_v2_DataModel)); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1081, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":1082
 *             self.base_value_type = typ
 *         elif issubclass(typ, DataModel):
 *             self.type_name = typ.__name__             # <<<<<<<<<<<<<<
 *             self.data_model_protocol = <DataModelProtocol>typ._protocol_
 *         else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_typ, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1082, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1082, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->type_name);
    __Pyx_DECREF(__pyx_v_self->type_name);
    __pyx_v_self->type_name = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "c_data_model_v2.pyx":1083
 *         elif issubclass(typ, DataModel):
 *             self.type_name = typ.__name__
 *             self.data_model_protocol = <DataModelProtocol>typ._protocol_             # <<<<<<<<<<<<<<
 *         else:
 *             raise DefineError('unsupported type')
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_typ, __pyx_n_s_protocol); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1083, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __pyx_t_1;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->data_model_protocol);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->data_model_protocol));
    __pyx_v_self->data_model_protocol = ((struct __pyx_obj_15c_data_model_v2_DataModelProtocol *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "c_data_model_v2.pyx":1081
 *             self.type_name = typ
 *             self.base_value_type = typ
 *         elif issubclass(typ, DataModel):             # <<<<<<<<<<<<<<
 *             self.type_name = typ.__name__
 *             self.data_model_protocol = <DataModelProtocol>typ._protocol_
 */
    goto __pyx_L3;
  }

  /* "c_data_model_v2.pyx":1085
 *             self.data_model_protocol = <DataModelProtocol>typ._protocol_
 *         else:
 *             raise DefineError('unsupported type')             # <<<<<<<<<<<<<<
 * 
 *         self.index = index
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_DefineError); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1085, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1085, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1085, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "c_data_model_v2.pyx":1087
 *             raise DefineError('unsupported type')
 * 
 *         self.index = index             # <<<<<<<<<<<<<<
 *         if index <= 0 or index > 2 ** 16:
 *             raise DefineError('invalid index')
 */
  __pyx_v_self->index = __pyx_v_index;

  /* "c_data_model_v2.pyx":1088
 * 
 *         self.index = index
 *         if index <= 0 or index > 2 ** 16:             # <<<<<<<<<<<<<<
 *             raise DefineError('invalid index')
 * 
 */
  __pyx_t_2 = ((__pyx_v_index <= 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_3 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_index > 0x10000) != 0);
  __pyx_t_3 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":1089
 *         self.index = index
 *         if index <= 0 or index > 2 ** 16:
 *             raise DefineError('invalid index')             # <<<<<<<<<<<<<<
 * 
 *         self.array = array
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_DefineError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1089, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1089, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 1089, __pyx_L1_error)

    /* "c_data_model_v2.pyx":1088
 * 
 *         self.index = index
 *         if index <= 0 or index > 2 ** 16:             # <<<<<<<<<<<<<<
 *             raise DefineError('invalid index')
 * 
 */
  }

  /* "c_data_model_v2.pyx":1091
 *             raise DefineError('invalid index')
 * 
 *         self.array = array             # <<<<<<<<<<<<<<
 *         self.key_type_name = key
 *         self.map = map
 */
  __pyx_v_self->array = __pyx_v_array;

  /* "c_data_model_v2.pyx":1092
 * 
 *         self.array = array
 *         self.key_type_name = key             # <<<<<<<<<<<<<<
 *         self.map = map
 *         self.id_map = id_map
 */
  __Pyx_INCREF(__pyx_v_key);
  __Pyx_GIVEREF(__pyx_v_key);
  __Pyx_GOTREF(__pyx_v_self->key_type_name);
  __Pyx_DECREF(__pyx_v_self->key_type_name);
  __pyx_v_self->key_type_name = __pyx_v_key;

  /* "c_data_model_v2.pyx":1093
 *         self.array = array
 *         self.key_type_name = key
 *         self.map = map             # <<<<<<<<<<<<<<
 *         self.id_map = id_map
 *         self.arithm = arithm
 */
  __pyx_v_self->map = __pyx_v_map;

  /* "c_data_model_v2.pyx":1094
 *         self.key_type_name = key
 *         self.map = map
 *         self.id_map = id_map             # <<<<<<<<<<<<<<
 *         self.arithm = arithm
 * 
 */
  __pyx_v_self->id_map = __pyx_v_id_map;

  /* "c_data_model_v2.pyx":1095
 *         self.map = map
 *         self.id_map = id_map
 *         self.arithm = arithm             # <<<<<<<<<<<<<<
 * 
 *         self.has_min_value = False
 */
  __pyx_v_self->arithm = __pyx_v_arithm;

  /* "c_data_model_v2.pyx":1097
 *         self.arithm = arithm
 * 
 *         self.has_min_value = False             # <<<<<<<<<<<<<<
 *         self.min_value = 0
 *         if min_value is not None:
 */
  __pyx_v_self->has_min_value = 0;

  /* "c_data_model_v2.pyx":1098
 * 
 *         self.has_min_value = False
 *         self.min_value = 0             # <<<<<<<<<<<<<<
 *         if min_value is not None:
 *             self.has_min_value = True
 */
  __pyx_v_self->min_value = 0;

  /* "c_data_model_v2.pyx":1099
 *         self.has_min_value = False
 *         self.min_value = 0
 *         if min_value is not None:             # <<<<<<<<<<<<<<
 *             self.has_min_value = True
 *             self.min_value = int(min_value)
 */
  __pyx_t_3 = (__pyx_v_min_value != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":1100
 *         self.min_value = 0
 *         if min_value is not None:
 *             self.has_min_value = True             # <<<<<<<<<<<<<<
 *             self.min_value = int(min_value)
 * 
 */
    __pyx_v_self->has_min_value = 1;

    /* "c_data_model_v2.pyx":1101
 *         if min_value is not None:
 *             self.has_min_value = True
 *             self.min_value = int(min_value)             # <<<<<<<<<<<<<<
 * 
 *         self.is_unsigned = True if self.type_name in _unsigned_int_types else False
 */
    __pyx_t_6 = __Pyx_PyNumber_Int(__pyx_v_min_value); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1101, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_self->min_value = __pyx_t_7;

    /* "c_data_model_v2.pyx":1099
 *         self.has_min_value = False
 *         self.min_value = 0
 *         if min_value is not None:             # <<<<<<<<<<<<<<
 *             self.has_min_value = True
 *             self.min_value = int(min_value)
 */
  }

  /* "c_data_model_v2.pyx":1103
 *             self.min_value = int(min_value)
 * 
 *         self.is_unsigned = True if self.type_name in _unsigned_int_types else False             # <<<<<<<<<<<<<<
 *         self.ref = ref
 * 
 */
  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_v_self->type_name, __pyx_v_15c_data_model_v2__unsigned_int_types, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1103, __pyx_L1_error)
  if ((__pyx_t_3 != 0)) {
    __pyx_t_2 = 1;
  } else {
    __pyx_t_2 = 0;
  }
  __pyx_v_self->is_unsigned = __pyx_t_2;

  /* "c_data_model_v2.pyx":1104
 * 
 *         self.is_unsigned = True if self.type_name in _unsigned_int_types else False
 *         self.ref = ref             # <<<<<<<<<<<<<<
 * 
 *         if self.ref:
 */
  __pyx_v_self->ref = __pyx_v_ref;

  /* "c_data_model_v2.pyx":1106
 *         self.ref = ref
 * 
 *         if self.ref:             # <<<<<<<<<<<<<<
 *             if not self.is_data_model_type():
 *                 raise TypeError("ref must pointer to a DataModel type")
 */
  __pyx_t_2 = (__pyx_v_self->ref != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":1107
 * 
 *         if self.ref:
 *             if not self.is_data_model_type():             # <<<<<<<<<<<<<<
 *                 raise TypeError("ref must pointer to a DataModel type")
 * 
 */
    __pyx_t_2 = ((!(__pyx_f_15c_data_model_v2_5Field_is_data_model_type(__pyx_v_self) != 0)) != 0);
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":1108
 *         if self.ref:
 *             if not self.is_data_model_type():
 *                 raise TypeError("ref must pointer to a DataModel type")             # <<<<<<<<<<<<<<
 * 
 *         self.skip_changed = False
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1108, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 1108, __pyx_L1_error)

      /* "c_data_model_v2.pyx":1107
 * 
 *         if self.ref:
 *             if not self.is_data_model_type():             # <<<<<<<<<<<<<<
 *                 raise TypeError("ref must pointer to a DataModel type")
 * 
 */
    }

    /* "c_data_model_v2.pyx":1106
 *         self.ref = ref
 * 
 *         if self.ref:             # <<<<<<<<<<<<<<
 *             if not self.is_data_model_type():
 *                 raise TypeError("ref must pointer to a DataModel type")
 */
  }

  /* "c_data_model_v2.pyx":1110
 *                 raise TypeError("ref must pointer to a DataModel type")
 * 
 *         self.skip_changed = False             # <<<<<<<<<<<<<<
 *         self.create = None
 * 
 */
  __pyx_v_self->skip_changed = 0;

  /* "c_data_model_v2.pyx":1111
 * 
 *         self.skip_changed = False
 *         self.create = None             # <<<<<<<<<<<<<<
 * 
 *         self.__dict__.update(kwargs)
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->create);
  __Pyx_DECREF(__pyx_v_self->create);
  __pyx_v_self->create = Py_None;

  /* "c_data_model_v2.pyx":1113
 *         self.create = None
 * 
 *         self.__dict__.update(kwargs)             # <<<<<<<<<<<<<<
 * 
 *         self.default = None
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__dict__, __pyx_n_s_update); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_kwargs); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_kwargs};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1113, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_kwargs};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1113, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_INCREF(__pyx_v_kwargs);
      __Pyx_GIVEREF(__pyx_v_kwargs);
      PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_v_kwargs);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "c_data_model_v2.pyx":1115
 *         self.__dict__.update(kwargs)
 * 
 *         self.default = None             # <<<<<<<<<<<<<<
 * 
 *         if default is not None:
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->__pyx_default);
  __Pyx_DECREF(__pyx_v_self->__pyx_default);
  __pyx_v_self->__pyx_default = Py_None;

  /* "c_data_model_v2.pyx":1117
 *         self.default = None
 * 
 *         if default is not None:             # <<<<<<<<<<<<<<
 *             self.default = default
 *         else:
 */
  __pyx_t_2 = (__pyx_v_default != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":1118
 * 
 *         if default is not None:
 *             self.default = default             # <<<<<<<<<<<<<<
 *         else:
 *             self.default = _default_values.get(self.type_name)
 */
    __Pyx_INCREF(__pyx_v_default);
    __Pyx_GIVEREF(__pyx_v_default);
    __Pyx_GOTREF(__pyx_v_self->__pyx_default);
    __Pyx_DECREF(__pyx_v_self->__pyx_default);
    __pyx_v_self->__pyx_default = __pyx_v_default;

    /* "c_data_model_v2.pyx":1117
 *         self.default = None
 * 
 *         if default is not None:             # <<<<<<<<<<<<<<
 *             self.default = default
 *         else:
 */
    goto __pyx_L14;
  }

  /* "c_data_model_v2.pyx":1120
 *             self.default = default
 *         else:
 *             self.default = _default_values.get(self.type_name)             # <<<<<<<<<<<<<<
 * 
 *         self.dict_encoder = _dict_get_encoder(self.type_name)
 */
  /*else*/ {
    if (unlikely(__pyx_v_15c_data_model_v2__default_values == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
      __PYX_ERR(0, 1120, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyDict_GetItemDefault(__pyx_v_15c_data_model_v2__default_values, __pyx_v_self->type_name, Py_None); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->__pyx_default);
    __Pyx_DECREF(__pyx_v_self->__pyx_default);
    __pyx_v_self->__pyx_default = __pyx_t_6;
    __pyx_t_6 = 0;
  }
  __pyx_L14:;

  /* "c_data_model_v2.pyx":1122
 *             self.default = _default_values.get(self.type_name)
 * 
 *         self.dict_encoder = _dict_get_encoder(self.type_name)             # <<<<<<<<<<<<<<
 *         self.dict_decoder = _dict_get_decoder(self.type_name)
 *         self.dict_key_encoder = None
 */
  __pyx_t_6 = __pyx_v_self->type_name;
  __Pyx_INCREF(__pyx_t_6);
  __pyx_t_1 = __pyx_f_15c_data_model_v2__dict_get_encoder(((PyObject*)__pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->dict_encoder);
  __Pyx_DECREF(__pyx_v_self->dict_encoder);
  __pyx_v_self->dict_encoder = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1123
 * 
 *         self.dict_encoder = _dict_get_encoder(self.type_name)
 *         self.dict_decoder = _dict_get_decoder(self.type_name)             # <<<<<<<<<<<<<<
 *         self.dict_key_encoder = None
 *         self.dict_key_decoder = None
 */
  __pyx_t_1 = __pyx_v_self->type_name;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_6 = __pyx_f_15c_data_model_v2__dict_get_decoder(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->dict_decoder);
  __Pyx_DECREF(__pyx_v_self->dict_decoder);
  __pyx_v_self->dict_decoder = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "c_data_model_v2.pyx":1124
 *         self.dict_encoder = _dict_get_encoder(self.type_name)
 *         self.dict_decoder = _dict_get_decoder(self.type_name)
 *         self.dict_key_encoder = None             # <<<<<<<<<<<<<<
 *         self.dict_key_decoder = None
 *         self.dict_ref_encoder = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->dict_key_encoder);
  __Pyx_DECREF(__pyx_v_self->dict_key_encoder);
  __pyx_v_self->dict_key_encoder = Py_None;

  /* "c_data_model_v2.pyx":1125
 *         self.dict_decoder = _dict_get_decoder(self.type_name)
 *         self.dict_key_encoder = None
 *         self.dict_key_decoder = None             # <<<<<<<<<<<<<<
 *         self.dict_ref_encoder = None
 *         self.dict_ref_decoder = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->dict_key_decoder);
  __Pyx_DECREF(__pyx_v_self->dict_key_decoder);
  __pyx_v_self->dict_key_decoder = Py_None;

  /* "c_data_model_v2.pyx":1126
 *         self.dict_key_encoder = None
 *         self.dict_key_decoder = None
 *         self.dict_ref_encoder = None             # <<<<<<<<<<<<<<
 *         self.dict_ref_decoder = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->dict_ref_encoder);
  __Pyx_DECREF(__pyx_v_self->dict_ref_encoder);
  __pyx_v_self->dict_ref_encoder = Py_None;

  /* "c_data_model_v2.pyx":1127
 *         self.dict_key_decoder = None
 *         self.dict_ref_encoder = None
 *         self.dict_ref_decoder = None             # <<<<<<<<<<<<<<
 * 
 *         cdef Field value_field
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->dict_ref_decoder);
  __Pyx_DECREF(__pyx_v_self->dict_ref_decoder);
  __pyx_v_self->dict_ref_decoder = Py_None;

  /* "c_data_model_v2.pyx":1131
 *         cdef Field value_field
 * 
 *         if self.ref:             # <<<<<<<<<<<<<<
 *             value_field = self.data_model_protocol.fields_define.fields_by_name['oid']
 *             self.dict_ref_encoder = value_field.dict_encoder
 */
  __pyx_t_3 = (__pyx_v_self->ref != 0);
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":1132
 * 
 *         if self.ref:
 *             value_field = self.data_model_protocol.fields_define.fields_by_name['oid']             # <<<<<<<<<<<<<<
 *             self.dict_ref_encoder = value_field.dict_encoder
 *             self.dict_ref_decoder = value_field.dict_decoder
 */
    if (unlikely(__pyx_v_self->data_model_protocol->fields_define->fields_by_name == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1132, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_self->data_model_protocol->fields_define->fields_by_name, __pyx_n_s_oid); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_15c_data_model_v2_Field))))) __PYX_ERR(0, 1132, __pyx_L1_error)
    __pyx_v_value_field = ((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "c_data_model_v2.pyx":1133
 *         if self.ref:
 *             value_field = self.data_model_protocol.fields_define.fields_by_name['oid']
 *             self.dict_ref_encoder = value_field.dict_encoder             # <<<<<<<<<<<<<<
 *             self.dict_ref_decoder = value_field.dict_decoder
 * 
 */
    __pyx_t_6 = __pyx_v_value_field->dict_encoder;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->dict_ref_encoder);
    __Pyx_DECREF(__pyx_v_self->dict_ref_encoder);
    __pyx_v_self->dict_ref_encoder = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "c_data_model_v2.pyx":1134
 *             value_field = self.data_model_protocol.fields_define.fields_by_name['oid']
 *             self.dict_ref_encoder = value_field.dict_encoder
 *             self.dict_ref_decoder = value_field.dict_decoder             # <<<<<<<<<<<<<<
 * 
 *         if [self, array, self.map, self.id_map].count(True) > 1:
 */
    __pyx_t_6 = __pyx_v_value_field->dict_decoder;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->dict_ref_decoder);
    __Pyx_DECREF(__pyx_v_self->dict_ref_decoder);
    __pyx_v_self->dict_ref_decoder = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "c_data_model_v2.pyx":1131
 *         cdef Field value_field
 * 
 *         if self.ref:             # <<<<<<<<<<<<<<
 *             value_field = self.data_model_protocol.fields_define.fields_by_name['oid']
 *             self.dict_ref_encoder = value_field.dict_encoder
 */
  }

  /* "c_data_model_v2.pyx":1136
 *             self.dict_ref_decoder = value_field.dict_decoder
 * 
 *         if [self, array, self.map, self.id_map].count(True) > 1:             # <<<<<<<<<<<<<<
 *             raise DefineError('conflicted properties: array, map, id_map')
 * 
 */
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->map); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyBool_FromLong(__pyx_v_self->id_map); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = PyList_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyList_SET_ITEM(__pyx_t_8, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_8, 3, __pyx_t_9);
  __pyx_t_6 = 0;
  __pyx_t_1 = 0;
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_count); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyObject_RichCompare(__pyx_t_8, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":1137
 * 
 *         if [self, array, self.map, self.id_map].count(True) > 1:
 *             raise DefineError('conflicted properties: array, map, id_map')             # <<<<<<<<<<<<<<
 * 
 *         cdef object dict_key_encoder
 */
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_DefineError); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __PYX_ERR(0, 1137, __pyx_L1_error)

    /* "c_data_model_v2.pyx":1136
 *             self.dict_ref_decoder = value_field.dict_decoder
 * 
 *         if [self, array, self.map, self.id_map].count(True) > 1:             # <<<<<<<<<<<<<<
 *             raise DefineError('conflicted properties: array, map, id_map')
 * 
 */
  }

  /* "c_data_model_v2.pyx":1142
 *         cdef object dict_key_decoder
 * 
 *         if self.map or self.id_map:             # <<<<<<<<<<<<<<
 *             dict_key_encoder = _dict_get_encoder(self.key_type_name)
 *             assert dict_key_encoder
 */
  __pyx_t_2 = (__pyx_v_self->map != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_3 = __pyx_t_2;
    goto __pyx_L18_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->id_map != 0);
  __pyx_t_3 = __pyx_t_2;
  __pyx_L18_bool_binop_done:;
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":1143
 * 
 *         if self.map or self.id_map:
 *             dict_key_encoder = _dict_get_encoder(self.key_type_name)             # <<<<<<<<<<<<<<
 *             assert dict_key_encoder
 *             self.dict_key_encoder = _key_encode_to_string(self.key_type_name, dict_key_encoder)
 */
    __pyx_t_8 = __pyx_v_self->key_type_name;
    __Pyx_INCREF(__pyx_t_8);
    __pyx_t_9 = __pyx_f_15c_data_model_v2__dict_get_encoder(((PyObject*)__pyx_t_8)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_dict_key_encoder = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "c_data_model_v2.pyx":1144
 *         if self.map or self.id_map:
 *             dict_key_encoder = _dict_get_encoder(self.key_type_name)
 *             assert dict_key_encoder             # <<<<<<<<<<<<<<
 *             self.dict_key_encoder = _key_encode_to_string(self.key_type_name, dict_key_encoder)
 * 
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_dict_key_encoder); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1144, __pyx_L1_error)
      if (unlikely(!__pyx_t_3)) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 1144, __pyx_L1_error)
      }
    }
    #endif

    /* "c_data_model_v2.pyx":1145
 *             dict_key_encoder = _dict_get_encoder(self.key_type_name)
 *             assert dict_key_encoder
 *             self.dict_key_encoder = _key_encode_to_string(self.key_type_name, dict_key_encoder)             # <<<<<<<<<<<<<<
 * 
 *             dict_key_decoder = _dict_get_decoder(self.key_type_name)
 */
    __pyx_t_9 = __pyx_v_self->key_type_name;
    __Pyx_INCREF(__pyx_t_9);
    __pyx_t_8 = __pyx_f_15c_data_model_v2__key_encode_to_string(((PyObject*)__pyx_t_9), __pyx_v_dict_key_encoder); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GIVEREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_v_self->dict_key_encoder);
    __Pyx_DECREF(__pyx_v_self->dict_key_encoder);
    __pyx_v_self->dict_key_encoder = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "c_data_model_v2.pyx":1147
 *             self.dict_key_encoder = _key_encode_to_string(self.key_type_name, dict_key_encoder)
 * 
 *             dict_key_decoder = _dict_get_decoder(self.key_type_name)             # <<<<<<<<<<<<<<
 *             assert dict_key_decoder
 *             self.dict_key_decoder = _key_decode_from_string(self.key_type_name, dict_key_decoder)
 */
    __pyx_t_8 = __pyx_v_self->key_type_name;
    __Pyx_INCREF(__pyx_t_8);
    __pyx_t_9 = __pyx_f_15c_data_model_v2__dict_get_decoder(((PyObject*)__pyx_t_8)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_dict_key_decoder = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "c_data_model_v2.pyx":1148
 * 
 *             dict_key_decoder = _dict_get_decoder(self.key_type_name)
 *             assert dict_key_decoder             # <<<<<<<<<<<<<<
 *             self.dict_key_decoder = _key_decode_from_string(self.key_type_name, dict_key_decoder)
 * 
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_dict_key_decoder); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1148, __pyx_L1_error)
      if (unlikely(!__pyx_t_3)) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 1148, __pyx_L1_error)
      }
    }
    #endif

    /* "c_data_model_v2.pyx":1149
 *             dict_key_decoder = _dict_get_decoder(self.key_type_name)
 *             assert dict_key_decoder
 *             self.dict_key_decoder = _key_decode_from_string(self.key_type_name, dict_key_decoder)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_9 = __pyx_v_self->key_type_name;
    __Pyx_INCREF(__pyx_t_9);
    __pyx_t_8 = __pyx_f_15c_data_model_v2__key_decode_from_string(((PyObject*)__pyx_t_9), __pyx_v_dict_key_decoder); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GIVEREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_v_self->dict_key_decoder);
    __Pyx_DECREF(__pyx_v_self->dict_key_decoder);
    __pyx_v_self->dict_key_decoder = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "c_data_model_v2.pyx":1142
 *         cdef object dict_key_decoder
 * 
 *         if self.map or self.id_map:             # <<<<<<<<<<<<<<
 *             dict_key_encoder = _dict_get_encoder(self.key_type_name)
 *             assert dict_key_encoder
 */
  }

  /* "c_data_model_v2.pyx":1072
 *         return self.data_model_protocol is not None
 * 
 *     def __cinit__(self, object typ, int index, bint array=False, bint map=False, bint id_map=False,             # <<<<<<<<<<<<<<
 *                   str key=None, object default=None, object min_value=None, bint arithm=False,
 *                   bint ref=False, **kwargs):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("c_data_model_v2.Field.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_value_field);
  __Pyx_XDECREF(__pyx_v_dict_key_encoder);
  __Pyx_XDECREF(__pyx_v_dict_key_decoder);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1152
 * 
 * 
 *     cdef inline bint is_container(self):             # <<<<<<<<<<<<<<
 *         return self.array or self.map or self.id_map
 * 
 */

static CYTHON_INLINE int __pyx_f_15c_data_model_v2_5Field_is_container(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("is_container", 0);

  /* "c_data_model_v2.pyx":1153
 * 
 *     cdef inline bint is_container(self):
 *         return self.array or self.map or self.id_map             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = (__pyx_v_self->array != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->map != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->id_map != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1152
 * 
 * 
 *     cdef inline bint is_container(self):             # <<<<<<<<<<<<<<
 *         return self.array or self.map or self.id_map
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1155
 *         return self.array or self.map or self.id_map
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return '<%s name=%s, index=%d>' % (self.__class__.__name__, self.name, self.index)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_5Field_3__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15c_data_model_v2_5Field_3__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_5Field_2__str__(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_5Field_2__str__(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "c_data_model_v2.pyx":1156
 * 
 *     def __str__(self):
 *         return '<%s name=%s, index=%d>' % (self.__class__.__name__, self.name, self.index)             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_v_self->name);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_name_s_index_d, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1155
 *         return self.array or self.map or self.id_map
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return '<%s name=%s, index=%d>' % (self.__class__.__name__, self.name, self.index)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("c_data_model_v2.Field.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1158
 *         return '<%s name=%s, index=%d>' % (self.__class__.__name__, self.name, self.index)
 * 
 *     def __getattr__(self, name):             # <<<<<<<<<<<<<<
 *         return self.__dict__.get(name)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_5Field_5__getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pw_15c_data_model_v2_5Field_5__getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_5Field_4__getattr__(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_5Field_4__getattr__(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "c_data_model_v2.pyx":1159
 * 
 *     def __getattr__(self, name):
 *         return self.__dict__.get(name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->__dict__ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 1159, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->__dict__, __pyx_v_name, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1158
 *         return '<%s name=%s, index=%d>' % (self.__class__.__name__, self.name, self.index)
 * 
 *     def __getattr__(self, name):             # <<<<<<<<<<<<<<
 *         return self.__dict__.get(name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.Field.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1162
 * 
 * 
 * cdef _copy_any_base_fields(bases, _fields, _fields_by_index, _fields_by_name, _fields_by_key):             # <<<<<<<<<<<<<<
 *     for base in bases:
 *         if getattr(base, '_fields_by_index', None) is not None:
 */

static PyObject *__pyx_f_15c_data_model_v2__copy_any_base_fields(PyObject *__pyx_v_bases, PyObject *__pyx_v__fields, PyObject *__pyx_v__fields_by_index, PyObject *__pyx_v__fields_by_name, PyObject *__pyx_v__fields_by_key) {
  PyObject *__pyx_v_base = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("_copy_any_base_fields", 0);
  __Pyx_INCREF(__pyx_v__fields);

  /* "c_data_model_v2.pyx":1163
 * 
 * cdef _copy_any_base_fields(bases, _fields, _fields_by_index, _fields_by_name, _fields_by_key):
 *     for base in bases:             # <<<<<<<<<<<<<<
 *         if getattr(base, '_fields_by_index', None) is not None:
 *             _fields += base._fields[:]
 */
  if (likely(PyList_CheckExact(__pyx_v_bases)) || PyTuple_CheckExact(__pyx_v_bases)) {
    __pyx_t_1 = __pyx_v_bases; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_bases); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1163, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1163, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1163, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1163, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1163, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1163, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_base, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":1164
 * cdef _copy_any_base_fields(bases, _fields, _fields_by_index, _fields_by_name, _fields_by_key):
 *     for base in bases:
 *         if getattr(base, '_fields_by_index', None) is not None:             # <<<<<<<<<<<<<<
 *             _fields += base._fields[:]
 *             _fields_by_index.update(base._fields_by_index)
 */
    __pyx_t_4 = __Pyx_GetAttr3(__pyx_v_base, __pyx_n_s_fields_by_index, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = (__pyx_t_4 != Py_None);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "c_data_model_v2.pyx":1165
 *     for base in bases:
 *         if getattr(base, '_fields_by_index', None) is not None:
 *             _fields += base._fields[:]             # <<<<<<<<<<<<<<
 *             _fields_by_index.update(base._fields_by_index)
 *             _fields_by_name.update(base._fields_by_name)
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_base, __pyx_n_s_fields); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyObject_GetSlice(__pyx_t_4, 0, 0, NULL, NULL, &__pyx_slice__20, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v__fields, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v__fields, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "c_data_model_v2.pyx":1166
 *         if getattr(base, '_fields_by_index', None) is not None:
 *             _fields += base._fields[:]
 *             _fields_by_index.update(base._fields_by_index)             # <<<<<<<<<<<<<<
 *             _fields_by_name.update(base._fields_by_name)
 *             _fields_by_key.update(base._fields_by_key)
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v__fields_by_index, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1166, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_base, __pyx_n_s_fields_by_index); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1166, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      if (!__pyx_t_9) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1166, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_8};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1166, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_8};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1166, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        } else
        #endif
        {
          __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1166, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_8);
          __pyx_t_8 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1166, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "c_data_model_v2.pyx":1167
 *             _fields += base._fields[:]
 *             _fields_by_index.update(base._fields_by_index)
 *             _fields_by_name.update(base._fields_by_name)             # <<<<<<<<<<<<<<
 *             _fields_by_key.update(base._fields_by_key)
 *             return True
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v__fields_by_name, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_base, __pyx_n_s_fields_by_name); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      if (!__pyx_t_8) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1167, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_10};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1167, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_10};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1167, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1167, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_10);
          __pyx_t_10 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1167, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "c_data_model_v2.pyx":1168
 *             _fields_by_index.update(base._fields_by_index)
 *             _fields_by_name.update(base._fields_by_name)
 *             _fields_by_key.update(base._fields_by_key)             # <<<<<<<<<<<<<<
 *             return True
 *     for base in bases:
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v__fields_by_key, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1168, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_base, __pyx_n_s_fields_by_key); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1168, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      if (!__pyx_t_10) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1168, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_9};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1168, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_9};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1168, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1168, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_10); __pyx_t_10 = NULL;
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_9);
          __pyx_t_9 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1168, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "c_data_model_v2.pyx":1169
 *             _fields_by_name.update(base._fields_by_name)
 *             _fields_by_key.update(base._fields_by_key)
 *             return True             # <<<<<<<<<<<<<<
 *     for base in bases:
 *         if _copy_any_base_fields(base.__bases__, _fields, _fields_by_index,
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":1164
 * cdef _copy_any_base_fields(bases, _fields, _fields_by_index, _fields_by_name, _fields_by_key):
 *     for base in bases:
 *         if getattr(base, '_fields_by_index', None) is not None:             # <<<<<<<<<<<<<<
 *             _fields += base._fields[:]
 *             _fields_by_index.update(base._fields_by_index)
 */
    }

    /* "c_data_model_v2.pyx":1163
 * 
 * cdef _copy_any_base_fields(bases, _fields, _fields_by_index, _fields_by_name, _fields_by_key):
 *     for base in bases:             # <<<<<<<<<<<<<<
 *         if getattr(base, '_fields_by_index', None) is not None:
 *             _fields += base._fields[:]
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1170
 *             _fields_by_key.update(base._fields_by_key)
 *             return True
 *     for base in bases:             # <<<<<<<<<<<<<<
 *         if _copy_any_base_fields(base.__bases__, _fields, _fields_by_index,
 *                                  _fields_by_name, _fields_by_key):
 */
  if (likely(PyList_CheckExact(__pyx_v_bases)) || PyTuple_CheckExact(__pyx_v_bases)) {
    __pyx_t_1 = __pyx_v_bases; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_bases); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1170, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1170, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1170, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1170, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1170, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1170, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_base, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":1171
 *             return True
 *     for base in bases:
 *         if _copy_any_base_fields(base.__bases__, _fields, _fields_by_index,             # <<<<<<<<<<<<<<
 *                                  _fields_by_name, _fields_by_key):
 *             return True
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_base, __pyx_n_s_bases); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "c_data_model_v2.pyx":1172
 *     for base in bases:
 *         if _copy_any_base_fields(base.__bases__, _fields, _fields_by_index,
 *                                  _fields_by_name, _fields_by_key):             # <<<<<<<<<<<<<<
 *             return True
 *     return False
 */
    __pyx_t_7 = __pyx_f_15c_data_model_v2__copy_any_base_fields(__pyx_t_4, __pyx_v__fields, __pyx_v__fields_by_index, __pyx_v__fields_by_name, __pyx_v__fields_by_key); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":1171
 *             return True
 *     for base in bases:
 *         if _copy_any_base_fields(base.__bases__, _fields, _fields_by_index,             # <<<<<<<<<<<<<<
 *                                  _fields_by_name, _fields_by_key):
 *             return True
 */
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1171, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_6) {

      /* "c_data_model_v2.pyx":1173
 *         if _copy_any_base_fields(base.__bases__, _fields, _fields_by_index,
 *                                  _fields_by_name, _fields_by_key):
 *             return True             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":1171
 *             return True
 *     for base in bases:
 *         if _copy_any_base_fields(base.__bases__, _fields, _fields_by_index,             # <<<<<<<<<<<<<<
 *                                  _fields_by_name, _fields_by_key):
 *             return True
 */
    }

    /* "c_data_model_v2.pyx":1170
 *             _fields_by_key.update(base._fields_by_key)
 *             return True
 *     for base in bases:             # <<<<<<<<<<<<<<
 *         if _copy_any_base_fields(base.__bases__, _fields, _fields_by_index,
 *                                  _fields_by_name, _fields_by_key):
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1174
 *                                  _fields_by_name, _fields_by_key):
 *             return True
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1162
 * 
 * 
 * cdef _copy_any_base_fields(bases, _fields, _fields_by_index, _fields_by_name, _fields_by_key):             # <<<<<<<<<<<<<<
 *     for base in bases:
 *         if getattr(base, '_fields_by_index', None) is not None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("c_data_model_v2._copy_any_base_fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_base);
  __Pyx_XDECREF(__pyx_v__fields);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1177
 * 
 * 
 * cdef DataModelProtocol try_get_protocol(object cls_or_obj):             # <<<<<<<<<<<<<<
 *     cdef object pto = getattr(cls_or_obj, '_protocol_', None)
 *     if pto is None:
 */

static struct __pyx_obj_15c_data_model_v2_DataModelProtocol *__pyx_f_15c_data_model_v2_try_get_protocol(PyObject *__pyx_v_cls_or_obj) {
  PyObject *__pyx_v_pto = 0;
  struct __pyx_obj_15c_data_model_v2_DataModelProtocol *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("try_get_protocol", 0);

  /* "c_data_model_v2.pyx":1178
 * 
 * cdef DataModelProtocol try_get_protocol(object cls_or_obj):
 *     cdef object pto = getattr(cls_or_obj, '_protocol_', None)             # <<<<<<<<<<<<<<
 *     if pto is None:
 *         return None
 */
  __pyx_t_1 = __Pyx_GetAttr3(__pyx_v_cls_or_obj, __pyx_n_s_protocol, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pto = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1179
 * cdef DataModelProtocol try_get_protocol(object cls_or_obj):
 *     cdef object pto = getattr(cls_or_obj, '_protocol_', None)
 *     if pto is None:             # <<<<<<<<<<<<<<
 *         return None
 *     if not isinstance(pto, DataModelProtocol):
 */
  __pyx_t_2 = (__pyx_v_pto == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":1180
 *     cdef object pto = getattr(cls_or_obj, '_protocol_', None)
 *     if pto is None:
 *         return None             # <<<<<<<<<<<<<<
 *     if not isinstance(pto, DataModelProtocol):
 *         return None
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __Pyx_INCREF(Py_None);
    __pyx_r = ((struct __pyx_obj_15c_data_model_v2_DataModelProtocol *)Py_None);
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1179
 * cdef DataModelProtocol try_get_protocol(object cls_or_obj):
 *     cdef object pto = getattr(cls_or_obj, '_protocol_', None)
 *     if pto is None:             # <<<<<<<<<<<<<<
 *         return None
 *     if not isinstance(pto, DataModelProtocol):
 */
  }

  /* "c_data_model_v2.pyx":1181
 *     if pto is None:
 *         return None
 *     if not isinstance(pto, DataModelProtocol):             # <<<<<<<<<<<<<<
 *         return None
 *     return pto
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_pto, __pyx_ptype_15c_data_model_v2_DataModelProtocol); 
  __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":1182
 *         return None
 *     if not isinstance(pto, DataModelProtocol):
 *         return None             # <<<<<<<<<<<<<<
 *     return pto
 * 
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __Pyx_INCREF(Py_None);
    __pyx_r = ((struct __pyx_obj_15c_data_model_v2_DataModelProtocol *)Py_None);
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1181
 *     if pto is None:
 *         return None
 *     if not isinstance(pto, DataModelProtocol):             # <<<<<<<<<<<<<<
 *         return None
 *     return pto
 */
  }

  /* "c_data_model_v2.pyx":1183
 *     if not isinstance(pto, DataModelProtocol):
 *         return None
 *     return pto             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  if (!(likely(((__pyx_v_pto) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_pto, __pyx_ptype_15c_data_model_v2_DataModelProtocol))))) __PYX_ERR(0, 1183, __pyx_L1_error)
  __Pyx_INCREF(__pyx_v_pto);
  __pyx_r = ((struct __pyx_obj_15c_data_model_v2_DataModelProtocol *)__pyx_v_pto);
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1177
 * 
 * 
 * cdef DataModelProtocol try_get_protocol(object cls_or_obj):             # <<<<<<<<<<<<<<
 *     cdef object pto = getattr(cls_or_obj, '_protocol_', None)
 *     if pto is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.try_get_protocol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pto);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1193
 *     cdef dict fields_is_container
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.fields = []
 *         self.fields_by_index = {}
 */

/* Python wrapper */
static int __pyx_pw_15c_data_model_v2_12FieldsDefine_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_15c_data_model_v2_12FieldsDefine_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_15c_data_model_v2_12FieldsDefine___init__(((struct __pyx_obj_15c_data_model_v2_FieldsDefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15c_data_model_v2_12FieldsDefine___init__(struct __pyx_obj_15c_data_model_v2_FieldsDefine *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "c_data_model_v2.pyx":1194
 * 
 *     def __init__(self):
 *         self.fields = []             # <<<<<<<<<<<<<<
 *         self.fields_by_index = {}
 *         self.fields_by_name = {}
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->fields);
  __Pyx_DECREF(__pyx_v_self->fields);
  __pyx_v_self->fields = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1195
 *     def __init__(self):
 *         self.fields = []
 *         self.fields_by_index = {}             # <<<<<<<<<<<<<<
 *         self.fields_by_name = {}
 *         self.fields_by_key = {}
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->fields_by_index);
  __Pyx_DECREF(__pyx_v_self->fields_by_index);
  __pyx_v_self->fields_by_index = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1196
 *         self.fields = []
 *         self.fields_by_index = {}
 *         self.fields_by_name = {}             # <<<<<<<<<<<<<<
 *         self.fields_by_key = {}
 *         self.fields_is_container = {}
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->fields_by_name);
  __Pyx_DECREF(__pyx_v_self->fields_by_name);
  __pyx_v_self->fields_by_name = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1197
 *         self.fields_by_index = {}
 *         self.fields_by_name = {}
 *         self.fields_by_key = {}             # <<<<<<<<<<<<<<
 *         self.fields_is_container = {}
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->fields_by_key);
  __Pyx_DECREF(__pyx_v_self->fields_by_key);
  __pyx_v_self->fields_by_key = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1198
 *         self.fields_by_name = {}
 *         self.fields_by_key = {}
 *         self.fields_is_container = {}             # <<<<<<<<<<<<<<
 * 
 *     def add_field(self, Field field):
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->fields_is_container);
  __Pyx_DECREF(__pyx_v_self->fields_is_container);
  __pyx_v_self->fields_is_container = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1193
 *     cdef dict fields_is_container
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.fields = []
 *         self.fields_by_index = {}
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.FieldsDefine.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1200
 *         self.fields_is_container = {}
 * 
 *     def add_field(self, Field field):             # <<<<<<<<<<<<<<
 *         self.fields.append(field)
 *         self.sort_fields()
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_12FieldsDefine_3add_field(PyObject *__pyx_v_self, PyObject *__pyx_v_field); /*proto*/
static char __pyx_doc_15c_data_model_v2_12FieldsDefine_2add_field[] = "FieldsDefine.add_field(self, Field field)";
static PyObject *__pyx_pw_15c_data_model_v2_12FieldsDefine_3add_field(PyObject *__pyx_v_self, PyObject *__pyx_v_field) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_field (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_field), __pyx_ptype_15c_data_model_v2_Field, 1, "field", 0))) __PYX_ERR(0, 1200, __pyx_L1_error)
  __pyx_r = __pyx_pf_15c_data_model_v2_12FieldsDefine_2add_field(((struct __pyx_obj_15c_data_model_v2_FieldsDefine *)__pyx_v_self), ((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_v_field));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_12FieldsDefine_2add_field(struct __pyx_obj_15c_data_model_v2_FieldsDefine *__pyx_v_self, struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("add_field", 0);

  /* "c_data_model_v2.pyx":1201
 * 
 *     def add_field(self, Field field):
 *         self.fields.append(field)             # <<<<<<<<<<<<<<
 *         self.sort_fields()
 *         self.fields_by_index[field.index] = field
 */
  if (unlikely(__pyx_v_self->fields == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
    __PYX_ERR(0, 1201, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_Append(__pyx_v_self->fields, ((PyObject *)__pyx_v_field)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1201, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1202
 *     def add_field(self, Field field):
 *         self.fields.append(field)
 *         self.sort_fields()             # <<<<<<<<<<<<<<
 *         self.fields_by_index[field.index] = field
 *         self.fields_by_name[field.name] = field
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_sort_fields); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1202, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1202, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":1203
 *         self.fields.append(field)
 *         self.sort_fields()
 *         self.fields_by_index[field.index] = field             # <<<<<<<<<<<<<<
 *         self.fields_by_name[field.name] = field
 *         self.fields_by_key[field.key] = field
 */
  if (unlikely(__pyx_v_self->fields_by_index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1203, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_field->index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_self->fields_by_index, __pyx_t_2, ((PyObject *)__pyx_v_field)) < 0)) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":1204
 *         self.sort_fields()
 *         self.fields_by_index[field.index] = field
 *         self.fields_by_name[field.name] = field             # <<<<<<<<<<<<<<
 *         self.fields_by_key[field.key] = field
 * 
 */
  if (unlikely(__pyx_v_self->fields_by_name == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1204, __pyx_L1_error)
  }
  if (unlikely(PyDict_SetItem(__pyx_v_self->fields_by_name, __pyx_v_field->name, ((PyObject *)__pyx_v_field)) < 0)) __PYX_ERR(0, 1204, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1205
 *         self.fields_by_index[field.index] = field
 *         self.fields_by_name[field.name] = field
 *         self.fields_by_key[field.key] = field             # <<<<<<<<<<<<<<
 * 
 *     def copy_bases_fields(self, bases):
 */
  if (unlikely(__pyx_v_self->fields_by_key == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1205, __pyx_L1_error)
  }
  if (unlikely(PyDict_SetItem(__pyx_v_self->fields_by_key, __pyx_v_field->key, ((PyObject *)__pyx_v_field)) < 0)) __PYX_ERR(0, 1205, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1200
 *         self.fields_is_container = {}
 * 
 *     def add_field(self, Field field):             # <<<<<<<<<<<<<<
 *         self.fields.append(field)
 *         self.sort_fields()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("c_data_model_v2.FieldsDefine.add_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1207
 *         self.fields_by_key[field.key] = field
 * 
 *     def copy_bases_fields(self, bases):             # <<<<<<<<<<<<<<
 *         cdef DataModelProtocol protocol
 *         for base in bases:
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_12FieldsDefine_5copy_bases_fields(PyObject *__pyx_v_self, PyObject *__pyx_v_bases); /*proto*/
static char __pyx_doc_15c_data_model_v2_12FieldsDefine_4copy_bases_fields[] = "FieldsDefine.copy_bases_fields(self, bases)";
static PyObject *__pyx_pw_15c_data_model_v2_12FieldsDefine_5copy_bases_fields(PyObject *__pyx_v_self, PyObject *__pyx_v_bases) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_bases_fields (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_12FieldsDefine_4copy_bases_fields(((struct __pyx_obj_15c_data_model_v2_FieldsDefine *)__pyx_v_self), ((PyObject *)__pyx_v_bases));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_12FieldsDefine_4copy_bases_fields(struct __pyx_obj_15c_data_model_v2_FieldsDefine *__pyx_v_self, PyObject *__pyx_v_bases) {
  struct __pyx_obj_15c_data_model_v2_DataModelProtocol *__pyx_v_protocol = 0;
  PyObject *__pyx_v_base = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("copy_bases_fields", 0);

  /* "c_data_model_v2.pyx":1209
 *     def copy_bases_fields(self, bases):
 *         cdef DataModelProtocol protocol
 *         for base in bases:             # <<<<<<<<<<<<<<
 *             protocol = try_get_protocol(base)
 *             if protocol is not None:
 */
  if (likely(PyList_CheckExact(__pyx_v_bases)) || PyTuple_CheckExact(__pyx_v_bases)) {
    __pyx_t_1 = __pyx_v_bases; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_bases); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1209, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1209, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1209, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1209, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_base, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":1210
 *         cdef DataModelProtocol protocol
 *         for base in bases:
 *             protocol = try_get_protocol(base)             # <<<<<<<<<<<<<<
 *             if protocol is not None:
 *                 self.copy_class_fields(protocol.fields_define)
 */
    __pyx_t_4 = ((PyObject *)__pyx_f_15c_data_model_v2_try_get_protocol(__pyx_v_base)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_protocol, ((struct __pyx_obj_15c_data_model_v2_DataModelProtocol *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":1211
 *         for base in bases:
 *             protocol = try_get_protocol(base)
 *             if protocol is not None:             # <<<<<<<<<<<<<<
 *                 self.copy_class_fields(protocol.fields_define)
 *                 self.copy_bases_fields(base.__bases__)
 */
    __pyx_t_5 = (((PyObject *)__pyx_v_protocol) != Py_None);
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "c_data_model_v2.pyx":1212
 *             protocol = try_get_protocol(base)
 *             if protocol is not None:
 *                 self.copy_class_fields(protocol.fields_define)             # <<<<<<<<<<<<<<
 *                 self.copy_bases_fields(base.__bases__)
 * 
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy_class_fields); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1212, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      if (!__pyx_t_8) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, ((PyObject *)__pyx_v_protocol->fields_define)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1212, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[2] = {__pyx_t_8, ((PyObject *)__pyx_v_protocol->fields_define)};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1212, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[2] = {__pyx_t_8, ((PyObject *)__pyx_v_protocol->fields_define)};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1212, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1212, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
          __Pyx_INCREF(((PyObject *)__pyx_v_protocol->fields_define));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_protocol->fields_define));
          PyTuple_SET_ITEM(__pyx_t_9, 0+1, ((PyObject *)__pyx_v_protocol->fields_define));
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1212, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "c_data_model_v2.pyx":1213
 *             if protocol is not None:
 *                 self.copy_class_fields(protocol.fields_define)
 *                 self.copy_bases_fields(base.__bases__)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy_bases_fields); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1213, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_base, __pyx_n_s_bases); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1213, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      if (!__pyx_t_8) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1213, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_9};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1213, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_9};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1213, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        } else
        #endif
        {
          __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1213, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_9);
          __pyx_t_9 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1213, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "c_data_model_v2.pyx":1211
 *         for base in bases:
 *             protocol = try_get_protocol(base)
 *             if protocol is not None:             # <<<<<<<<<<<<<<
 *                 self.copy_class_fields(protocol.fields_define)
 *                 self.copy_bases_fields(base.__bases__)
 */
    }

    /* "c_data_model_v2.pyx":1209
 *     def copy_bases_fields(self, bases):
 *         cdef DataModelProtocol protocol
 *         for base in bases:             # <<<<<<<<<<<<<<
 *             protocol = try_get_protocol(base)
 *             if protocol is not None:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1207
 *         self.fields_by_key[field.key] = field
 * 
 *     def copy_bases_fields(self, bases):             # <<<<<<<<<<<<<<
 *         cdef DataModelProtocol protocol
 *         for base in bases:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("c_data_model_v2.FieldsDefine.copy_bases_fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_protocol);
  __Pyx_XDECREF(__pyx_v_base);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1216
 * 
 * 
 *     def sort_fields(self):             # <<<<<<<<<<<<<<
 *         self.fields.sort(lambda a, b: cmp(a.index, b.index))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_12FieldsDefine_7sort_fields(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_15c_data_model_v2_12FieldsDefine_6sort_fields[] = "FieldsDefine.sort_fields(self)";
static PyObject *__pyx_pw_15c_data_model_v2_12FieldsDefine_7sort_fields(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sort_fields (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_12FieldsDefine_6sort_fields(((struct __pyx_obj_15c_data_model_v2_FieldsDefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1217
 * 
 *     def sort_fields(self):
 *         self.fields.sort(lambda a, b: cmp(a.index, b.index))             # <<<<<<<<<<<<<<
 * 
 *     def copy_class_fields(self, FieldsDefine other):
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_12FieldsDefine_11sort_fields_lambda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15c_data_model_v2_12FieldsDefine_11sort_fields_lambda = {"lambda", (PyCFunction)__pyx_pw_15c_data_model_v2_12FieldsDefine_11sort_fields_lambda, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15c_data_model_v2_12FieldsDefine_11sort_fields_lambda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("lambda", 1, 2, 2, 1); __PYX_ERR(0, 1217, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "lambda") < 0)) __PYX_ERR(0, 1217, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1217, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.FieldsDefine.sort_fields.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("lambda", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_a, __pyx_n_s_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_b, __pyx_n_s_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_cmp, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("c_data_model_v2.FieldsDefine.sort_fields.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1216
 * 
 * 
 *     def sort_fields(self):             # <<<<<<<<<<<<<<
 *         self.fields.sort(lambda a, b: cmp(a.index, b.index))
 * 
 */

static PyObject *__pyx_pf_15c_data_model_v2_12FieldsDefine_6sort_fields(struct __pyx_obj_15c_data_model_v2_FieldsDefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("sort_fields", 0);

  /* "c_data_model_v2.pyx":1217
 * 
 *     def sort_fields(self):
 *         self.fields.sort(lambda a, b: cmp(a.index, b.index))             # <<<<<<<<<<<<<<
 * 
 *     def copy_class_fields(self, FieldsDefine other):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->fields, __pyx_n_s_sort); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_15c_data_model_v2_12FieldsDefine_11sort_fields_lambda, 0, __pyx_n_s_sort_fields_locals_lambda, NULL, __pyx_n_s_c_data_model_v2, __pyx_d, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1217, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1217, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1217, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1217, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1217, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1216
 * 
 * 
 *     def sort_fields(self):             # <<<<<<<<<<<<<<
 *         self.fields.sort(lambda a, b: cmp(a.index, b.index))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("c_data_model_v2.FieldsDefine.sort_fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1219
 *         self.fields.sort(lambda a, b: cmp(a.index, b.index))
 * 
 *     def copy_class_fields(self, FieldsDefine other):             # <<<<<<<<<<<<<<
 *         '''
 *         cdef Field self_field
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_12FieldsDefine_9copy_class_fields(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_15c_data_model_v2_12FieldsDefine_8copy_class_fields[] = "FieldsDefine.copy_class_fields(self, FieldsDefine other)\n\n        cdef Field self_field\n        cdef Field cls_field\n\n        # \347\241\256\344\277\235index\345\222\214name\344\270\215\351\207\215\345\244\215\n        cdef int index\n        for index in fdef.fields_by_index:\n            if index in self.fields_by_index:\n                self_field = self.fields_by_index[index]\n                cls_field = fdef.fields_by_index[index]\n                if self_field.class_name != cls.__name__:\n                    if self_field.define_in_class is not cls_field.define_in_class:\n                        raise DuplicateIndexError(\n                            \"duplicate field index `%d' between class %s, %s\"\n                            % (index, self_field.class_name, cls.__name__))\n        for name in cls.fields_by_name:\n            if name in self.fields_by_name:\n                self_field = self.fields_by_name[name]\n                cls_field = cls.fields_by_name[name]\n                if self_field.class_name != cls.__name__:\n                    if self_field.define_in_class is not cls_field.define_in_class:\n                        raise DuplicateNameError(\n                            \"duplicate field name `%s' between class %s, %s\" %\n                            (name, self_field.class_name, cls.__name__))\n        ";
static PyObject *__pyx_pw_15c_data_model_v2_12FieldsDefine_9copy_class_fields(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_class_fields (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_15c_data_model_v2_FieldsDefine, 1, "other", 0))) __PYX_ERR(0, 1219, __pyx_L1_error)
  __pyx_r = __pyx_pf_15c_data_model_v2_12FieldsDefine_8copy_class_fields(((struct __pyx_obj_15c_data_model_v2_FieldsDefine *)__pyx_v_self), ((struct __pyx_obj_15c_data_model_v2_FieldsDefine *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_12FieldsDefine_8copy_class_fields(struct __pyx_obj_15c_data_model_v2_FieldsDefine *__pyx_v_self, struct __pyx_obj_15c_data_model_v2_FieldsDefine *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("copy_class_fields", 0);

  /* "c_data_model_v2.pyx":1246
 *         '''
 * 
 *         self.fields += other.fields[:]             # <<<<<<<<<<<<<<
 *         self.sort_fields()
 *         self.fields_by_index.update(other.fields_by_index)
 */
  if (unlikely(__pyx_v_other->fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1246, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_GetSlice(__pyx_v_other->fields, 0, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_self->fields, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->fields);
  __Pyx_DECREF(__pyx_v_self->fields);
  __pyx_v_self->fields = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":1247
 * 
 *         self.fields += other.fields[:]
 *         self.sort_fields()             # <<<<<<<<<<<<<<
 *         self.fields_by_index.update(other.fields_by_index)
 *         self.fields_by_name.update(other.fields_by_name)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_sort_fields); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1247, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1247, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":1248
 *         self.fields += other.fields[:]
 *         self.sort_fields()
 *         self.fields_by_index.update(other.fields_by_index)             # <<<<<<<<<<<<<<
 *         self.fields_by_name.update(other.fields_by_name)
 *         self.fields_by_key.update(other.fields_by_key)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->fields_by_index, __pyx_n_s_update); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_other->fields_by_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_other->fields_by_index};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1248, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_other->fields_by_index};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1248, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1248, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_other->fields_by_index);
      __Pyx_GIVEREF(__pyx_v_other->fields_by_index);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_other->fields_by_index);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1248, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":1249
 *         self.sort_fields()
 *         self.fields_by_index.update(other.fields_by_index)
 *         self.fields_by_name.update(other.fields_by_name)             # <<<<<<<<<<<<<<
 *         self.fields_by_key.update(other.fields_by_key)
 *         self.fields_is_container.update(other.fields_is_container)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->fields_by_name, __pyx_n_s_update); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_other->fields_by_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_other->fields_by_name};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1249, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_other->fields_by_name};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1249, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_other->fields_by_name);
      __Pyx_GIVEREF(__pyx_v_other->fields_by_name);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_other->fields_by_name);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":1250
 *         self.fields_by_index.update(other.fields_by_index)
 *         self.fields_by_name.update(other.fields_by_name)
 *         self.fields_by_key.update(other.fields_by_key)             # <<<<<<<<<<<<<<
 *         self.fields_is_container.update(other.fields_is_container)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->fields_by_key, __pyx_n_s_update); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_other->fields_by_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_other->fields_by_key};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1250, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_other->fields_by_key};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1250, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1250, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_other->fields_by_key);
      __Pyx_GIVEREF(__pyx_v_other->fields_by_key);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_other->fields_by_key);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1250, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":1251
 *         self.fields_by_name.update(other.fields_by_name)
 *         self.fields_by_key.update(other.fields_by_key)
 *         self.fields_is_container.update(other.fields_is_container)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->fields_is_container, __pyx_n_s_update); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_other->fields_is_container); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_other->fields_is_container};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1251, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_other->fields_is_container};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1251, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1251, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_other->fields_is_container);
      __Pyx_GIVEREF(__pyx_v_other->fields_is_container);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_other->fields_is_container);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1251, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":1219
 *         self.fields.sort(lambda a, b: cmp(a.index, b.index))
 * 
 *     def copy_class_fields(self, FieldsDefine other):             # <<<<<<<<<<<<<<
 *         '''
 *         cdef Field self_field
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("c_data_model_v2.FieldsDefine.copy_class_fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1256
 * cdef object make_get_func(Field field):
 *     if field.is_data_model_type():
 *         def get_func(self):             # <<<<<<<<<<<<<<
 *             cdef dict d = self.__dict__
 *             if field.key not in d:
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_13make_get_func_1get_func(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_15c_data_model_v2_13make_get_func_1get_func = {"get_func", (PyCFunction)__pyx_pw_15c_data_model_v2_13make_get_func_1get_func, METH_O, 0};
static PyObject *__pyx_pw_15c_data_model_v2_13make_get_func_1get_func(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_func (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_13make_get_func_get_func(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_13make_get_func_get_func(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func *__pyx_cur_scope;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func *__pyx_outer_scope;
  PyObject *__pyx_v_d = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("get_func", 0);
  __pyx_outer_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "c_data_model_v2.pyx":1257
 *     if field.is_data_model_type():
 *         def get_func(self):
 *             cdef dict d = self.__dict__             # <<<<<<<<<<<<<<
 *             if field.key not in d:
 *                 d[field.key] = _create_object(field, None)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1257, __pyx_L1_error)
  __pyx_v_d = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1258
 *         def get_func(self):
 *             cdef dict d = self.__dict__
 *             if field.key not in d:             # <<<<<<<<<<<<<<
 *                 d[field.key] = _create_object(field, None)
 *             return d[field.key]
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1258, __pyx_L1_error) }
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1258, __pyx_L1_error)
  }
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_cur_scope->__pyx_v_field->key, __pyx_v_d, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":1259
 *             cdef dict d = self.__dict__
 *             if field.key not in d:
 *                 d[field.key] = _create_object(field, None)             # <<<<<<<<<<<<<<
 *             return d[field.key]
 *         return get_func
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1259, __pyx_L1_error) }
    __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_v_field);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_4 = __pyx_f_15c_data_model_v2__create_object(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_1), ((PyObject*)Py_None)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__pyx_v_d == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1259, __pyx_L1_error)
    }
    if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1259, __pyx_L1_error) }
    if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_cur_scope->__pyx_v_field->key, __pyx_t_4) < 0)) __PYX_ERR(0, 1259, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":1258
 *         def get_func(self):
 *             cdef dict d = self.__dict__
 *             if field.key not in d:             # <<<<<<<<<<<<<<
 *                 d[field.key] = _create_object(field, None)
 *             return d[field.key]
 */
  }

  /* "c_data_model_v2.pyx":1260
 *             if field.key not in d:
 *                 d[field.key] = _create_object(field, None)
 *             return d[field.key]             # <<<<<<<<<<<<<<
 *         return get_func
 *     else:
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1260, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1260, __pyx_L1_error) }
  __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_d, __pyx_cur_scope->__pyx_v_field->key); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1256
 * cdef object make_get_func(Field field):
 *     if field.is_data_model_type():
 *         def get_func(self):             # <<<<<<<<<<<<<<
 *             cdef dict d = self.__dict__
 *             if field.key not in d:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("c_data_model_v2.make_get_func.get_func", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1263
 *         return get_func
 *     else:
 *         def get_func(self):             # <<<<<<<<<<<<<<
 *             return self.__dict__.setdefault(field.key, field.default)
 *         return get_func
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_13make_get_func_3get_func(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_15c_data_model_v2_13make_get_func_3get_func = {"get_func", (PyCFunction)__pyx_pw_15c_data_model_v2_13make_get_func_3get_func, METH_O, 0};
static PyObject *__pyx_pw_15c_data_model_v2_13make_get_func_3get_func(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_func (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_13make_get_func_2get_func(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_13make_get_func_2get_func(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func *__pyx_cur_scope;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_func", 0);
  __pyx_outer_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "c_data_model_v2.pyx":1264
 *     else:
 *         def get_func(self):
 *             return self.__dict__.setdefault(field.key, field.default)             # <<<<<<<<<<<<<<
 *         return get_func
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_setdefault); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1264, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1264, __pyx_L1_error) }
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_cur_scope->__pyx_v_field->key, __pyx_cur_scope->__pyx_v_field->__pyx_default};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1264, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_cur_scope->__pyx_v_field->key, __pyx_cur_scope->__pyx_v_field->__pyx_default};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1264, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_field->key);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_field->key);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_cur_scope->__pyx_v_field->key);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_field->__pyx_default);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_field->__pyx_default);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_cur_scope->__pyx_v_field->__pyx_default);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1263
 *         return get_func
 *     else:
 *         def get_func(self):             # <<<<<<<<<<<<<<
 *             return self.__dict__.setdefault(field.key, field.default)
 *         return get_func
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("c_data_model_v2.make_get_func.get_func", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1254
 * 
 * 
 * cdef object make_get_func(Field field):             # <<<<<<<<<<<<<<
 *     if field.is_data_model_type():
 *         def get_func(self):
 */

static PyObject *__pyx_f_15c_data_model_v2_make_get_func(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func *__pyx_cur_scope;
  PyObject *__pyx_v_get_func = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("make_get_func", 0);
  __pyx_cur_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func *)__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func(__pyx_ptype_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1254, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_field = __pyx_v_field;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_field);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_field);

  /* "c_data_model_v2.pyx":1255
 * 
 * cdef object make_get_func(Field field):
 *     if field.is_data_model_type():             # <<<<<<<<<<<<<<
 *         def get_func(self):
 *             cdef dict d = self.__dict__
 */
  __pyx_t_1 = (__pyx_f_15c_data_model_v2_5Field_is_data_model_type(__pyx_cur_scope->__pyx_v_field) != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":1256
 * cdef object make_get_func(Field field):
 *     if field.is_data_model_type():
 *         def get_func(self):             # <<<<<<<<<<<<<<
 *             cdef dict d = self.__dict__
 *             if field.key not in d:
 */
    __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_15c_data_model_v2_13make_get_func_1get_func, 0, __pyx_n_s_make_get_func_locals_get_func, ((PyObject*)__pyx_cur_scope), __pyx_n_s_c_data_model_v2, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_get_func = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "c_data_model_v2.pyx":1261
 *                 d[field.key] = _create_object(field, None)
 *             return d[field.key]
 *         return get_func             # <<<<<<<<<<<<<<
 *     else:
 *         def get_func(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_get_func);
    __pyx_r = __pyx_v_get_func;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1255
 * 
 * cdef object make_get_func(Field field):
 *     if field.is_data_model_type():             # <<<<<<<<<<<<<<
 *         def get_func(self):
 *             cdef dict d = self.__dict__
 */
  }

  /* "c_data_model_v2.pyx":1263
 *         return get_func
 *     else:
 *         def get_func(self):             # <<<<<<<<<<<<<<
 *             return self.__dict__.setdefault(field.key, field.default)
 *         return get_func
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_15c_data_model_v2_13make_get_func_3get_func, 0, __pyx_n_s_make_get_func_locals_get_func, ((PyObject*)__pyx_cur_scope), __pyx_n_s_c_data_model_v2, __pyx_d, ((PyObject *)__pyx_codeobj__24)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_get_func = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "c_data_model_v2.pyx":1265
 *         def get_func(self):
 *             return self.__dict__.setdefault(field.key, field.default)
 *         return get_func             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_get_func);
    __pyx_r = __pyx_v_get_func;
    goto __pyx_L0;
  }

  /* "c_data_model_v2.pyx":1254
 * 
 * 
 * cdef object make_get_func(Field field):             # <<<<<<<<<<<<<<
 *     if field.is_data_model_type():
 *         def get_func(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("c_data_model_v2.make_get_func", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_get_func);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1268
 * 
 * 
 * cdef object no_number_type_error(Field field):             # <<<<<<<<<<<<<<
 *     return TypeError('Field `{}: {}` is not a number type'.format(field.name, field.type_name))
 * 
 */

static PyObject *__pyx_f_15c_data_model_v2_no_number_type_error(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("no_number_type_error", 0);

  /* "c_data_model_v2.pyx":1269
 * 
 * cdef object no_number_type_error(Field field):
 *     return TypeError('Field `{}: {}` is not a number type'.format(field.name, field.type_name))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Field_is_not_a_number_type, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_field->name, __pyx_v_field->type_name};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1269, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_field->name, __pyx_v_field->type_name};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1269, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_field->name);
    __Pyx_GIVEREF(__pyx_v_field->name);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_field->name);
    __Pyx_INCREF(__pyx_v_field->type_name);
    __Pyx_GIVEREF(__pyx_v_field->type_name);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_field->type_name);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1268
 * 
 * 
 * cdef object no_number_type_error(Field field):             # <<<<<<<<<<<<<<
 *     return TypeError('Field `{}: {}` is not a number type'.format(field.name, field.type_name))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("c_data_model_v2.no_number_type_error", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1275
 *     if field.type_name in _int_types:
 *         if field.type_name in _unsigned_int_types:
 *             def _add(object self, uint64 value):             # <<<<<<<<<<<<<<
 *                 cdef dict d = self.__dict__
 *                 cdef uint64 old_value = d.get(field.key, 0)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_13make_add_func_1_add(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15c_data_model_v2_13make_add_func_1_add = {"_add", (PyCFunction)__pyx_pw_15c_data_model_v2_13make_add_func_1_add, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15c_data_model_v2_13make_add_func_1_add(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  __pyx_t_15c_data_model_v2_uint64 __pyx_v_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add", 1, 2, 2, 1); __PYX_ERR(0, 1275, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_add") < 0)) __PYX_ERR(0, 1275, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_value = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(values[1]); if (unlikely((__pyx_v_value == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 1275, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_add", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1275, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.make_add_func._add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_13make_add_func__add(__pyx_self, __pyx_v_self, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_13make_add_func__add(PyObject *__pyx_self, PyObject *__pyx_v_self, __pyx_t_15c_data_model_v2_uint64 __pyx_v_value) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func *__pyx_cur_scope;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func *__pyx_outer_scope;
  PyObject *__pyx_v_d = 0;
  __pyx_t_15c_data_model_v2_uint64 __pyx_v_old_value;
  __pyx_t_15c_data_model_v2_uint64 __pyx_v_new_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_15c_data_model_v2_uint64 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_add", 0);
  __pyx_outer_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "c_data_model_v2.pyx":1276
 *         if field.type_name in _unsigned_int_types:
 *             def _add(object self, uint64 value):
 *                 cdef dict d = self.__dict__             # <<<<<<<<<<<<<<
 *                 cdef uint64 old_value = d.get(field.key, 0)
 *                 cdef uint64 new_value = old_value + value
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1276, __pyx_L1_error)
  __pyx_v_d = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1277
 *             def _add(object self, uint64 value):
 *                 cdef dict d = self.__dict__
 *                 cdef uint64 old_value = d.get(field.key, 0)             # <<<<<<<<<<<<<<
 *                 cdef uint64 new_value = old_value + value
 *                 d[field.key] = new_value
 */
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 1277, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1277, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_d, __pyx_cur_scope->__pyx_v_field->key, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_1); if (unlikely((__pyx_t_2 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_old_value = __pyx_t_2;

  /* "c_data_model_v2.pyx":1278
 *                 cdef dict d = self.__dict__
 *                 cdef uint64 old_value = d.get(field.key, 0)
 *                 cdef uint64 new_value = old_value + value             # <<<<<<<<<<<<<<
 *                 d[field.key] = new_value
 *                 return int(value), int(new_value)
 */
  __pyx_v_new_value = (__pyx_v_old_value + __pyx_v_value);

  /* "c_data_model_v2.pyx":1279
 *                 cdef uint64 old_value = d.get(field.key, 0)
 *                 cdef uint64 new_value = old_value + value
 *                 d[field.key] = new_value             # <<<<<<<<<<<<<<
 *                 return int(value), int(new_value)
 *             return _add
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_new_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1279, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1279, __pyx_L1_error) }
  if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_cur_scope->__pyx_v_field->key, __pyx_t_1) < 0)) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1280
 *                 cdef uint64 new_value = old_value + value
 *                 d[field.key] = new_value
 *                 return int(value), int(new_value)             # <<<<<<<<<<<<<<
 *             return _add
 *         else:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_new_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1275
 *     if field.type_name in _int_types:
 *         if field.type_name in _unsigned_int_types:
 *             def _add(object self, uint64 value):             # <<<<<<<<<<<<<<
 *                 cdef dict d = self.__dict__
 *                 cdef uint64 old_value = d.get(field.key, 0)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("c_data_model_v2.make_add_func._add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1283
 *             return _add
 *         else:
 *             def _add(object self, int64 value):             # <<<<<<<<<<<<<<
 *                 cdef dict d = self.__dict__
 *                 cdef int64 old_value = d.get(field.key, 0)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_13make_add_func_3_add(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15c_data_model_v2_13make_add_func_3_add = {"_add", (PyCFunction)__pyx_pw_15c_data_model_v2_13make_add_func_3_add, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15c_data_model_v2_13make_add_func_3_add(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  __pyx_t_15c_data_model_v2_int64 __pyx_v_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add", 1, 2, 2, 1); __PYX_ERR(0, 1283, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_add") < 0)) __PYX_ERR(0, 1283, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_value = __Pyx_PyInt_As_PY_LONG_LONG(values[1]); if (unlikely((__pyx_v_value == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 1283, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_add", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1283, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.make_add_func._add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_13make_add_func_2_add(__pyx_self, __pyx_v_self, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_13make_add_func_2_add(PyObject *__pyx_self, PyObject *__pyx_v_self, __pyx_t_15c_data_model_v2_int64 __pyx_v_value) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func *__pyx_cur_scope;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func *__pyx_outer_scope;
  PyObject *__pyx_v_d = 0;
  __pyx_t_15c_data_model_v2_int64 __pyx_v_old_value;
  __pyx_t_15c_data_model_v2_int64 __pyx_v_new_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_15c_data_model_v2_int64 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_add", 0);
  __pyx_outer_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "c_data_model_v2.pyx":1284
 *         else:
 *             def _add(object self, int64 value):
 *                 cdef dict d = self.__dict__             # <<<<<<<<<<<<<<
 *                 cdef int64 old_value = d.get(field.key, 0)
 *                 cdef int64 new_value = old_value + value
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1284, __pyx_L1_error)
  __pyx_v_d = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1285
 *             def _add(object self, int64 value):
 *                 cdef dict d = self.__dict__
 *                 cdef int64 old_value = d.get(field.key, 0)             # <<<<<<<<<<<<<<
 *                 cdef int64 new_value = old_value + value
 *                 d[field.key] = new_value
 */
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 1285, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1285, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_d, __pyx_cur_scope->__pyx_v_field->key, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_t_1); if (unlikely((__pyx_t_2 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 1285, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_old_value = __pyx_t_2;

  /* "c_data_model_v2.pyx":1286
 *                 cdef dict d = self.__dict__
 *                 cdef int64 old_value = d.get(field.key, 0)
 *                 cdef int64 new_value = old_value + value             # <<<<<<<<<<<<<<
 *                 d[field.key] = new_value
 *                 return int(value), int(new_value)
 */
  __pyx_v_new_value = (__pyx_v_old_value + __pyx_v_value);

  /* "c_data_model_v2.pyx":1287
 *                 cdef int64 old_value = d.get(field.key, 0)
 *                 cdef int64 new_value = old_value + value
 *                 d[field.key] = new_value             # <<<<<<<<<<<<<<
 *                 return int(value), int(new_value)
 *             return _add
 */
  __pyx_t_1 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_new_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1287, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1287, __pyx_L1_error) }
  if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_cur_scope->__pyx_v_field->key, __pyx_t_1) < 0)) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1288
 *                 cdef int64 new_value = old_value + value
 *                 d[field.key] = new_value
 *                 return int(value), int(new_value)             # <<<<<<<<<<<<<<
 *             return _add
 *     elif field.type_name in _float_types:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_new_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1283
 *             return _add
 *         else:
 *             def _add(object self, int64 value):             # <<<<<<<<<<<<<<
 *                 cdef dict d = self.__dict__
 *                 cdef int64 old_value = d.get(field.key, 0)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("c_data_model_v2.make_add_func._add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1291
 *             return _add
 *     elif field.type_name in _float_types:
 *         def _add(object self, double value):             # <<<<<<<<<<<<<<
 *             cdef dict d = self.__dict__
 *             cdef double old_value = d.get(field.key, 0.0)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_13make_add_func_5_add(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15c_data_model_v2_13make_add_func_5_add = {"_add", (PyCFunction)__pyx_pw_15c_data_model_v2_13make_add_func_5_add, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15c_data_model_v2_13make_add_func_5_add(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  double __pyx_v_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add", 1, 2, 2, 1); __PYX_ERR(0, 1291, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_add") < 0)) __PYX_ERR(0, 1291, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_value = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1291, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_add", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1291, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.make_add_func._add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_13make_add_func_4_add(__pyx_self, __pyx_v_self, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_13make_add_func_4_add(PyObject *__pyx_self, PyObject *__pyx_v_self, double __pyx_v_value) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func *__pyx_cur_scope;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func *__pyx_outer_scope;
  PyObject *__pyx_v_d = 0;
  double __pyx_v_old_value;
  double __pyx_v_new_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_add", 0);
  __pyx_outer_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "c_data_model_v2.pyx":1292
 *     elif field.type_name in _float_types:
 *         def _add(object self, double value):
 *             cdef dict d = self.__dict__             # <<<<<<<<<<<<<<
 *             cdef double old_value = d.get(field.key, 0.0)
 *             cdef double new_value = old_value + value
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1292, __pyx_L1_error)
  __pyx_v_d = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1293
 *         def _add(object self, double value):
 *             cdef dict d = self.__dict__
 *             cdef double old_value = d.get(field.key, 0.0)             # <<<<<<<<<<<<<<
 *             cdef double new_value = old_value + value
 *             d[field.key] = new_value
 */
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 1293, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1293, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_d, __pyx_cur_scope->__pyx_v_field->key, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_old_value = __pyx_t_2;

  /* "c_data_model_v2.pyx":1294
 *             cdef dict d = self.__dict__
 *             cdef double old_value = d.get(field.key, 0.0)
 *             cdef double new_value = old_value + value             # <<<<<<<<<<<<<<
 *             d[field.key] = new_value
 *             return value, new_value
 */
  __pyx_v_new_value = (__pyx_v_old_value + __pyx_v_value);

  /* "c_data_model_v2.pyx":1295
 *             cdef double old_value = d.get(field.key, 0.0)
 *             cdef double new_value = old_value + value
 *             d[field.key] = new_value             # <<<<<<<<<<<<<<
 *             return value, new_value
 *         return _add
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_new_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1295, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1295, __pyx_L1_error) }
  if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_cur_scope->__pyx_v_field->key, __pyx_t_1) < 0)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1296
 *             cdef double new_value = old_value + value
 *             d[field.key] = new_value
 *             return value, new_value             # <<<<<<<<<<<<<<
 *         return _add
 *     else:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_new_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1291
 *             return _add
 *     elif field.type_name in _float_types:
 *         def _add(object self, double value):             # <<<<<<<<<<<<<<
 *             cdef dict d = self.__dict__
 *             cdef double old_value = d.get(field.key, 0.0)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("c_data_model_v2.make_add_func._add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1272
 * 
 * 
 * cdef object make_add_func(Field field):             # <<<<<<<<<<<<<<
 *     if field.type_name in _int_types:
 *         if field.type_name in _unsigned_int_types:
 */

static PyObject *__pyx_f_15c_data_model_v2_make_add_func(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func *__pyx_cur_scope;
  PyObject *__pyx_v__add = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("make_add_func", 0);
  __pyx_cur_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func *)__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func(__pyx_ptype_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1272, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_field = __pyx_v_field;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_field);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_field);

  /* "c_data_model_v2.pyx":1273
 * 
 * cdef object make_add_func(Field field):
 *     if field.type_name in _int_types:             # <<<<<<<<<<<<<<
 *         if field.type_name in _unsigned_int_types:
 *             def _add(object self, uint64 value):
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_cur_scope->__pyx_v_field->type_name, __pyx_v_15c_data_model_v2__int_types, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1273, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":1274
 * cdef object make_add_func(Field field):
 *     if field.type_name in _int_types:
 *         if field.type_name in _unsigned_int_types:             # <<<<<<<<<<<<<<
 *             def _add(object self, uint64 value):
 *                 cdef dict d = self.__dict__
 */
    __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_cur_scope->__pyx_v_field->type_name, __pyx_v_15c_data_model_v2__unsigned_int_types, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1274, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":1275
 *     if field.type_name in _int_types:
 *         if field.type_name in _unsigned_int_types:
 *             def _add(object self, uint64 value):             # <<<<<<<<<<<<<<
 *                 cdef dict d = self.__dict__
 *                 cdef uint64 old_value = d.get(field.key, 0)
 */
      __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_15c_data_model_v2_13make_add_func_1_add, 0, __pyx_n_s_make_add_func_locals__add, ((PyObject*)__pyx_cur_scope), __pyx_n_s_c_data_model_v2, __pyx_d, ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1275, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v__add = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "c_data_model_v2.pyx":1281
 *                 d[field.key] = new_value
 *                 return int(value), int(new_value)
 *             return _add             # <<<<<<<<<<<<<<
 *         else:
 *             def _add(object self, int64 value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v__add);
      __pyx_r = __pyx_v__add;
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":1274
 * cdef object make_add_func(Field field):
 *     if field.type_name in _int_types:
 *         if field.type_name in _unsigned_int_types:             # <<<<<<<<<<<<<<
 *             def _add(object self, uint64 value):
 *                 cdef dict d = self.__dict__
 */
    }

    /* "c_data_model_v2.pyx":1283
 *             return _add
 *         else:
 *             def _add(object self, int64 value):             # <<<<<<<<<<<<<<
 *                 cdef dict d = self.__dict__
 *                 cdef int64 old_value = d.get(field.key, 0)
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_15c_data_model_v2_13make_add_func_3_add, 0, __pyx_n_s_make_add_func_locals__add, ((PyObject*)__pyx_cur_scope), __pyx_n_s_c_data_model_v2, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1283, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v__add = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "c_data_model_v2.pyx":1289
 *                 d[field.key] = new_value
 *                 return int(value), int(new_value)
 *             return _add             # <<<<<<<<<<<<<<
 *     elif field.type_name in _float_types:
 *         def _add(object self, double value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v__add);
      __pyx_r = __pyx_v__add;
      goto __pyx_L0;
    }

    /* "c_data_model_v2.pyx":1273
 * 
 * cdef object make_add_func(Field field):
 *     if field.type_name in _int_types:             # <<<<<<<<<<<<<<
 *         if field.type_name in _unsigned_int_types:
 *             def _add(object self, uint64 value):
 */
  }

  /* "c_data_model_v2.pyx":1290
 *                 return int(value), int(new_value)
 *             return _add
 *     elif field.type_name in _float_types:             # <<<<<<<<<<<<<<
 *         def _add(object self, double value):
 *             cdef dict d = self.__dict__
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_cur_scope->__pyx_v_field->type_name, __pyx_v_15c_data_model_v2__float_types, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1290, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":1291
 *             return _add
 *     elif field.type_name in _float_types:
 *         def _add(object self, double value):             # <<<<<<<<<<<<<<
 *             cdef dict d = self.__dict__
 *             cdef double old_value = d.get(field.key, 0.0)
 */
    __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_15c_data_model_v2_13make_add_func_5_add, 0, __pyx_n_s_make_add_func_locals__add, ((PyObject*)__pyx_cur_scope), __pyx_n_s_c_data_model_v2, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v__add = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "c_data_model_v2.pyx":1297
 *             d[field.key] = new_value
 *             return value, new_value
 *         return _add             # <<<<<<<<<<<<<<
 *     else:
 *         raise no_number_type_error(field)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v__add);
    __pyx_r = __pyx_v__add;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1290
 *                 return int(value), int(new_value)
 *             return _add
 *     elif field.type_name in _float_types:             # <<<<<<<<<<<<<<
 *         def _add(object self, double value):
 *             cdef dict d = self.__dict__
 */
  }

  /* "c_data_model_v2.pyx":1299
 *         return _add
 *     else:
 *         raise no_number_type_error(field)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_3 = ((PyObject *)__pyx_cur_scope->__pyx_v_field);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = __pyx_f_15c_data_model_v2_no_number_type_error(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1299, __pyx_L1_error)
  }

  /* "c_data_model_v2.pyx":1272
 * 
 * 
 * cdef object make_add_func(Field field):             # <<<<<<<<<<<<<<
 *     if field.type_name in _int_types:
 *         if field.type_name in _unsigned_int_types:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("c_data_model_v2.make_add_func", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__add);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1313
 *     if field.type_name in _int_types:
 *         if field.type_name in _unsigned_int_types:
 *             def _sub(object self, object value):             # <<<<<<<<<<<<<<
 *                 cdef dict d = self.__dict__
 *                 cdef uint64 old_value = d.get(field.key, 0)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_28make_sub_func_with_min_value_1_sub(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15c_data_model_v2_28make_sub_func_with_min_value_1_sub = {"_sub", (PyCFunction)__pyx_pw_15c_data_model_v2_28make_sub_func_with_min_value_1_sub, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15c_data_model_v2_28make_sub_func_with_min_value_1_sub(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_sub (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_sub", 1, 2, 2, 1); __PYX_ERR(0, 1313, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_sub") < 0)) __PYX_ERR(0, 1313, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_sub", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1313, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.make_sub_func_with_min_value._sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_28make_sub_func_with_min_value__sub(__pyx_self, __pyx_v_self, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_28make_sub_func_with_min_value__sub(PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value *__pyx_cur_scope;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value *__pyx_outer_scope;
  PyObject *__pyx_v_d = 0;
  __pyx_t_15c_data_model_v2_uint64 __pyx_v_old_value;
  __pyx_t_15c_data_model_v2_uint64 __pyx_v_new_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_15c_data_model_v2_uint64 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_sub", 0);
  __pyx_outer_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "c_data_model_v2.pyx":1314
 *         if field.type_name in _unsigned_int_types:
 *             def _sub(object self, object value):
 *                 cdef dict d = self.__dict__             # <<<<<<<<<<<<<<
 *                 cdef uint64 old_value = d.get(field.key, 0)
 *                 cdef uint64 new_value = old_value - value
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1314, __pyx_L1_error)
  __pyx_v_d = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1315
 *             def _sub(object self, object value):
 *                 cdef dict d = self.__dict__
 *                 cdef uint64 old_value = d.get(field.key, 0)             # <<<<<<<<<<<<<<
 *                 cdef uint64 new_value = old_value - value
 *                 if new_value < ui_min_value:
 */
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 1315, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1315, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_d, __pyx_cur_scope->__pyx_v_field->key, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_1); if (unlikely((__pyx_t_2 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 1315, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_old_value = __pyx_t_2;

  /* "c_data_model_v2.pyx":1316
 *                 cdef dict d = self.__dict__
 *                 cdef uint64 old_value = d.get(field.key, 0)
 *                 cdef uint64 new_value = old_value - value             # <<<<<<<<<<<<<<
 *                 if new_value < ui_min_value:
 *                     raise OverflowError('overflow lower limit')
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_old_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_3); if (unlikely((__pyx_t_2 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 1316, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_new_value = __pyx_t_2;

  /* "c_data_model_v2.pyx":1317
 *                 cdef uint64 old_value = d.get(field.key, 0)
 *                 cdef uint64 new_value = old_value - value
 *                 if new_value < ui_min_value:             # <<<<<<<<<<<<<<
 *                     raise OverflowError('overflow lower limit')
 *                 d[field.key] = new_value
 */
  __pyx_t_4 = ((__pyx_v_new_value < __pyx_cur_scope->__pyx_v_ui_min_value) != 0);
  if (__pyx_t_4) {

    /* "c_data_model_v2.pyx":1318
 *                 cdef uint64 new_value = old_value - value
 *                 if new_value < ui_min_value:
 *                     raise OverflowError('overflow lower limit')             # <<<<<<<<<<<<<<
 *                 d[field.key] = new_value
 *                 return int(old_value - new_value), int(new_value)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_OverflowError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1318, __pyx_L1_error)

    /* "c_data_model_v2.pyx":1317
 *                 cdef uint64 old_value = d.get(field.key, 0)
 *                 cdef uint64 new_value = old_value - value
 *                 if new_value < ui_min_value:             # <<<<<<<<<<<<<<
 *                     raise OverflowError('overflow lower limit')
 *                 d[field.key] = new_value
 */
  }

  /* "c_data_model_v2.pyx":1319
 *                 if new_value < ui_min_value:
 *                     raise OverflowError('overflow lower limit')
 *                 d[field.key] = new_value             # <<<<<<<<<<<<<<
 *                 return int(old_value - new_value), int(new_value)
 *             return _sub
 */
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_new_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1319, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1319, __pyx_L1_error) }
  if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_cur_scope->__pyx_v_field->key, __pyx_t_3) < 0)) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "c_data_model_v2.pyx":1320
 *                     raise OverflowError('overflow lower limit')
 *                 d[field.key] = new_value
 *                 return int(old_value - new_value), int(new_value)             # <<<<<<<<<<<<<<
 *             return _sub
 *         else:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG((__pyx_v_old_value - __pyx_v_new_value)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_new_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1313
 *     if field.type_name in _int_types:
 *         if field.type_name in _unsigned_int_types:
 *             def _sub(object self, object value):             # <<<<<<<<<<<<<<
 *                 cdef dict d = self.__dict__
 *                 cdef uint64 old_value = d.get(field.key, 0)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("c_data_model_v2.make_sub_func_with_min_value._sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1323
 *             return _sub
 *         else:
 *             def _sub(object self, object value):             # <<<<<<<<<<<<<<
 *                 cdef dict d = self.__dict__
 *                 cdef int64 old_value = d.get(field.key, 0)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_28make_sub_func_with_min_value_3_sub(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15c_data_model_v2_28make_sub_func_with_min_value_3_sub = {"_sub", (PyCFunction)__pyx_pw_15c_data_model_v2_28make_sub_func_with_min_value_3_sub, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15c_data_model_v2_28make_sub_func_with_min_value_3_sub(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_sub (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_sub", 1, 2, 2, 1); __PYX_ERR(0, 1323, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_sub") < 0)) __PYX_ERR(0, 1323, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_sub", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1323, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.make_sub_func_with_min_value._sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_28make_sub_func_with_min_value_2_sub(__pyx_self, __pyx_v_self, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_28make_sub_func_with_min_value_2_sub(PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value *__pyx_cur_scope;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value *__pyx_outer_scope;
  PyObject *__pyx_v_d = 0;
  __pyx_t_15c_data_model_v2_int64 __pyx_v_old_value;
  __pyx_t_15c_data_model_v2_int64 __pyx_v_new_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_15c_data_model_v2_int64 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_sub", 0);
  __pyx_outer_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "c_data_model_v2.pyx":1324
 *         else:
 *             def _sub(object self, object value):
 *                 cdef dict d = self.__dict__             # <<<<<<<<<<<<<<
 *                 cdef int64 old_value = d.get(field.key, 0)
 *                 cdef int64 new_value = old_value - value
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1324, __pyx_L1_error)
  __pyx_v_d = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1325
 *             def _sub(object self, object value):
 *                 cdef dict d = self.__dict__
 *                 cdef int64 old_value = d.get(field.key, 0)             # <<<<<<<<<<<<<<
 *                 cdef int64 new_value = old_value - value
 *                 if new_value < i_min_value:
 */
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 1325, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1325, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_d, __pyx_cur_scope->__pyx_v_field->key, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_t_1); if (unlikely((__pyx_t_2 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 1325, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_old_value = __pyx_t_2;

  /* "c_data_model_v2.pyx":1326
 *                 cdef dict d = self.__dict__
 *                 cdef int64 old_value = d.get(field.key, 0)
 *                 cdef int64 new_value = old_value - value             # <<<<<<<<<<<<<<
 *                 if new_value < i_min_value:
 *                     raise OverflowError('overflow lower limit')
 */
  __pyx_t_1 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_old_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_t_3); if (unlikely((__pyx_t_2 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 1326, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_new_value = __pyx_t_2;

  /* "c_data_model_v2.pyx":1327
 *                 cdef int64 old_value = d.get(field.key, 0)
 *                 cdef int64 new_value = old_value - value
 *                 if new_value < i_min_value:             # <<<<<<<<<<<<<<
 *                     raise OverflowError('overflow lower limit')
 *                 d[field.key] = new_value
 */
  __pyx_t_4 = ((__pyx_v_new_value < __pyx_cur_scope->__pyx_v_i_min_value) != 0);
  if (__pyx_t_4) {

    /* "c_data_model_v2.pyx":1328
 *                 cdef int64 new_value = old_value - value
 *                 if new_value < i_min_value:
 *                     raise OverflowError('overflow lower limit')             # <<<<<<<<<<<<<<
 *                 d[field.key] = new_value
 *                 return int(old_value - new_value), int(new_value)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_OverflowError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1328, __pyx_L1_error)

    /* "c_data_model_v2.pyx":1327
 *                 cdef int64 old_value = d.get(field.key, 0)
 *                 cdef int64 new_value = old_value - value
 *                 if new_value < i_min_value:             # <<<<<<<<<<<<<<
 *                     raise OverflowError('overflow lower limit')
 *                 d[field.key] = new_value
 */
  }

  /* "c_data_model_v2.pyx":1329
 *                 if new_value < i_min_value:
 *                     raise OverflowError('overflow lower limit')
 *                 d[field.key] = new_value             # <<<<<<<<<<<<<<
 *                 return int(old_value - new_value), int(new_value)
 *             return _sub
 */
  __pyx_t_3 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_new_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1329, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1329, __pyx_L1_error) }
  if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_cur_scope->__pyx_v_field->key, __pyx_t_3) < 0)) __PYX_ERR(0, 1329, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "c_data_model_v2.pyx":1330
 *                     raise OverflowError('overflow lower limit')
 *                 d[field.key] = new_value
 *                 return int(old_value - new_value), int(new_value)             # <<<<<<<<<<<<<<
 *             return _sub
 *     elif field.type_name in _float_types:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_PY_LONG_LONG((__pyx_v_old_value - __pyx_v_new_value)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_new_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1323
 *             return _sub
 *         else:
 *             def _sub(object self, object value):             # <<<<<<<<<<<<<<
 *                 cdef dict d = self.__dict__
 *                 cdef int64 old_value = d.get(field.key, 0)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("c_data_model_v2.make_sub_func_with_min_value._sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1333
 *             return _sub
 *     elif field.type_name in _float_types:
 *         def _sub(object self, object value):             # <<<<<<<<<<<<<<
 *             cdef dict d = self.__dict__
 *             cdef double old_value = d.get(field.key, 0.0)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_28make_sub_func_with_min_value_5_sub(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15c_data_model_v2_28make_sub_func_with_min_value_5_sub = {"_sub", (PyCFunction)__pyx_pw_15c_data_model_v2_28make_sub_func_with_min_value_5_sub, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15c_data_model_v2_28make_sub_func_with_min_value_5_sub(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_sub (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_sub", 1, 2, 2, 1); __PYX_ERR(0, 1333, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_sub") < 0)) __PYX_ERR(0, 1333, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_sub", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1333, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.make_sub_func_with_min_value._sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_28make_sub_func_with_min_value_4_sub(__pyx_self, __pyx_v_self, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_28make_sub_func_with_min_value_4_sub(PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value *__pyx_cur_scope;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value *__pyx_outer_scope;
  PyObject *__pyx_v_d = 0;
  double __pyx_v_old_value;
  double __pyx_v_new_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_sub", 0);
  __pyx_outer_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "c_data_model_v2.pyx":1334
 *     elif field.type_name in _float_types:
 *         def _sub(object self, object value):
 *             cdef dict d = self.__dict__             # <<<<<<<<<<<<<<
 *             cdef double old_value = d.get(field.key, 0.0)
 *             cdef double new_value = old_value - value
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1334, __pyx_L1_error)
  __pyx_v_d = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1335
 *         def _sub(object self, object value):
 *             cdef dict d = self.__dict__
 *             cdef double old_value = d.get(field.key, 0.0)             # <<<<<<<<<<<<<<
 *             cdef double new_value = old_value - value
 *             if new_value < f_min_value:
 */
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 1335, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1335, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_d, __pyx_cur_scope->__pyx_v_field->key, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_old_value = __pyx_t_2;

  /* "c_data_model_v2.pyx":1336
 *             cdef dict d = self.__dict__
 *             cdef double old_value = d.get(field.key, 0.0)
 *             cdef double new_value = old_value - value             # <<<<<<<<<<<<<<
 *             if new_value < f_min_value:
 *                 raise OverflowError('overflow lower limit')
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_old_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1336, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_new_value = __pyx_t_2;

  /* "c_data_model_v2.pyx":1337
 *             cdef double old_value = d.get(field.key, 0.0)
 *             cdef double new_value = old_value - value
 *             if new_value < f_min_value:             # <<<<<<<<<<<<<<
 *                 raise OverflowError('overflow lower limit')
 *             d[field.key] = new_value
 */
  __pyx_t_4 = ((__pyx_v_new_value < __pyx_cur_scope->__pyx_v_f_min_value) != 0);
  if (__pyx_t_4) {

    /* "c_data_model_v2.pyx":1338
 *             cdef double new_value = old_value - value
 *             if new_value < f_min_value:
 *                 raise OverflowError('overflow lower limit')             # <<<<<<<<<<<<<<
 *             d[field.key] = new_value
 *             return old_value - new_value, new_value
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_OverflowError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1338, __pyx_L1_error)

    /* "c_data_model_v2.pyx":1337
 *             cdef double old_value = d.get(field.key, 0.0)
 *             cdef double new_value = old_value - value
 *             if new_value < f_min_value:             # <<<<<<<<<<<<<<
 *                 raise OverflowError('overflow lower limit')
 *             d[field.key] = new_value
 */
  }

  /* "c_data_model_v2.pyx":1339
 *             if new_value < f_min_value:
 *                 raise OverflowError('overflow lower limit')
 *             d[field.key] = new_value             # <<<<<<<<<<<<<<
 *             return old_value - new_value, new_value
 *         return _sub
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_new_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1339, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1339, __pyx_L1_error) }
  if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_cur_scope->__pyx_v_field->key, __pyx_t_3) < 0)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "c_data_model_v2.pyx":1340
 *                 raise OverflowError('overflow lower limit')
 *             d[field.key] = new_value
 *             return old_value - new_value, new_value             # <<<<<<<<<<<<<<
 *         return _sub
 *     else:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_old_value - __pyx_v_new_value)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_new_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1333
 *             return _sub
 *     elif field.type_name in _float_types:
 *         def _sub(object self, object value):             # <<<<<<<<<<<<<<
 *             cdef dict d = self.__dict__
 *             cdef double old_value = d.get(field.key, 0.0)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("c_data_model_v2.make_sub_func_with_min_value._sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1302
 * 
 * 
 * cdef object make_sub_func_with_min_value(Field field):             # <<<<<<<<<<<<<<
 *     cdef int64 i_min_value = 0
 *     cdef uint64 ui_min_value = 0
 */

static PyObject *__pyx_f_15c_data_model_v2_make_sub_func_with_min_value(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value *__pyx_cur_scope;
  PyObject *__pyx_v__sub = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("make_sub_func_with_min_value", 0);
  __pyx_cur_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value *)__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value(__pyx_ptype_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1302, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_field = __pyx_v_field;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_field);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_field);

  /* "c_data_model_v2.pyx":1303
 * 
 * cdef object make_sub_func_with_min_value(Field field):
 *     cdef int64 i_min_value = 0             # <<<<<<<<<<<<<<
 *     cdef uint64 ui_min_value = 0
 *     cdef double f_min_value = 0.0
 */
  __pyx_cur_scope->__pyx_v_i_min_value = 0;

  /* "c_data_model_v2.pyx":1304
 * cdef object make_sub_func_with_min_value(Field field):
 *     cdef int64 i_min_value = 0
 *     cdef uint64 ui_min_value = 0             # <<<<<<<<<<<<<<
 *     cdef double f_min_value = 0.0
 *     if field.has_min_value:
 */
  __pyx_cur_scope->__pyx_v_ui_min_value = 0;

  /* "c_data_model_v2.pyx":1305
 *     cdef int64 i_min_value = 0
 *     cdef uint64 ui_min_value = 0
 *     cdef double f_min_value = 0.0             # <<<<<<<<<<<<<<
 *     if field.has_min_value:
 *         i_min_value = field.min_value
 */
  __pyx_cur_scope->__pyx_v_f_min_value = 0.0;

  /* "c_data_model_v2.pyx":1306
 *     cdef uint64 ui_min_value = 0
 *     cdef double f_min_value = 0.0
 *     if field.has_min_value:             # <<<<<<<<<<<<<<
 *         i_min_value = field.min_value
 *         ui_min_value = field.min_value
 */
  __pyx_t_1 = (__pyx_cur_scope->__pyx_v_field->has_min_value != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":1307
 *     cdef double f_min_value = 0.0
 *     if field.has_min_value:
 *         i_min_value = field.min_value             # <<<<<<<<<<<<<<
 *         ui_min_value = field.min_value
 *         f_min_value = field.min_value
 */
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_field->min_value;
    __pyx_cur_scope->__pyx_v_i_min_value = __pyx_t_2;

    /* "c_data_model_v2.pyx":1308
 *     if field.has_min_value:
 *         i_min_value = field.min_value
 *         ui_min_value = field.min_value             # <<<<<<<<<<<<<<
 *         f_min_value = field.min_value
 * 
 */
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_field->min_value;
    __pyx_cur_scope->__pyx_v_ui_min_value = __pyx_t_2;

    /* "c_data_model_v2.pyx":1309
 *         i_min_value = field.min_value
 *         ui_min_value = field.min_value
 *         f_min_value = field.min_value             # <<<<<<<<<<<<<<
 * 
 *     if field.type_name in _int_types:
 */
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_field->min_value;
    __pyx_cur_scope->__pyx_v_f_min_value = __pyx_t_2;

    /* "c_data_model_v2.pyx":1306
 *     cdef uint64 ui_min_value = 0
 *     cdef double f_min_value = 0.0
 *     if field.has_min_value:             # <<<<<<<<<<<<<<
 *         i_min_value = field.min_value
 *         ui_min_value = field.min_value
 */
  }

  /* "c_data_model_v2.pyx":1311
 *         f_min_value = field.min_value
 * 
 *     if field.type_name in _int_types:             # <<<<<<<<<<<<<<
 *         if field.type_name in _unsigned_int_types:
 *             def _sub(object self, object value):
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_cur_scope->__pyx_v_field->type_name, __pyx_v_15c_data_model_v2__int_types, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":1312
 * 
 *     if field.type_name in _int_types:
 *         if field.type_name in _unsigned_int_types:             # <<<<<<<<<<<<<<
 *             def _sub(object self, object value):
 *                 cdef dict d = self.__dict__
 */
    __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_cur_scope->__pyx_v_field->type_name, __pyx_v_15c_data_model_v2__unsigned_int_types, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_3 != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":1313
 *     if field.type_name in _int_types:
 *         if field.type_name in _unsigned_int_types:
 *             def _sub(object self, object value):             # <<<<<<<<<<<<<<
 *                 cdef dict d = self.__dict__
 *                 cdef uint64 old_value = d.get(field.key, 0)
 */
      __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_15c_data_model_v2_28make_sub_func_with_min_value_1_sub, 0, __pyx_n_s_make_sub_func_with_min_value_loc, ((PyObject*)__pyx_cur_scope), __pyx_n_s_c_data_model_v2, __pyx_d, ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1313, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v__sub = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "c_data_model_v2.pyx":1321
 *                 d[field.key] = new_value
 *                 return int(old_value - new_value), int(new_value)
 *             return _sub             # <<<<<<<<<<<<<<
 *         else:
 *             def _sub(object self, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v__sub);
      __pyx_r = __pyx_v__sub;
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":1312
 * 
 *     if field.type_name in _int_types:
 *         if field.type_name in _unsigned_int_types:             # <<<<<<<<<<<<<<
 *             def _sub(object self, object value):
 *                 cdef dict d = self.__dict__
 */
    }

    /* "c_data_model_v2.pyx":1323
 *             return _sub
 *         else:
 *             def _sub(object self, object value):             # <<<<<<<<<<<<<<
 *                 cdef dict d = self.__dict__
 *                 cdef int64 old_value = d.get(field.key, 0)
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_15c_data_model_v2_28make_sub_func_with_min_value_3_sub, 0, __pyx_n_s_make_sub_func_with_min_value_loc, ((PyObject*)__pyx_cur_scope), __pyx_n_s_c_data_model_v2, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1323, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v__sub = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "c_data_model_v2.pyx":1331
 *                 d[field.key] = new_value
 *                 return int(old_value - new_value), int(new_value)
 *             return _sub             # <<<<<<<<<<<<<<
 *     elif field.type_name in _float_types:
 *         def _sub(object self, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v__sub);
      __pyx_r = __pyx_v__sub;
      goto __pyx_L0;
    }

    /* "c_data_model_v2.pyx":1311
 *         f_min_value = field.min_value
 * 
 *     if field.type_name in _int_types:             # <<<<<<<<<<<<<<
 *         if field.type_name in _unsigned_int_types:
 *             def _sub(object self, object value):
 */
  }

  /* "c_data_model_v2.pyx":1332
 *                 return int(old_value - new_value), int(new_value)
 *             return _sub
 *     elif field.type_name in _float_types:             # <<<<<<<<<<<<<<
 *         def _sub(object self, object value):
 *             cdef dict d = self.__dict__
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_cur_scope->__pyx_v_field->type_name, __pyx_v_15c_data_model_v2__float_types, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1332, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":1333
 *             return _sub
 *     elif field.type_name in _float_types:
 *         def _sub(object self, object value):             # <<<<<<<<<<<<<<
 *             cdef dict d = self.__dict__
 *             cdef double old_value = d.get(field.key, 0.0)
 */
    __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_15c_data_model_v2_28make_sub_func_with_min_value_5_sub, 0, __pyx_n_s_make_sub_func_with_min_value_loc, ((PyObject*)__pyx_cur_scope), __pyx_n_s_c_data_model_v2, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v__sub = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":1341
 *             d[field.key] = new_value
 *             return old_value - new_value, new_value
 *         return _sub             # <<<<<<<<<<<<<<
 *     else:
 *         raise no_number_type_error(field)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v__sub);
    __pyx_r = __pyx_v__sub;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1332
 *                 return int(old_value - new_value), int(new_value)
 *             return _sub
 *     elif field.type_name in _float_types:             # <<<<<<<<<<<<<<
 *         def _sub(object self, object value):
 *             cdef dict d = self.__dict__
 */
  }

  /* "c_data_model_v2.pyx":1343
 *         return _sub
 *     else:
 *         raise no_number_type_error(field)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_4 = ((PyObject *)__pyx_cur_scope->__pyx_v_field);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_5 = __pyx_f_15c_data_model_v2_no_number_type_error(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 1343, __pyx_L1_error)
  }

  /* "c_data_model_v2.pyx":1302
 * 
 * 
 * cdef object make_sub_func_with_min_value(Field field):             # <<<<<<<<<<<<<<
 *     cdef int64 i_min_value = 0
 *     cdef uint64 ui_min_value = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("c_data_model_v2.make_sub_func_with_min_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__sub);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1346
 * 
 * 
 * cdef object make_unsigned_sub_func(Field field):             # <<<<<<<<<<<<<<
 *     return make_sub_func_with_min_value(field)
 * 
 */

static PyObject *__pyx_f_15c_data_model_v2_make_unsigned_sub_func(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("make_unsigned_sub_func", 0);

  /* "c_data_model_v2.pyx":1347
 * 
 * cdef object make_unsigned_sub_func(Field field):
 *     return make_sub_func_with_min_value(field)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_15c_data_model_v2_make_sub_func_with_min_value(__pyx_v_field); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1346
 * 
 * 
 * cdef object make_unsigned_sub_func(Field field):             # <<<<<<<<<<<<<<
 *     return make_sub_func_with_min_value(field)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.make_unsigned_sub_func", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1352
 * cdef object make_signed_sub_func(Field field):
 *     if field.type_name in _int_types:
 *         def _sub(object self, object _value):             # <<<<<<<<<<<<<<
 *             cdef dict d = self.__dict__
 *             cdef int64 old_value = d.get(field.key, 0)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_20make_signed_sub_func_1_sub(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15c_data_model_v2_20make_signed_sub_func_1_sub = {"_sub", (PyCFunction)__pyx_pw_15c_data_model_v2_20make_signed_sub_func_1_sub, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15c_data_model_v2_20make_signed_sub_func_1_sub(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v__value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_sub (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_value_2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_sub", 1, 2, 2, 1); __PYX_ERR(0, 1352, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_sub") < 0)) __PYX_ERR(0, 1352, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v__value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_sub", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1352, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.make_signed_sub_func._sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_20make_signed_sub_func__sub(__pyx_self, __pyx_v_self, __pyx_v__value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_20make_signed_sub_func__sub(PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v__value) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func *__pyx_cur_scope;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func *__pyx_outer_scope;
  PyObject *__pyx_v_d = 0;
  __pyx_t_15c_data_model_v2_int64 __pyx_v_old_value;
  __pyx_t_15c_data_model_v2_int64 __pyx_v_value;
  __pyx_t_15c_data_model_v2_int64 __pyx_v_new_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_15c_data_model_v2_int64 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_sub", 0);
  __pyx_outer_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "c_data_model_v2.pyx":1353
 *     if field.type_name in _int_types:
 *         def _sub(object self, object _value):
 *             cdef dict d = self.__dict__             # <<<<<<<<<<<<<<
 *             cdef int64 old_value = d.get(field.key, 0)
 *             cdef int64 value = _value
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1353, __pyx_L1_error)
  __pyx_v_d = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1354
 *         def _sub(object self, object _value):
 *             cdef dict d = self.__dict__
 *             cdef int64 old_value = d.get(field.key, 0)             # <<<<<<<<<<<<<<
 *             cdef int64 value = _value
 *             cdef int64 new_value = old_value - value
 */
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 1354, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1354, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_d, __pyx_cur_scope->__pyx_v_field->key, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_t_1); if (unlikely((__pyx_t_2 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 1354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_old_value = __pyx_t_2;

  /* "c_data_model_v2.pyx":1355
 *             cdef dict d = self.__dict__
 *             cdef int64 old_value = d.get(field.key, 0)
 *             cdef int64 value = _value             # <<<<<<<<<<<<<<
 *             cdef int64 new_value = old_value - value
 *             d[field.key] = new_value
 */
  __pyx_t_2 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_v__value); if (unlikely((__pyx_t_2 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 1355, __pyx_L1_error)
  __pyx_v_value = __pyx_t_2;

  /* "c_data_model_v2.pyx":1356
 *             cdef int64 old_value = d.get(field.key, 0)
 *             cdef int64 value = _value
 *             cdef int64 new_value = old_value - value             # <<<<<<<<<<<<<<
 *             d[field.key] = new_value
 *             return value, new_value
 */
  __pyx_v_new_value = (__pyx_v_old_value - __pyx_v_value);

  /* "c_data_model_v2.pyx":1357
 *             cdef int64 value = _value
 *             cdef int64 new_value = old_value - value
 *             d[field.key] = new_value             # <<<<<<<<<<<<<<
 *             return value, new_value
 *         return _sub
 */
  __pyx_t_1 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_new_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1357, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1357, __pyx_L1_error) }
  if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_cur_scope->__pyx_v_field->key, __pyx_t_1) < 0)) __PYX_ERR(0, 1357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1358
 *             cdef int64 new_value = old_value - value
 *             d[field.key] = new_value
 *             return value, new_value             # <<<<<<<<<<<<<<
 *         return _sub
 *     elif field.type_name in _float_types:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_new_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1352
 * cdef object make_signed_sub_func(Field field):
 *     if field.type_name in _int_types:
 *         def _sub(object self, object _value):             # <<<<<<<<<<<<<<
 *             cdef dict d = self.__dict__
 *             cdef int64 old_value = d.get(field.key, 0)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("c_data_model_v2.make_signed_sub_func._sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1361
 *         return _sub
 *     elif field.type_name in _float_types:
 *         def _sub(object self, object _value):             # <<<<<<<<<<<<<<
 *             cdef dict d = self.__dict__
 *             cdef double value = _value
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_20make_signed_sub_func_3_sub(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15c_data_model_v2_20make_signed_sub_func_3_sub = {"_sub", (PyCFunction)__pyx_pw_15c_data_model_v2_20make_signed_sub_func_3_sub, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15c_data_model_v2_20make_signed_sub_func_3_sub(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v__value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_sub (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_value_2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_sub", 1, 2, 2, 1); __PYX_ERR(0, 1361, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_sub") < 0)) __PYX_ERR(0, 1361, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v__value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_sub", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1361, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.make_signed_sub_func._sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_20make_signed_sub_func_2_sub(__pyx_self, __pyx_v_self, __pyx_v__value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_20make_signed_sub_func_2_sub(PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v__value) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func *__pyx_cur_scope;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func *__pyx_outer_scope;
  PyObject *__pyx_v_d = 0;
  double __pyx_v_value;
  double __pyx_v_old_value;
  double __pyx_v_new_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_sub", 0);
  __pyx_outer_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "c_data_model_v2.pyx":1362
 *     elif field.type_name in _float_types:
 *         def _sub(object self, object _value):
 *             cdef dict d = self.__dict__             # <<<<<<<<<<<<<<
 *             cdef double value = _value
 *             cdef double old_value = d.get(field.key, 0.0)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1362, __pyx_L1_error)
  __pyx_v_d = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1363
 *         def _sub(object self, object _value):
 *             cdef dict d = self.__dict__
 *             cdef double value = _value             # <<<<<<<<<<<<<<
 *             cdef double old_value = d.get(field.key, 0.0)
 *             cdef double new_value = old_value - value
 */
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v__value); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1363, __pyx_L1_error)
  __pyx_v_value = __pyx_t_2;

  /* "c_data_model_v2.pyx":1364
 *             cdef dict d = self.__dict__
 *             cdef double value = _value
 *             cdef double old_value = d.get(field.key, 0.0)             # <<<<<<<<<<<<<<
 *             cdef double new_value = old_value - value
 *             d[field.key] = new_value
 */
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 1364, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1364, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_d, __pyx_cur_scope->__pyx_v_field->key, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_old_value = __pyx_t_2;

  /* "c_data_model_v2.pyx":1365
 *             cdef double value = _value
 *             cdef double old_value = d.get(field.key, 0.0)
 *             cdef double new_value = old_value - value             # <<<<<<<<<<<<<<
 *             d[field.key] = new_value
 *             return value, new_value
 */
  __pyx_v_new_value = (__pyx_v_old_value - __pyx_v_value);

  /* "c_data_model_v2.pyx":1366
 *             cdef double old_value = d.get(field.key, 0.0)
 *             cdef double new_value = old_value - value
 *             d[field.key] = new_value             # <<<<<<<<<<<<<<
 *             return value, new_value
 *         return _sub
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_new_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1366, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1366, __pyx_L1_error) }
  if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_cur_scope->__pyx_v_field->key, __pyx_t_1) < 0)) __PYX_ERR(0, 1366, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1367
 *             cdef double new_value = old_value - value
 *             d[field.key] = new_value
 *             return value, new_value             # <<<<<<<<<<<<<<
 *         return _sub
 *     else:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_new_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1361
 *         return _sub
 *     elif field.type_name in _float_types:
 *         def _sub(object self, object _value):             # <<<<<<<<<<<<<<
 *             cdef dict d = self.__dict__
 *             cdef double value = _value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("c_data_model_v2.make_signed_sub_func._sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1350
 * 
 * 
 * cdef object make_signed_sub_func(Field field):             # <<<<<<<<<<<<<<
 *     if field.type_name in _int_types:
 *         def _sub(object self, object _value):
 */

static PyObject *__pyx_f_15c_data_model_v2_make_signed_sub_func(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func *__pyx_cur_scope;
  PyObject *__pyx_v__sub = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("make_signed_sub_func", 0);
  __pyx_cur_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func *)__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func(__pyx_ptype_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1350, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_field = __pyx_v_field;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_field);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_field);

  /* "c_data_model_v2.pyx":1351
 * 
 * cdef object make_signed_sub_func(Field field):
 *     if field.type_name in _int_types:             # <<<<<<<<<<<<<<
 *         def _sub(object self, object _value):
 *             cdef dict d = self.__dict__
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_cur_scope->__pyx_v_field->type_name, __pyx_v_15c_data_model_v2__int_types, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1351, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":1352
 * cdef object make_signed_sub_func(Field field):
 *     if field.type_name in _int_types:
 *         def _sub(object self, object _value):             # <<<<<<<<<<<<<<
 *             cdef dict d = self.__dict__
 *             cdef int64 old_value = d.get(field.key, 0)
 */
    __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_15c_data_model_v2_20make_signed_sub_func_1_sub, 0, __pyx_n_s_make_signed_sub_func_locals__sub, ((PyObject*)__pyx_cur_scope), __pyx_n_s_c_data_model_v2, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v__sub = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "c_data_model_v2.pyx":1359
 *             d[field.key] = new_value
 *             return value, new_value
 *         return _sub             # <<<<<<<<<<<<<<
 *     elif field.type_name in _float_types:
 *         def _sub(object self, object _value):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v__sub);
    __pyx_r = __pyx_v__sub;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1351
 * 
 * cdef object make_signed_sub_func(Field field):
 *     if field.type_name in _int_types:             # <<<<<<<<<<<<<<
 *         def _sub(object self, object _value):
 *             cdef dict d = self.__dict__
 */
  }

  /* "c_data_model_v2.pyx":1360
 *             return value, new_value
 *         return _sub
 *     elif field.type_name in _float_types:             # <<<<<<<<<<<<<<
 *         def _sub(object self, object _value):
 *             cdef dict d = self.__dict__
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_cur_scope->__pyx_v_field->type_name, __pyx_v_15c_data_model_v2__float_types, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1360, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":1361
 *         return _sub
 *     elif field.type_name in _float_types:
 *         def _sub(object self, object _value):             # <<<<<<<<<<<<<<
 *             cdef dict d = self.__dict__
 *             cdef double value = _value
 */
    __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_15c_data_model_v2_20make_signed_sub_func_3_sub, 0, __pyx_n_s_make_signed_sub_func_locals__sub, ((PyObject*)__pyx_cur_scope), __pyx_n_s_c_data_model_v2, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v__sub = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "c_data_model_v2.pyx":1368
 *             d[field.key] = new_value
 *             return value, new_value
 *         return _sub             # <<<<<<<<<<<<<<
 *     else:
 *         raise no_number_type_error(field)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v__sub);
    __pyx_r = __pyx_v__sub;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1360
 *             return value, new_value
 *         return _sub
 *     elif field.type_name in _float_types:             # <<<<<<<<<<<<<<
 *         def _sub(object self, object _value):
 *             cdef dict d = self.__dict__
 */
  }

  /* "c_data_model_v2.pyx":1370
 *         return _sub
 *     else:
 *         raise no_number_type_error(field)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_3 = ((PyObject *)__pyx_cur_scope->__pyx_v_field);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = __pyx_f_15c_data_model_v2_no_number_type_error(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1370, __pyx_L1_error)
  }

  /* "c_data_model_v2.pyx":1350
 * 
 * 
 * cdef object make_signed_sub_func(Field field):             # <<<<<<<<<<<<<<
 *     if field.type_name in _int_types:
 *         def _sub(object self, object _value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("c_data_model_v2.make_signed_sub_func", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__sub);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1374
 * 
 * cdef object make_container_fget(Field field):
 *     def fget(object self):             # <<<<<<<<<<<<<<
 *         cdef dict self_dict = self.__dict__
 *         return self_dict.setdefault(field.key, _new_container(field))
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_19make_container_fget_1fget(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_15c_data_model_v2_19make_container_fget_1fget = {"fget", (PyCFunction)__pyx_pw_15c_data_model_v2_19make_container_fget_1fget, METH_O, 0};
static PyObject *__pyx_pw_15c_data_model_v2_19make_container_fget_1fget(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fget (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_19make_container_fget_fget(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_19make_container_fget_fget(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget *__pyx_cur_scope;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget *__pyx_outer_scope;
  PyObject *__pyx_v_self_dict = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("fget", 0);
  __pyx_outer_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "c_data_model_v2.pyx":1375
 * cdef object make_container_fget(Field field):
 *     def fget(object self):
 *         cdef dict self_dict = self.__dict__             # <<<<<<<<<<<<<<
 *         return self_dict.setdefault(field.key, _new_container(field))
 *     return fget
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1375, __pyx_L1_error)
  __pyx_v_self_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1376
 *     def fget(object self):
 *         cdef dict self_dict = self.__dict__
 *         return self_dict.setdefault(field.key, _new_container(field))             # <<<<<<<<<<<<<<
 *     return fget
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self_dict == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "setdefault");
    __PYX_ERR(0, 1376, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1376, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1376, __pyx_L1_error) }
  __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_v_field);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_15c_data_model_v2__new_container(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_SetDefault(__pyx_v_self_dict, __pyx_cur_scope->__pyx_v_field->key, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1374
 * 
 * cdef object make_container_fget(Field field):
 *     def fget(object self):             # <<<<<<<<<<<<<<
 *         cdef dict self_dict = self.__dict__
 *         return self_dict.setdefault(field.key, _new_container(field))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("c_data_model_v2.make_container_fget.fget", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_self_dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1373
 * 
 * 
 * cdef object make_container_fget(Field field):             # <<<<<<<<<<<<<<
 *     def fget(object self):
 *         cdef dict self_dict = self.__dict__
 */

static PyObject *__pyx_f_15c_data_model_v2_make_container_fget(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget *__pyx_cur_scope;
  PyObject *__pyx_v_fget = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("make_container_fget", 0);
  __pyx_cur_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget *)__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget(__pyx_ptype_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1373, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_field = __pyx_v_field;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_field);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_field);

  /* "c_data_model_v2.pyx":1374
 * 
 * cdef object make_container_fget(Field field):
 *     def fget(object self):             # <<<<<<<<<<<<<<
 *         cdef dict self_dict = self.__dict__
 *         return self_dict.setdefault(field.key, _new_container(field))
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_15c_data_model_v2_19make_container_fget_1fget, 0, __pyx_n_s_make_container_fget_locals_fget, ((PyObject*)__pyx_cur_scope), __pyx_n_s_c_data_model_v2, __pyx_d, ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fget = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1377
 *         cdef dict self_dict = self.__dict__
 *         return self_dict.setdefault(field.key, _new_container(field))
 *     return fget             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_fget);
  __pyx_r = __pyx_v_fget;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1373
 * 
 * 
 * cdef object make_container_fget(Field field):             # <<<<<<<<<<<<<<
 *     def fget(object self):
 *         cdef dict self_dict = self.__dict__
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.make_container_fget", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fget);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1381
 * 
 * cdef object make_container_fset(Field field):
 *     def fset(object self, object value):             # <<<<<<<<<<<<<<
 *         cdef dict self_dict = self.__dict__
 *         cdef DataModel dm_self
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_19make_container_fset_1fset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15c_data_model_v2_19make_container_fset_1fset = {"fset", (PyCFunction)__pyx_pw_15c_data_model_v2_19make_container_fset_1fset, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15c_data_model_v2_19make_container_fset_1fset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fset (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fset", 1, 2, 2, 1); __PYX_ERR(0, 1381, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fset") < 0)) __PYX_ERR(0, 1381, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fset", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1381, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.make_container_fset.fset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_19make_container_fset_fset(__pyx_self, __pyx_v_self, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_19make_container_fset_fset(PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset *__pyx_cur_scope;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset *__pyx_outer_scope;
  PyObject *__pyx_v_self_dict = 0;
  struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_dm_self = 0;
  PyObject *__pyx_v_container = 0;
  PyObject *__pyx_v_container_class = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("fset", 0);
  __pyx_outer_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "c_data_model_v2.pyx":1382
 * cdef object make_container_fset(Field field):
 *     def fset(object self, object value):
 *         cdef dict self_dict = self.__dict__             # <<<<<<<<<<<<<<
 *         cdef DataModel dm_self
 *         cdef object container
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1382, __pyx_L1_error)
  __pyx_v_self_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1386
 *         cdef object container
 *         cdef object container_class
 *         if self_dict.get(field.key) is not value:             # <<<<<<<<<<<<<<
 *             container_class = _get_container_class(field)
 *             if not isinstance(value, container_class):
 */
  if (unlikely(__pyx_v_self_dict == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 1386, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1386, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_self_dict, __pyx_cur_scope->__pyx_v_field->key, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 != __pyx_v_value);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":1387
 *         cdef object container_class
 *         if self_dict.get(field.key) is not value:
 *             container_class = _get_container_class(field)             # <<<<<<<<<<<<<<
 *             if not isinstance(value, container_class):
 *                 container = _new_container(field)
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1387, __pyx_L1_error) }
    __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_v_field);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_4 = __pyx_f_15c_data_model_v2__get_container_class(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_container_class = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":1388
 *         if self_dict.get(field.key) is not value:
 *             container_class = _get_container_class(field)
 *             if not isinstance(value, container_class):             # <<<<<<<<<<<<<<
 *                 container = _new_container(field)
 *                 self_dict[field.key] = container
 */
    __pyx_t_3 = PyObject_IsInstance(__pyx_v_value, __pyx_v_container_class); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 1388, __pyx_L1_error)
    __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":1389
 *             container_class = _get_container_class(field)
 *             if not isinstance(value, container_class):
 *                 container = _new_container(field)             # <<<<<<<<<<<<<<
 *                 self_dict[field.key] = container
 *                 _container_copy_from(field, container, value)
 */
      if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1389, __pyx_L1_error) }
      __pyx_t_4 = ((PyObject *)__pyx_cur_scope->__pyx_v_field);
      __Pyx_INCREF(__pyx_t_4);
      __pyx_t_1 = __pyx_f_15c_data_model_v2__new_container(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1389, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_container = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "c_data_model_v2.pyx":1390
 *             if not isinstance(value, container_class):
 *                 container = _new_container(field)
 *                 self_dict[field.key] = container             # <<<<<<<<<<<<<<
 *                 _container_copy_from(field, container, value)
 *             else:
 */
      if (unlikely(__pyx_v_self_dict == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1390, __pyx_L1_error)
      }
      if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1390, __pyx_L1_error) }
      if (unlikely(PyDict_SetItem(__pyx_v_self_dict, __pyx_cur_scope->__pyx_v_field->key, __pyx_v_container) < 0)) __PYX_ERR(0, 1390, __pyx_L1_error)

      /* "c_data_model_v2.pyx":1391
 *                 container = _new_container(field)
 *                 self_dict[field.key] = container
 *                 _container_copy_from(field, container, value)             # <<<<<<<<<<<<<<
 *             else:
 *                 self_dict[field.key] = value
 */
      if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1391, __pyx_L1_error) }
      __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_v_field);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_f_15c_data_model_v2__container_copy_from(((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_1), __pyx_v_container, __pyx_v_value);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "c_data_model_v2.pyx":1388
 *         if self_dict.get(field.key) is not value:
 *             container_class = _get_container_class(field)
 *             if not isinstance(value, container_class):             # <<<<<<<<<<<<<<
 *                 container = _new_container(field)
 *                 self_dict[field.key] = container
 */
      goto __pyx_L4;
    }

    /* "c_data_model_v2.pyx":1393
 *                 _container_copy_from(field, container, value)
 *             else:
 *                 self_dict[field.key] = value             # <<<<<<<<<<<<<<
 *             dm_self = <DataModel>self
 *             dm_self._set_field_changed(field)
 */
    /*else*/ {
      if (unlikely(__pyx_v_self_dict == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1393, __pyx_L1_error)
      }
      if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1393, __pyx_L1_error) }
      if (unlikely(PyDict_SetItem(__pyx_v_self_dict, __pyx_cur_scope->__pyx_v_field->key, __pyx_v_value) < 0)) __PYX_ERR(0, 1393, __pyx_L1_error)
    }
    __pyx_L4:;

    /* "c_data_model_v2.pyx":1394
 *             else:
 *                 self_dict[field.key] = value
 *             dm_self = <DataModel>self             # <<<<<<<<<<<<<<
 *             dm_self._set_field_changed(field)
 *     return fset
 */
    __pyx_t_1 = __pyx_v_self;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_dm_self = ((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "c_data_model_v2.pyx":1395
 *                 self_dict[field.key] = value
 *             dm_self = <DataModel>self
 *             dm_self._set_field_changed(field)             # <<<<<<<<<<<<<<
 *     return fset
 * 
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_field)) { __Pyx_RaiseClosureNameError("field"); __PYX_ERR(0, 1395, __pyx_L1_error) }
    __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_v_field);
    __Pyx_INCREF(__pyx_t_1);
    ((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_dm_self->__pyx_vtab)->_set_field_changed(__pyx_v_dm_self, ((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_1));
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "c_data_model_v2.pyx":1386
 *         cdef object container
 *         cdef object container_class
 *         if self_dict.get(field.key) is not value:             # <<<<<<<<<<<<<<
 *             container_class = _get_container_class(field)
 *             if not isinstance(value, container_class):
 */
  }

  /* "c_data_model_v2.pyx":1381
 * 
 * cdef object make_container_fset(Field field):
 *     def fset(object self, object value):             # <<<<<<<<<<<<<<
 *         cdef dict self_dict = self.__dict__
 *         cdef DataModel dm_self
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("c_data_model_v2.make_container_fset.fset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_self_dict);
  __Pyx_XDECREF((PyObject *)__pyx_v_dm_self);
  __Pyx_XDECREF(__pyx_v_container);
  __Pyx_XDECREF(__pyx_v_container_class);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1380
 * 
 * 
 * cdef object make_container_fset(Field field):             # <<<<<<<<<<<<<<
 *     def fset(object self, object value):
 *         cdef dict self_dict = self.__dict__
 */

static PyObject *__pyx_f_15c_data_model_v2_make_container_fset(struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset *__pyx_cur_scope;
  PyObject *__pyx_v_fset = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("make_container_fset", 0);
  __pyx_cur_scope = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset *)__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset(__pyx_ptype_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1380, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_field = __pyx_v_field;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_field);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_field);

  /* "c_data_model_v2.pyx":1381
 * 
 * cdef object make_container_fset(Field field):
 *     def fset(object self, object value):             # <<<<<<<<<<<<<<
 *         cdef dict self_dict = self.__dict__
 *         cdef DataModel dm_self
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_15c_data_model_v2_19make_container_fset_1fset, 0, __pyx_n_s_make_container_fset_locals_fset, ((PyObject*)__pyx_cur_scope), __pyx_n_s_c_data_model_v2, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fset = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1396
 *             dm_self = <DataModel>self
 *             dm_self._set_field_changed(field)
 *     return fset             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_fset);
  __pyx_r = __pyx_v_fset;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1380
 * 
 * 
 * cdef object make_container_fset(Field field):             # <<<<<<<<<<<<<<
 *     def fset(object self, object value):
 *         cdef dict self_dict = self.__dict__
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.make_container_fset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fset);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1400
 * 
 * cdef object make_container_fdel(Field field):
 *     def fdel(object self):             # <<<<<<<<<<<<<<
 *         raise OperateError('cannot del a container field')
 *     return fdel
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_19make_container_fdel_1fdel(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_15c_data_model_v2_19make_container_fdel_1fdel = {"fdel", (PyCFunction)__pyx_pw_15c_data_model_v2_19make_container_fdel_1fdel, METH_O, 0};
static PyObject *__pyx_pw_15c_data_model_v2_19make_container_fdel_1fdel(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fdel (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_19make_container_fdel_fdel(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_19make_container_fdel_fdel(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("fdel", 0);

  /* "c_data_model_v2.pyx":1401
 * cdef object make_container_fdel(Field field):
 *     def fdel(object self):
 *         raise OperateError('cannot del a container field')             # <<<<<<<<<<<<<<
 *     return fdel
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_OperateError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 1401, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1400
 * 
 * cdef object make_container_fdel(Field field):
 *     def fdel(object self):             # <<<<<<<<<<<<<<
 *         raise OperateError('cannot del a container field')
 *     return fdel
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("c_data_model_v2.make_container_fdel.fdel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1399
 * 
 * 
 * cdef object make_container_fdel(Field field):             # <<<<<<<<<<<<<<
 *     def fdel(object self):
 *         raise OperateError('cannot del a container field')
 */

static PyObject *__pyx_f_15c_data_model_v2_make_container_fdel(CYTHON_UNUSED struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  PyObject *__pyx_v_fdel = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("make_container_fdel", 0);

  /* "c_data_model_v2.pyx":1400
 * 
 * cdef object make_container_fdel(Field field):
 *     def fdel(object self):             # <<<<<<<<<<<<<<
 *         raise OperateError('cannot del a container field')
 *     return fdel
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_15c_data_model_v2_19make_container_fdel_1fdel, 0, __pyx_n_s_make_container_fdel_locals_fdel, NULL, __pyx_n_s_c_data_model_v2, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fdel = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1402
 *     def fdel(object self):
 *         raise OperateError('cannot del a container field')
 *     return fdel             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_fdel);
  __pyx_r = __pyx_v_fdel;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1399
 * 
 * 
 * cdef object make_container_fdel(Field field):             # <<<<<<<<<<<<<<
 *     def fdel(object self):
 *         raise OperateError('cannot del a container field')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.make_container_fdel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fdel);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1411
 * 
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return '<DataModelProtocol of {}>'.format(str(self.cls))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_17DataModelProtocol_1__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15c_data_model_v2_17DataModelProtocol_1__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_17DataModelProtocol___str__(((struct __pyx_obj_15c_data_model_v2_DataModelProtocol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_17DataModelProtocol___str__(struct __pyx_obj_15c_data_model_v2_DataModelProtocol *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "c_data_model_v2.pyx":1412
 * 
 *     def __str__(self):
 *         return '<DataModelProtocol of {}>'.format(str(self.cls))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_DataModelProtocol_of, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_self->cls);
  __Pyx_GIVEREF(__pyx_v_self->cls);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self->cls);
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1412, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1412, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1412, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1411
 * 
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return '<DataModelProtocol of {}>'.format(str(self.cls))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("c_data_model_v2.DataModelProtocol.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1416
 * 
 * cdef class MetaDataModel(type):
 *     def __init__(cls, clsname, bases, attrs):             # <<<<<<<<<<<<<<
 *         if bases is None:
 *             return
 */

/* Python wrapper */
static int __pyx_pw_15c_data_model_v2_13MetaDataModel_1__init__(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_15c_data_model_v2_13MetaDataModel_1__init__(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_clsname = 0;
  PyObject *__pyx_v_bases = 0;
  PyObject *__pyx_v_attrs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_clsname,&__pyx_n_s_bases_2,&__pyx_n_s_attrs,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_clsname)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bases_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(0, 1416, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_attrs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(0, 1416, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1416, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_clsname = values[0];
    __pyx_v_bases = values[1];
    __pyx_v_attrs = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1416, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.MetaDataModel.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_13MetaDataModel___init__(((struct __pyx_obj_15c_data_model_v2_MetaDataModel *)__pyx_v_cls), __pyx_v_clsname, __pyx_v_bases, __pyx_v_attrs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15c_data_model_v2_13MetaDataModel___init__(struct __pyx_obj_15c_data_model_v2_MetaDataModel *__pyx_v_cls, PyObject *__pyx_v_clsname, PyObject *__pyx_v_bases, PyObject *__pyx_v_attrs) {
  struct __pyx_obj_15c_data_model_v2_DataModelProtocol *__pyx_v_protocol = 0;
  struct __pyx_obj_15c_data_model_v2_FieldsDefine *__pyx_v_fields_define = 0;
  struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field = 0;
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v__field = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "c_data_model_v2.pyx":1417
 * cdef class MetaDataModel(type):
 *     def __init__(cls, clsname, bases, attrs):
 *         if bases is None:             # <<<<<<<<<<<<<<
 *             return
 *         cdef DataModelProtocol protocol = DataModelProtocol()
 */
  __pyx_t_1 = (__pyx_v_bases == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":1418
 *     def __init__(cls, clsname, bases, attrs):
 *         if bases is None:
 *             return             # <<<<<<<<<<<<<<
 *         cdef DataModelProtocol protocol = DataModelProtocol()
 *         protocol.cls = cls
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1417
 * cdef class MetaDataModel(type):
 *     def __init__(cls, clsname, bases, attrs):
 *         if bases is None:             # <<<<<<<<<<<<<<
 *             return
 *         cdef DataModelProtocol protocol = DataModelProtocol()
 */
  }

  /* "c_data_model_v2.pyx":1419
 *         if bases is None:
 *             return
 *         cdef DataModelProtocol protocol = DataModelProtocol()             # <<<<<<<<<<<<<<
 *         protocol.cls = cls
 *         protocol.cls_name = clsname
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_15c_data_model_v2_DataModelProtocol), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_protocol = ((struct __pyx_obj_15c_data_model_v2_DataModelProtocol *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "c_data_model_v2.pyx":1420
 *             return
 *         cdef DataModelProtocol protocol = DataModelProtocol()
 *         protocol.cls = cls             # <<<<<<<<<<<<<<
 *         protocol.cls_name = clsname
 *         cls._protocol_ = protocol
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_cls));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_cls));
  __Pyx_GOTREF(__pyx_v_protocol->cls);
  __Pyx_DECREF(__pyx_v_protocol->cls);
  __pyx_v_protocol->cls = ((PyObject *)__pyx_v_cls);

  /* "c_data_model_v2.pyx":1421
 *         cdef DataModelProtocol protocol = DataModelProtocol()
 *         protocol.cls = cls
 *         protocol.cls_name = clsname             # <<<<<<<<<<<<<<
 *         cls._protocol_ = protocol
 * 
 */
  if (!(likely(PyString_CheckExact(__pyx_v_clsname))||((__pyx_v_clsname) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_clsname)->tp_name), 0))) __PYX_ERR(0, 1421, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_clsname;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_protocol->cls_name);
  __Pyx_DECREF(__pyx_v_protocol->cls_name);
  __pyx_v_protocol->cls_name = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "c_data_model_v2.pyx":1422
 *         protocol.cls = cls
 *         protocol.cls_name = clsname
 *         cls._protocol_ = protocol             # <<<<<<<<<<<<<<
 * 
 *         cdef FieldsDefine fields_define = FieldsDefine()
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_cls), __pyx_n_s_protocol, ((PyObject *)__pyx_v_protocol)) < 0) __PYX_ERR(0, 1422, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1424
 *         cls._protocol_ = protocol
 * 
 *         cdef FieldsDefine fields_define = FieldsDefine()             # <<<<<<<<<<<<<<
 *         protocol.fields_define = fields_define
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_15c_data_model_v2_FieldsDefine), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_fields_define = ((struct __pyx_obj_15c_data_model_v2_FieldsDefine *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "c_data_model_v2.pyx":1425
 * 
 *         cdef FieldsDefine fields_define = FieldsDefine()
 *         protocol.fields_define = fields_define             # <<<<<<<<<<<<<<
 * 
 *         fields_define.copy_bases_fields(bases)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_fields_define));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_fields_define));
  __Pyx_GOTREF(__pyx_v_protocol->fields_define);
  __Pyx_DECREF(((PyObject *)__pyx_v_protocol->fields_define));
  __pyx_v_protocol->fields_define = __pyx_v_fields_define;

  /* "c_data_model_v2.pyx":1427
 *         protocol.fields_define = fields_define
 * 
 *         fields_define.copy_bases_fields(bases)             # <<<<<<<<<<<<<<
 * 
 *         cdef Field field
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_fields_define), __pyx_n_s_copy_bases_fields); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_bases); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_bases};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1427, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_bases};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1427, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_bases);
      __Pyx_GIVEREF(__pyx_v_bases);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_bases);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "c_data_model_v2.pyx":1432
 *         cdef str key
 * 
 *         for name, _field in attrs.iteritems():             # <<<<<<<<<<<<<<
 *             if name.startswith('__'):
 *                 continue
 */
  __pyx_t_7 = 0;
  if (unlikely(__pyx_v_attrs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    __PYX_ERR(0, 1432, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_dict_iterator(__pyx_v_attrs, 0, __pyx_n_s_iteritems, (&__pyx_t_8), (&__pyx_t_9)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_8, &__pyx_t_7, &__pyx_t_4, &__pyx_t_6, NULL, __pyx_t_9);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 1432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v__field, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "c_data_model_v2.pyx":1433
 * 
 *         for name, _field in attrs.iteritems():
 *             if name.startswith('__'):             # <<<<<<<<<<<<<<
 *                 continue
 *             if not isinstance(_field, Field):
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_startswith); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1433, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":1434
 *         for name, _field in attrs.iteritems():
 *             if name.startswith('__'):
 *                 continue             # <<<<<<<<<<<<<<
 *             if not isinstance(_field, Field):
 *                 continue
 */
      goto __pyx_L4_continue;

      /* "c_data_model_v2.pyx":1433
 * 
 *         for name, _field in attrs.iteritems():
 *             if name.startswith('__'):             # <<<<<<<<<<<<<<
 *                 continue
 *             if not isinstance(_field, Field):
 */
    }

    /* "c_data_model_v2.pyx":1435
 *             if name.startswith('__'):
 *                 continue
 *             if not isinstance(_field, Field):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v__field, __pyx_ptype_15c_data_model_v2_Field); 
    __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":1436
 *                 continue
 *             if not isinstance(_field, Field):
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             field = _field
 */
      goto __pyx_L4_continue;

      /* "c_data_model_v2.pyx":1435
 *             if name.startswith('__'):
 *                 continue
 *             if not isinstance(_field, Field):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    }

    /* "c_data_model_v2.pyx":1438
 *                 continue
 * 
 *             field = _field             # <<<<<<<<<<<<<<
 * 
 *             key = '_' + name
 */
    if (!(likely(((__pyx_v__field) == Py_None) || likely(__Pyx_TypeTest(__pyx_v__field, __pyx_ptype_15c_data_model_v2_Field))))) __PYX_ERR(0, 1438, __pyx_L1_error)
    __pyx_t_4 = __pyx_v__field;
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_field, ((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":1440
 *             field = _field
 * 
 *             key = '_' + name             # <<<<<<<<<<<<<<
 *             field.name = name
 *             field.key = key
 */
    __pyx_t_4 = PyNumber_Add(__pyx_n_s__7, __pyx_v_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (!(likely(PyString_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 1440, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_key, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":1441
 * 
 *             key = '_' + name
 *             field.name = name             # <<<<<<<<<<<<<<
 *             field.key = key
 * 
 */
    if (!(likely(PyString_CheckExact(__pyx_v_name))||((__pyx_v_name) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_name)->tp_name), 0))) __PYX_ERR(0, 1441, __pyx_L1_error)
    __pyx_t_4 = __pyx_v_name;
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_field->name);
    __Pyx_DECREF(__pyx_v_field->name);
    __pyx_v_field->name = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":1442
 *             key = '_' + name
 *             field.name = name
 *             field.key = key             # <<<<<<<<<<<<<<
 * 
 *             cls.make_auto_gen_methods(field, attrs)
 */
    __Pyx_INCREF(__pyx_v_key);
    __Pyx_GIVEREF(__pyx_v_key);
    __Pyx_GOTREF(__pyx_v_field->key);
    __Pyx_DECREF(__pyx_v_field->key);
    __pyx_v_field->key = __pyx_v_key;

    /* "c_data_model_v2.pyx":1444
 *             field.key = key
 * 
 *             cls.make_auto_gen_methods(field, attrs)             # <<<<<<<<<<<<<<
 * 
 *             fields_define.add_field(field)
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_cls), __pyx_n_s_make_auto_gen_methods); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_field), __pyx_v_attrs};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1444, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_field), __pyx_v_attrs};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1444, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1444, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_field));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_field));
      PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, ((PyObject *)__pyx_v_field));
      __Pyx_INCREF(__pyx_v_attrs);
      __Pyx_GIVEREF(__pyx_v_attrs);
      PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_v_attrs);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_11, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1444, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":1446
 *             cls.make_auto_gen_methods(field, attrs)
 * 
 *             fields_define.add_field(field)             # <<<<<<<<<<<<<<
 * 
 *         #
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_fields_define), __pyx_n_s_add_field); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_11) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, ((PyObject *)__pyx_v_field)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1446, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_11, ((PyObject *)__pyx_v_field)};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1446, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_11, ((PyObject *)__pyx_v_field)};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1446, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1446, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_11); __pyx_t_11 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_field));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_field));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_field));
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1446, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_L4_continue:;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "c_data_model_v2.pyx":1449
 * 
 *         #
 *         cls._fields = protocol.fields_define.fields             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __pyx_v_protocol->fields_define->fields;
  __Pyx_INCREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_cls), __pyx_n_s_fields, __pyx_t_3) < 0) __PYX_ERR(0, 1449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "c_data_model_v2.pyx":1416
 * 
 * cdef class MetaDataModel(type):
 *     def __init__(cls, clsname, bases, attrs):             # <<<<<<<<<<<<<<
 *         if bases is None:
 *             return
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("c_data_model_v2.MetaDataModel.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_protocol);
  __Pyx_XDECREF((PyObject *)__pyx_v_fields_define);
  __Pyx_XDECREF((PyObject *)__pyx_v_field);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v__field);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1452
 * 
 * 
 *     def make_auto_gen_methods(cls, Field field, attrs):             # <<<<<<<<<<<<<<
 *         cdef str get_func_name
 *         if field.is_container():
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_13MetaDataModel_3make_auto_gen_methods(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15c_data_model_v2_13MetaDataModel_2make_auto_gen_methods[] = "MetaDataModel.make_auto_gen_methods(cls, Field field, attrs)";
static PyObject *__pyx_pw_15c_data_model_v2_13MetaDataModel_3make_auto_gen_methods(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field = 0;
  PyObject *__pyx_v_attrs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("make_auto_gen_methods (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_field,&__pyx_n_s_attrs,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_field)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_attrs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("make_auto_gen_methods", 1, 2, 2, 1); __PYX_ERR(0, 1452, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "make_auto_gen_methods") < 0)) __PYX_ERR(0, 1452, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_field = ((struct __pyx_obj_15c_data_model_v2_Field *)values[0]);
    __pyx_v_attrs = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("make_auto_gen_methods", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1452, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.MetaDataModel.make_auto_gen_methods", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_field), __pyx_ptype_15c_data_model_v2_Field, 1, "field", 0))) __PYX_ERR(0, 1452, __pyx_L1_error)
  __pyx_r = __pyx_pf_15c_data_model_v2_13MetaDataModel_2make_auto_gen_methods(((struct __pyx_obj_15c_data_model_v2_MetaDataModel *)__pyx_v_cls), __pyx_v_field, __pyx_v_attrs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_13MetaDataModel_2make_auto_gen_methods(struct __pyx_obj_15c_data_model_v2_MetaDataModel *__pyx_v_cls, struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field, PyObject *__pyx_v_attrs) {
  PyObject *__pyx_v_get_func_name = 0;
  PyObject *__pyx_v_add_func_name = NULL;
  PyObject *__pyx_v_sub_func_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("make_auto_gen_methods", 0);

  /* "c_data_model_v2.pyx":1454
 *     def make_auto_gen_methods(cls, Field field, attrs):
 *         cdef str get_func_name
 *         if field.is_container():             # <<<<<<<<<<<<<<
 *             setattr(cls, field.name, property(
 *                     make_container_fget(field),
 */
  __pyx_t_1 = (__pyx_f_15c_data_model_v2_5Field_is_container(__pyx_v_field) != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":1455
 *         cdef str get_func_name
 *         if field.is_container():
 *             setattr(cls, field.name, property(             # <<<<<<<<<<<<<<
 *                     make_container_fget(field),
 *                     make_container_fset(field),
 */
    __pyx_t_2 = __pyx_v_field->name;
    __Pyx_INCREF(__pyx_t_2);

    /* "c_data_model_v2.pyx":1456
 *         if field.is_container():
 *             setattr(cls, field.name, property(
 *                     make_container_fget(field),             # <<<<<<<<<<<<<<
 *                     make_container_fset(field),
 *                     make_container_fdel(field)))
 */
    __pyx_t_3 = __pyx_f_15c_data_model_v2_make_container_fget(__pyx_v_field); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "c_data_model_v2.pyx":1457
 *             setattr(cls, field.name, property(
 *                     make_container_fget(field),
 *                     make_container_fset(field),             # <<<<<<<<<<<<<<
 *                     make_container_fdel(field)))
 *             get_func_name = make_autogen_func_name(attrs, 'get', field.name)
 */
    __pyx_t_4 = __pyx_f_15c_data_model_v2_make_container_fset(__pyx_v_field); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "c_data_model_v2.pyx":1458
 *                     make_container_fget(field),
 *                     make_container_fset(field),
 *                     make_container_fdel(field)))             # <<<<<<<<<<<<<<
 *             get_func_name = make_autogen_func_name(attrs, 'get', field.name)
 *             setattr(cls, get_func_name,
 */
    __pyx_t_5 = __pyx_f_15c_data_model_v2_make_container_fdel(__pyx_v_field); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1458, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "c_data_model_v2.pyx":1455
 *         cdef str get_func_name
 *         if field.is_container():
 *             setattr(cls, field.name, property(             # <<<<<<<<<<<<<<
 *                     make_container_fget(field),
 *                     make_container_fset(field),
 */
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1455, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1455, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = PyObject_SetAttr(((PyObject *)__pyx_v_cls), __pyx_t_2, __pyx_t_5); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1455, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "c_data_model_v2.pyx":1459
 *                     make_container_fset(field),
 *                     make_container_fdel(field)))
 *             get_func_name = make_autogen_func_name(attrs, 'get', field.name)             # <<<<<<<<<<<<<<
 *             setattr(cls, get_func_name,
 *                     make_container_fget(field))
 */
    __pyx_t_5 = __pyx_v_field->name;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_2 = __pyx_f_15c_data_model_v2_make_autogen_func_name(__pyx_v_attrs, __pyx_n_s_get, ((PyObject*)__pyx_t_5)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_get_func_name = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "c_data_model_v2.pyx":1461
 *             get_func_name = make_autogen_func_name(attrs, 'get', field.name)
 *             setattr(cls, get_func_name,
 *                     make_container_fget(field))             # <<<<<<<<<<<<<<
 *         else:
 *             setattr(cls, field.name, property(
 */
    __pyx_t_2 = __pyx_f_15c_data_model_v2_make_container_fget(__pyx_v_field); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "c_data_model_v2.pyx":1460
 *                     make_container_fdel(field)))
 *             get_func_name = make_autogen_func_name(attrs, 'get', field.name)
 *             setattr(cls, get_func_name,             # <<<<<<<<<<<<<<
 *                     make_container_fget(field))
 *         else:
 */
    __pyx_t_7 = PyObject_SetAttr(((PyObject *)__pyx_v_cls), __pyx_v_get_func_name, __pyx_t_2); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1460, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "c_data_model_v2.pyx":1454
 *     def make_auto_gen_methods(cls, Field field, attrs):
 *         cdef str get_func_name
 *         if field.is_container():             # <<<<<<<<<<<<<<
 *             setattr(cls, field.name, property(
 *                     make_container_fget(field),
 */
    goto __pyx_L3;
  }

  /* "c_data_model_v2.pyx":1463
 *                     make_container_fget(field))
 *         else:
 *             setattr(cls, field.name, property(             # <<<<<<<<<<<<<<
 *                     make_fget(field),
 *                     make_fset(field),
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_field->name;
    __Pyx_INCREF(__pyx_t_2);

    /* "c_data_model_v2.pyx":1464
 *         else:
 *             setattr(cls, field.name, property(
 *                     make_fget(field),             # <<<<<<<<<<<<<<
 *                     make_fset(field),
 *                     make_fdel(field)))
 */
    __pyx_t_5 = __pyx_f_15c_data_model_v2_make_fget(__pyx_v_field); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "c_data_model_v2.pyx":1465
 *             setattr(cls, field.name, property(
 *                     make_fget(field),
 *                     make_fset(field),             # <<<<<<<<<<<<<<
 *                     make_fdel(field)))
 *             get_func_name = make_autogen_func_name(attrs, 'get', field.name)
 */
    __pyx_t_6 = __pyx_f_15c_data_model_v2_make_fset(__pyx_v_field); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);

    /* "c_data_model_v2.pyx":1466
 *                     make_fget(field),
 *                     make_fset(field),
 *                     make_fdel(field)))             # <<<<<<<<<<<<<<
 *             get_func_name = make_autogen_func_name(attrs, 'get', field.name)
 *             setattr(cls, get_func_name,
 */
    __pyx_t_4 = __pyx_f_15c_data_model_v2_make_fdel(__pyx_v_field); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1466, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "c_data_model_v2.pyx":1463
 *                     make_container_fget(field))
 *         else:
 *             setattr(cls, field.name, property(             # <<<<<<<<<<<<<<
 *                     make_fget(field),
 *                     make_fset(field),
 */
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_4);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = PyObject_SetAttr(((PyObject *)__pyx_v_cls), __pyx_t_2, __pyx_t_4); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1463, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":1467
 *                     make_fset(field),
 *                     make_fdel(field)))
 *             get_func_name = make_autogen_func_name(attrs, 'get', field.name)             # <<<<<<<<<<<<<<
 *             setattr(cls, get_func_name,
 *                     make_get_func(field))
 */
    __pyx_t_4 = __pyx_v_field->name;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_2 = __pyx_f_15c_data_model_v2_make_autogen_func_name(__pyx_v_attrs, __pyx_n_s_get, ((PyObject*)__pyx_t_4)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_get_func_name = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "c_data_model_v2.pyx":1469
 *             get_func_name = make_autogen_func_name(attrs, 'get', field.name)
 *             setattr(cls, get_func_name,
 *                     make_get_func(field))             # <<<<<<<<<<<<<<
 * 
 *         if field.arithm:
 */
    __pyx_t_2 = __pyx_f_15c_data_model_v2_make_get_func(__pyx_v_field); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "c_data_model_v2.pyx":1468
 *                     make_fdel(field)))
 *             get_func_name = make_autogen_func_name(attrs, 'get', field.name)
 *             setattr(cls, get_func_name,             # <<<<<<<<<<<<<<
 *                     make_get_func(field))
 * 
 */
    __pyx_t_7 = PyObject_SetAttr(((PyObject *)__pyx_v_cls), __pyx_v_get_func_name, __pyx_t_2); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1468, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "c_data_model_v2.pyx":1471
 *                     make_get_func(field))
 * 
 *         if field.arithm:             # <<<<<<<<<<<<<<
 *             #  add_`name' or _add_`name'
 *             add_func_name = make_autogen_func_name(attrs, 'add', field.name)
 */
  __pyx_t_1 = (__pyx_v_field->arithm != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":1473
 *         if field.arithm:
 *             #  add_`name' or _add_`name'
 *             add_func_name = make_autogen_func_name(attrs, 'add', field.name)             # <<<<<<<<<<<<<<
 *             setattr(cls, add_func_name,
 *                     make_add_func(field))
 */
    __pyx_t_2 = __pyx_v_field->name;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_4 = __pyx_f_15c_data_model_v2_make_autogen_func_name(__pyx_v_attrs, __pyx_n_s_add_2, ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_add_func_name = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":1475
 *             add_func_name = make_autogen_func_name(attrs, 'add', field.name)
 *             setattr(cls, add_func_name,
 *                     make_add_func(field))             # <<<<<<<<<<<<<<
 * 
 *             #  sub_`name' or _sub_`name'
 */
    __pyx_t_4 = __pyx_f_15c_data_model_v2_make_add_func(__pyx_v_field); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "c_data_model_v2.pyx":1474
 *             #  add_`name' or _add_`name'
 *             add_func_name = make_autogen_func_name(attrs, 'add', field.name)
 *             setattr(cls, add_func_name,             # <<<<<<<<<<<<<<
 *                     make_add_func(field))
 * 
 */
    __pyx_t_7 = PyObject_SetAttr(((PyObject *)__pyx_v_cls), __pyx_v_add_func_name, __pyx_t_4); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1474, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":1478
 * 
 *             #  sub_`name' or _sub_`name'
 *             sub_func_name = make_autogen_func_name(attrs, 'sub', field.name)             # <<<<<<<<<<<<<<
 *             if field.has_min_value:
 *                 setattr(cls, sub_func_name,
 */
    __pyx_t_4 = __pyx_v_field->name;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_2 = __pyx_f_15c_data_model_v2_make_autogen_func_name(__pyx_v_attrs, __pyx_n_s_sub_2, ((PyObject*)__pyx_t_4)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_sub_func_name = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "c_data_model_v2.pyx":1479
 *             #  sub_`name' or _sub_`name'
 *             sub_func_name = make_autogen_func_name(attrs, 'sub', field.name)
 *             if field.has_min_value:             # <<<<<<<<<<<<<<
 *                 setattr(cls, sub_func_name,
 *                         make_sub_func_with_min_value(field))
 */
    __pyx_t_1 = (__pyx_v_field->has_min_value != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":1481
 *             if field.has_min_value:
 *                 setattr(cls, sub_func_name,
 *                         make_sub_func_with_min_value(field))             # <<<<<<<<<<<<<<
 *             elif field.is_unsigned:
 *                 setattr(cls, sub_func_name,
 */
      __pyx_t_2 = __pyx_f_15c_data_model_v2_make_sub_func_with_min_value(__pyx_v_field); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1481, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);

      /* "c_data_model_v2.pyx":1480
 *             sub_func_name = make_autogen_func_name(attrs, 'sub', field.name)
 *             if field.has_min_value:
 *                 setattr(cls, sub_func_name,             # <<<<<<<<<<<<<<
 *                         make_sub_func_with_min_value(field))
 *             elif field.is_unsigned:
 */
      __pyx_t_7 = PyObject_SetAttr(((PyObject *)__pyx_v_cls), __pyx_v_sub_func_name, __pyx_t_2); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1480, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "c_data_model_v2.pyx":1479
 *             #  sub_`name' or _sub_`name'
 *             sub_func_name = make_autogen_func_name(attrs, 'sub', field.name)
 *             if field.has_min_value:             # <<<<<<<<<<<<<<
 *                 setattr(cls, sub_func_name,
 *                         make_sub_func_with_min_value(field))
 */
      goto __pyx_L5;
    }

    /* "c_data_model_v2.pyx":1482
 *                 setattr(cls, sub_func_name,
 *                         make_sub_func_with_min_value(field))
 *             elif field.is_unsigned:             # <<<<<<<<<<<<<<
 *                 setattr(cls, sub_func_name,
 *                         make_unsigned_sub_func(field))
 */
    __pyx_t_1 = (__pyx_v_field->is_unsigned != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":1484
 *             elif field.is_unsigned:
 *                 setattr(cls, sub_func_name,
 *                         make_unsigned_sub_func(field))             # <<<<<<<<<<<<<<
 *             else:
 *                 setattr(cls, sub_func_name,
 */
      __pyx_t_2 = __pyx_f_15c_data_model_v2_make_unsigned_sub_func(__pyx_v_field); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1484, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);

      /* "c_data_model_v2.pyx":1483
 *                         make_sub_func_with_min_value(field))
 *             elif field.is_unsigned:
 *                 setattr(cls, sub_func_name,             # <<<<<<<<<<<<<<
 *                         make_unsigned_sub_func(field))
 *             else:
 */
      __pyx_t_7 = PyObject_SetAttr(((PyObject *)__pyx_v_cls), __pyx_v_sub_func_name, __pyx_t_2); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1483, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "c_data_model_v2.pyx":1482
 *                 setattr(cls, sub_func_name,
 *                         make_sub_func_with_min_value(field))
 *             elif field.is_unsigned:             # <<<<<<<<<<<<<<
 *                 setattr(cls, sub_func_name,
 *                         make_unsigned_sub_func(field))
 */
      goto __pyx_L5;
    }

    /* "c_data_model_v2.pyx":1486
 *                         make_unsigned_sub_func(field))
 *             else:
 *                 setattr(cls, sub_func_name,             # <<<<<<<<<<<<<<
 *                         make_signed_sub_func(field))
 * 
 */
    /*else*/ {

      /* "c_data_model_v2.pyx":1487
 *             else:
 *                 setattr(cls, sub_func_name,
 *                         make_signed_sub_func(field))             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_2 = __pyx_f_15c_data_model_v2_make_signed_sub_func(__pyx_v_field); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1487, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);

      /* "c_data_model_v2.pyx":1486
 *                         make_unsigned_sub_func(field))
 *             else:
 *                 setattr(cls, sub_func_name,             # <<<<<<<<<<<<<<
 *                         make_signed_sub_func(field))
 * 
 */
      __pyx_t_7 = PyObject_SetAttr(((PyObject *)__pyx_v_cls), __pyx_v_sub_func_name, __pyx_t_2); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1486, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L5:;

    /* "c_data_model_v2.pyx":1471
 *                     make_get_func(field))
 * 
 *         if field.arithm:             # <<<<<<<<<<<<<<
 *             #  add_`name' or _add_`name'
 *             add_func_name = make_autogen_func_name(attrs, 'add', field.name)
 */
  }

  /* "c_data_model_v2.pyx":1452
 * 
 * 
 *     def make_auto_gen_methods(cls, Field field, attrs):             # <<<<<<<<<<<<<<
 *         cdef str get_func_name
 *         if field.is_container():
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("c_data_model_v2.MetaDataModel.make_auto_gen_methods", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_get_func_name);
  __Pyx_XDECREF(__pyx_v_add_func_name);
  __Pyx_XDECREF(__pyx_v_sub_func_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1496
 * 
 * 
 *     def __getmetaclass__(_):             # <<<<<<<<<<<<<<
 *         return MetaDataModel
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_1__getmetaclass__(PyObject *__pyx_v__, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_15c_data_model_v2_9DataModel___getmetaclass__[] = "DataModel.__getmetaclass__(_)";
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_1__getmetaclass__(PyObject *__pyx_v__, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getmetaclass__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_9DataModel___getmetaclass__(((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_v__));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_9DataModel___getmetaclass__(CYTHON_UNUSED struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v__) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getmetaclass__", 0);

  /* "c_data_model_v2.pyx":1497
 * 
 *     def __getmetaclass__(_):
 *         return MetaDataModel             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_15c_data_model_v2_MetaDataModel));
  __pyx_r = ((PyObject *)__pyx_ptype_15c_data_model_v2_MetaDataModel);
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1496
 * 
 * 
 *     def __getmetaclass__(_):             # <<<<<<<<<<<<<<
 *         return MetaDataModel
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1500
 * 
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.protocol = self._protocol_
 * 
 */

/* Python wrapper */
static int __pyx_pw_15c_data_model_v2_9DataModel_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_15c_data_model_v2_9DataModel_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_15c_data_model_v2_9DataModel_2__cinit__(((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15c_data_model_v2_9DataModel_2__cinit__(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "c_data_model_v2.pyx":1501
 * 
 *     def __cinit__(self):
 *         self.protocol = self._protocol_             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_protocol); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_15c_data_model_v2_DataModelProtocol))))) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->protocol);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->protocol));
  __pyx_v_self->protocol = ((struct __pyx_obj_15c_data_model_v2_DataModelProtocol *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1500
 * 
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.protocol = self._protocol_
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.DataModel.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1504
 * 
 * 
 *     cpdef DataModelProtocol _get_protocol(self):             # <<<<<<<<<<<<<<
 *         return self.protocol
 * 
 */

static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_5_get_protocol(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_15c_data_model_v2_DataModelProtocol *__pyx_f_15c_data_model_v2_9DataModel__get_protocol(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_15c_data_model_v2_DataModelProtocol *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_get_protocol", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_protocol); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1504, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_15c_data_model_v2_9DataModel_5_get_protocol)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1504, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1504, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_15c_data_model_v2_DataModelProtocol))))) __PYX_ERR(0, 1504, __pyx_L1_error)
      __pyx_r = ((struct __pyx_obj_15c_data_model_v2_DataModelProtocol *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "c_data_model_v2.pyx":1505
 * 
 *     cpdef DataModelProtocol _get_protocol(self):
 *         return self.protocol             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->protocol));
  __pyx_r = __pyx_v_self->protocol;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1504
 * 
 * 
 *     cpdef DataModelProtocol _get_protocol(self):             # <<<<<<<<<<<<<<
 *         return self.protocol
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("c_data_model_v2.DataModel._get_protocol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_5_get_protocol(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_15c_data_model_v2_9DataModel_4_get_protocol[] = "DataModel._get_protocol(self) -> DataModelProtocol";
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_5_get_protocol(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_protocol (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_9DataModel_4_get_protocol(((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_4_get_protocol(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_get_protocol", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_15c_data_model_v2_9DataModel__get_protocol(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.DataModel._get_protocol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1508
 * 
 * 
 *     cpdef FieldsDefine _get_fields_define(self):             # <<<<<<<<<<<<<<
 *         return self.protocol.fields_define
 * 
 */

static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_7_get_fields_define(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_15c_data_model_v2_FieldsDefine *__pyx_f_15c_data_model_v2_9DataModel__get_fields_define(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_15c_data_model_v2_FieldsDefine *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_get_fields_define", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_fields_define); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_15c_data_model_v2_9DataModel_7_get_fields_define)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1508, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1508, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_15c_data_model_v2_FieldsDefine))))) __PYX_ERR(0, 1508, __pyx_L1_error)
      __pyx_r = ((struct __pyx_obj_15c_data_model_v2_FieldsDefine *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "c_data_model_v2.pyx":1509
 * 
 *     cpdef FieldsDefine _get_fields_define(self):
 *         return self.protocol.fields_define             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->protocol->fields_define));
  __pyx_r = __pyx_v_self->protocol->fields_define;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1508
 * 
 * 
 *     cpdef FieldsDefine _get_fields_define(self):             # <<<<<<<<<<<<<<
 *         return self.protocol.fields_define
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("c_data_model_v2.DataModel._get_fields_define", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_7_get_fields_define(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_15c_data_model_v2_9DataModel_6_get_fields_define[] = "DataModel._get_fields_define(self) -> FieldsDefine";
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_7_get_fields_define(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_fields_define (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_9DataModel_6_get_fields_define(((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_6_get_fields_define(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_get_fields_define", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_15c_data_model_v2_9DataModel__get_fields_define(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.DataModel._get_fields_define", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1512
 * 
 * 
 *     def __init__(self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._set_data(kwargs)
 * 
 */

/* Python wrapper */
static int __pyx_pw_15c_data_model_v2_9DataModel_9__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_15c_data_model_v2_9DataModel_9__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_15c_data_model_v2_9DataModel_8__init__(((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15c_data_model_v2_9DataModel_8__init__(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "c_data_model_v2.pyx":1513
 * 
 *     def __init__(self, **kwargs):
 *         self._set_data(kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_self->__pyx_vtab)->_set_data(__pyx_v_self, __pyx_v_kwargs);

  /* "c_data_model_v2.pyx":1512
 * 
 * 
 *     def __init__(self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._set_data(kwargs)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1516
 * 
 * 
 *     cdef void _set_data(self, kwargs):             # <<<<<<<<<<<<<<
 *         if not kwargs:
 *             return
 */

static void __pyx_f_15c_data_model_v2_9DataModel__set_data(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_15c_data_model_v2_FieldsDefine *__pyx_v_fields_define = 0;
  PyObject *__pyx_v_obj_dict = NULL;
  PyObject *__pyx_v_fields_by_name = 0;
  struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field = 0;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_value = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("_set_data", 0);

  /* "c_data_model_v2.pyx":1517
 * 
 *     cdef void _set_data(self, kwargs):
 *         if not kwargs:             # <<<<<<<<<<<<<<
 *             return
 *         cdef FieldsDefine fields_define = self._get_fields_define()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_kwargs); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":1518
 *     cdef void _set_data(self, kwargs):
 *         if not kwargs:
 *             return             # <<<<<<<<<<<<<<
 *         cdef FieldsDefine fields_define = self._get_fields_define()
 *         obj_dict = self.__dict__
 */
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1517
 * 
 *     cdef void _set_data(self, kwargs):
 *         if not kwargs:             # <<<<<<<<<<<<<<
 *             return
 *         cdef FieldsDefine fields_define = self._get_fields_define()
 */
  }

  /* "c_data_model_v2.pyx":1519
 *         if not kwargs:
 *             return
 *         cdef FieldsDefine fields_define = self._get_fields_define()             # <<<<<<<<<<<<<<
 *         obj_dict = self.__dict__
 *         cdef dict fields_by_name = fields_define.fields_by_name
 */
  __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_self->__pyx_vtab)->_get_fields_define(__pyx_v_self, 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_fields_define = ((struct __pyx_obj_15c_data_model_v2_FieldsDefine *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "c_data_model_v2.pyx":1520
 *             return
 *         cdef FieldsDefine fields_define = self._get_fields_define()
 *         obj_dict = self.__dict__             # <<<<<<<<<<<<<<
 *         cdef dict fields_by_name = fields_define.fields_by_name
 *         cdef Field field
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_obj_dict = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "c_data_model_v2.pyx":1521
 *         cdef FieldsDefine fields_define = self._get_fields_define()
 *         obj_dict = self.__dict__
 *         cdef dict fields_by_name = fields_define.fields_by_name             # <<<<<<<<<<<<<<
 *         cdef Field field
 *         for name, value in kwargs.iteritems():
 */
  __pyx_t_3 = __pyx_v_fields_define->fields_by_name;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_fields_by_name = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "c_data_model_v2.pyx":1523
 *         cdef dict fields_by_name = fields_define.fields_by_name
 *         cdef Field field
 *         for name, value in kwargs.iteritems():             # <<<<<<<<<<<<<<
 *             field = fields_by_name.get(name)
 *             if field is not None:
 */
  __pyx_t_4 = 0;
  if (unlikely(__pyx_v_kwargs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    __PYX_ERR(0, 1523, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_dict_iterator(__pyx_v_kwargs, 0, __pyx_n_s_iteritems, (&__pyx_t_5), (&__pyx_t_6)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = __pyx_t_7;
  __pyx_t_7 = 0;
  while (1) {
    __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_5, &__pyx_t_4, &__pyx_t_7, &__pyx_t_8, NULL, __pyx_t_6);
    if (unlikely(__pyx_t_9 == 0)) break;
    if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 1523, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "c_data_model_v2.pyx":1524
 *         cdef Field field
 *         for name, value in kwargs.iteritems():
 *             field = fields_by_name.get(name)             # <<<<<<<<<<<<<<
 *             if field is not None:
 *                 obj_dict[field.key] = value
 */
    if (unlikely(__pyx_v_fields_by_name == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
      __PYX_ERR(0, 1524, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_PyDict_GetItemDefault(__pyx_v_fields_by_name, __pyx_v_name, Py_None); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_15c_data_model_v2_Field))))) __PYX_ERR(0, 1524, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_field, ((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_8));
    __pyx_t_8 = 0;

    /* "c_data_model_v2.pyx":1525
 *         for name, value in kwargs.iteritems():
 *             field = fields_by_name.get(name)
 *             if field is not None:             # <<<<<<<<<<<<<<
 *                 obj_dict[field.key] = value
 *             else:
 */
    __pyx_t_2 = (((PyObject *)__pyx_v_field) != Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":1526
 *             field = fields_by_name.get(name)
 *             if field is not None:
 *                 obj_dict[field.key] = value             # <<<<<<<<<<<<<<
 *             else:
 *                 obj_dict[name] = value
 */
      if (unlikely(PyObject_SetItem(__pyx_v_obj_dict, __pyx_v_field->key, __pyx_v_value) < 0)) __PYX_ERR(0, 1526, __pyx_L1_error)

      /* "c_data_model_v2.pyx":1525
 *         for name, value in kwargs.iteritems():
 *             field = fields_by_name.get(name)
 *             if field is not None:             # <<<<<<<<<<<<<<
 *                 obj_dict[field.key] = value
 *             else:
 */
      goto __pyx_L6;
    }

    /* "c_data_model_v2.pyx":1528
 *                 obj_dict[field.key] = value
 *             else:
 *                 obj_dict[name] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      if (unlikely(PyObject_SetItem(__pyx_v_obj_dict, __pyx_v_name, __pyx_v_value) < 0)) __PYX_ERR(0, 1528, __pyx_L1_error)
    }
    __pyx_L6:;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "c_data_model_v2.pyx":1516
 * 
 * 
 *     cdef void _set_data(self, kwargs):             # <<<<<<<<<<<<<<
 *         if not kwargs:
 *             return
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("c_data_model_v2.DataModel._set_data", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_fields_define);
  __Pyx_XDECREF(__pyx_v_obj_dict);
  __Pyx_XDECREF(__pyx_v_fields_by_name);
  __Pyx_XDECREF((PyObject *)__pyx_v_field);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":1531
 * 
 * 
 *     cdef void _clear_field_changed(self, dict self_dict, Field field,             # <<<<<<<<<<<<<<
 *                                    bint recursive,
 *                                    bint clear_self_changed_set=True):
 */

static void __pyx_f_15c_data_model_v2_9DataModel__clear_field_changed(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_self_dict, struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field, int __pyx_v_recursive, struct __pyx_opt_args_15c_data_model_v2_9DataModel__clear_field_changed *__pyx_optional_args) {

  /* "c_data_model_v2.pyx":1533
 *     cdef void _clear_field_changed(self, dict self_dict, Field field,
 *                                    bint recursive,
 *                                    bint clear_self_changed_set=True):             # <<<<<<<<<<<<<<
 *         cdef DataModel dm_value
 *         if not field.key in self_dict:
 */
  int __pyx_v_clear_self_changed_set = ((int)1);
  struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_dm_value = 0;
  PyObject *__pyx_v_value = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_clear_field_changed", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_clear_self_changed_set = __pyx_optional_args->clear_self_changed_set;
    }
  }

  /* "c_data_model_v2.pyx":1535
 *                                    bint clear_self_changed_set=True):
 *         cdef DataModel dm_value
 *         if not field.key in self_dict:             # <<<<<<<<<<<<<<
 *             return
 *         if clear_self_changed_set:
 */
  if (unlikely(__pyx_v_self_dict == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1535, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_field->key, __pyx_v_self_dict, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":1536
 *         cdef DataModel dm_value
 *         if not field.key in self_dict:
 *             return             # <<<<<<<<<<<<<<
 *         if clear_self_changed_set:
 *             self.changed_set.clear_field_dirty(field.index)
 */
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1535
 *                                    bint clear_self_changed_set=True):
 *         cdef DataModel dm_value
 *         if not field.key in self_dict:             # <<<<<<<<<<<<<<
 *             return
 *         if clear_self_changed_set:
 */
  }

  /* "c_data_model_v2.pyx":1537
 *         if not field.key in self_dict:
 *             return
 *         if clear_self_changed_set:             # <<<<<<<<<<<<<<
 *             self.changed_set.clear_field_dirty(field.index)
 *         if recursive:
 */
  __pyx_t_2 = (__pyx_v_clear_self_changed_set != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":1538
 *             return
 *         if clear_self_changed_set:
 *             self.changed_set.clear_field_dirty(field.index)             # <<<<<<<<<<<<<<
 *         if recursive:
 *             value = self_dict.get(field.key)
 */
    __pyx_v_self->changed_set.clear_field_dirty(__pyx_v_field->index);

    /* "c_data_model_v2.pyx":1537
 *         if not field.key in self_dict:
 *             return
 *         if clear_self_changed_set:             # <<<<<<<<<<<<<<
 *             self.changed_set.clear_field_dirty(field.index)
 *         if recursive:
 */
  }

  /* "c_data_model_v2.pyx":1539
 *         if clear_self_changed_set:
 *             self.changed_set.clear_field_dirty(field.index)
 *         if recursive:             # <<<<<<<<<<<<<<
 *             value = self_dict.get(field.key)
 *             if field.is_container():
 */
  __pyx_t_2 = (__pyx_v_recursive != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":1540
 *             self.changed_set.clear_field_dirty(field.index)
 *         if recursive:
 *             value = self_dict.get(field.key)             # <<<<<<<<<<<<<<
 *             if field.is_container():
 *                 _container_clear_changed(field, value, recursive)
 */
    if (unlikely(__pyx_v_self_dict == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
      __PYX_ERR(0, 1540, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__pyx_v_self_dict, __pyx_v_field->key, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_value = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "c_data_model_v2.pyx":1541
 *         if recursive:
 *             value = self_dict.get(field.key)
 *             if field.is_container():             # <<<<<<<<<<<<<<
 *                 _container_clear_changed(field, value, recursive)
 *             elif field.is_data_model_type():
 */
    __pyx_t_2 = (__pyx_f_15c_data_model_v2_5Field_is_container(__pyx_v_field) != 0);
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":1542
 *             value = self_dict.get(field.key)
 *             if field.is_container():
 *                 _container_clear_changed(field, value, recursive)             # <<<<<<<<<<<<<<
 *             elif field.is_data_model_type():
 *                 dm_value = <DataModel>value
 */
      __pyx_f_15c_data_model_v2__container_clear_changed(__pyx_v_field, __pyx_v_value, __pyx_v_recursive);

      /* "c_data_model_v2.pyx":1541
 *         if recursive:
 *             value = self_dict.get(field.key)
 *             if field.is_container():             # <<<<<<<<<<<<<<
 *                 _container_clear_changed(field, value, recursive)
 *             elif field.is_data_model_type():
 */
      goto __pyx_L6;
    }

    /* "c_data_model_v2.pyx":1543
 *             if field.is_container():
 *                 _container_clear_changed(field, value, recursive)
 *             elif field.is_data_model_type():             # <<<<<<<<<<<<<<
 *                 dm_value = <DataModel>value
 *                 dm_value._clear_changed(None, recursive)
 */
    __pyx_t_2 = (__pyx_f_15c_data_model_v2_5Field_is_data_model_type(__pyx_v_field) != 0);
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":1544
 *                 _container_clear_changed(field, value, recursive)
 *             elif field.is_data_model_type():
 *                 dm_value = <DataModel>value             # <<<<<<<<<<<<<<
 *                 dm_value._clear_changed(None, recursive)
 * 
 */
      __pyx_t_3 = __pyx_v_value;
      __Pyx_INCREF(__pyx_t_3);
      __pyx_v_dm_value = ((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "c_data_model_v2.pyx":1545
 *             elif field.is_data_model_type():
 *                 dm_value = <DataModel>value
 *                 dm_value._clear_changed(None, recursive)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      ((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_dm_value->__pyx_vtab)->_clear_changed(__pyx_v_dm_value, Py_None, __pyx_v_recursive);

      /* "c_data_model_v2.pyx":1543
 *             if field.is_container():
 *                 _container_clear_changed(field, value, recursive)
 *             elif field.is_data_model_type():             # <<<<<<<<<<<<<<
 *                 dm_value = <DataModel>value
 *                 dm_value._clear_changed(None, recursive)
 */
    }
    __pyx_L6:;

    /* "c_data_model_v2.pyx":1539
 *         if clear_self_changed_set:
 *             self.changed_set.clear_field_dirty(field.index)
 *         if recursive:             # <<<<<<<<<<<<<<
 *             value = self_dict.get(field.key)
 *             if field.is_container():
 */
  }

  /* "c_data_model_v2.pyx":1531
 * 
 * 
 *     cdef void _clear_field_changed(self, dict self_dict, Field field,             # <<<<<<<<<<<<<<
 *                                    bint recursive,
 *                                    bint clear_self_changed_set=True):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("c_data_model_v2.DataModel._clear_field_changed", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dm_value);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":1548
 * 
 * 
 *     cdef bint _has_field_changed(self, Field field, dict self_dict,             # <<<<<<<<<<<<<<
 *                                  bint recursive):
 *         if field.skip_changed:
 */

static int __pyx_f_15c_data_model_v2_9DataModel__has_field_changed(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field, PyObject *__pyx_v_self_dict, int __pyx_v_recursive) {
  PyObject *__pyx_v_value = 0;
  struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_dm_obj = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("_has_field_changed", 0);

  /* "c_data_model_v2.pyx":1550
 *     cdef bint _has_field_changed(self, Field field, dict self_dict,
 *                                  bint recursive):
 *         if field.skip_changed:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
  __pyx_t_1 = (__pyx_v_field->skip_changed != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":1551
 *                                  bint recursive):
 *         if field.skip_changed:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *         cdef object value
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1550
 *     cdef bint _has_field_changed(self, Field field, dict self_dict,
 *                                  bint recursive):
 *         if field.skip_changed:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
  }

  /* "c_data_model_v2.pyx":1556
 *         cdef DataModel dm_obj
 * 
 *         if field.is_container():             # <<<<<<<<<<<<<<
 *             if self.changed_set.is_field_dirty(field.index):
 *                 return True
 */
  __pyx_t_1 = (__pyx_f_15c_data_model_v2_5Field_is_container(__pyx_v_field) != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":1557
 * 
 *         if field.is_container():
 *             if self.changed_set.is_field_dirty(field.index):             # <<<<<<<<<<<<<<
 *                 return True
 *             if recursive:
 */
    __pyx_t_1 = (__pyx_v_self->changed_set.is_field_dirty(__pyx_v_field->index) != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":1558
 *         if field.is_container():
 *             if self.changed_set.is_field_dirty(field.index):
 *                 return True             # <<<<<<<<<<<<<<
 *             if recursive:
 *                 value = self_dict.get(field.key)
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":1557
 * 
 *         if field.is_container():
 *             if self.changed_set.is_field_dirty(field.index):             # <<<<<<<<<<<<<<
 *                 return True
 *             if recursive:
 */
    }

    /* "c_data_model_v2.pyx":1559
 *             if self.changed_set.is_field_dirty(field.index):
 *                 return True
 *             if recursive:             # <<<<<<<<<<<<<<
 *                 value = self_dict.get(field.key)
 *                 if value is not None:
 */
    __pyx_t_1 = (__pyx_v_recursive != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":1560
 *                 return True
 *             if recursive:
 *                 value = self_dict.get(field.key)             # <<<<<<<<<<<<<<
 *                 if value is not None:
 *                     if field.ref:
 */
      if (unlikely(__pyx_v_self_dict == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
        __PYX_ERR(0, 1560, __pyx_L1_error)
      }
      __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_self_dict, __pyx_v_field->key, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1560, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_value = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "c_data_model_v2.pyx":1561
 *             if recursive:
 *                 value = self_dict.get(field.key)
 *                 if value is not None:             # <<<<<<<<<<<<<<
 *                     if field.ref:
 *                         return _container_has_changed(field, value, False)
 */
      __pyx_t_1 = (__pyx_v_value != Py_None);
      __pyx_t_3 = (__pyx_t_1 != 0);
      if (__pyx_t_3) {

        /* "c_data_model_v2.pyx":1562
 *                 value = self_dict.get(field.key)
 *                 if value is not None:
 *                     if field.ref:             # <<<<<<<<<<<<<<
 *                         return _container_has_changed(field, value, False)
 *                     else:
 */
        __pyx_t_3 = (__pyx_v_field->ref != 0);
        if (__pyx_t_3) {

          /* "c_data_model_v2.pyx":1563
 *                 if value is not None:
 *                     if field.ref:
 *                         return _container_has_changed(field, value, False)             # <<<<<<<<<<<<<<
 *                     else:
 *                         return _container_has_changed(field, value, recursive)
 */
          __pyx_r = __pyx_f_15c_data_model_v2__container_has_changed(__pyx_v_field, __pyx_v_value, 0);
          goto __pyx_L0;

          /* "c_data_model_v2.pyx":1562
 *                 value = self_dict.get(field.key)
 *                 if value is not None:
 *                     if field.ref:             # <<<<<<<<<<<<<<
 *                         return _container_has_changed(field, value, False)
 *                     else:
 */
        }

        /* "c_data_model_v2.pyx":1565
 *                         return _container_has_changed(field, value, False)
 *                     else:
 *                         return _container_has_changed(field, value, recursive)             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
        /*else*/ {
          __pyx_r = __pyx_f_15c_data_model_v2__container_has_changed(__pyx_v_field, __pyx_v_value, __pyx_v_recursive);
          goto __pyx_L0;
        }

        /* "c_data_model_v2.pyx":1561
 *             if recursive:
 *                 value = self_dict.get(field.key)
 *                 if value is not None:             # <<<<<<<<<<<<<<
 *                     if field.ref:
 *                         return _container_has_changed(field, value, False)
 */
      }

      /* "c_data_model_v2.pyx":1559
 *             if self.changed_set.is_field_dirty(field.index):
 *                 return True
 *             if recursive:             # <<<<<<<<<<<<<<
 *                 value = self_dict.get(field.key)
 *                 if value is not None:
 */
    }

    /* "c_data_model_v2.pyx":1566
 *                     else:
 *                         return _container_has_changed(field, value, recursive)
 *             return False             # <<<<<<<<<<<<<<
 * 
 *         if field.is_data_model_type() and (not field.ref):
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1556
 *         cdef DataModel dm_obj
 * 
 *         if field.is_container():             # <<<<<<<<<<<<<<
 *             if self.changed_set.is_field_dirty(field.index):
 *                 return True
 */
  }

  /* "c_data_model_v2.pyx":1568
 *             return False
 * 
 *         if field.is_data_model_type() and (not field.ref):             # <<<<<<<<<<<<<<
 *             if self.changed_set.is_field_dirty(field.index):
 *                 return True
 */
  __pyx_t_1 = (__pyx_f_15c_data_model_v2_5Field_is_data_model_type(__pyx_v_field) != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_3 = __pyx_t_1;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_1 = ((!(__pyx_v_field->ref != 0)) != 0);
  __pyx_t_3 = __pyx_t_1;
  __pyx_L10_bool_binop_done:;
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":1569
 * 
 *         if field.is_data_model_type() and (not field.ref):
 *             if self.changed_set.is_field_dirty(field.index):             # <<<<<<<<<<<<<<
 *                 return True
 *             if recursive:
 */
    __pyx_t_3 = (__pyx_v_self->changed_set.is_field_dirty(__pyx_v_field->index) != 0);
    if (__pyx_t_3) {

      /* "c_data_model_v2.pyx":1570
 *         if field.is_data_model_type() and (not field.ref):
 *             if self.changed_set.is_field_dirty(field.index):
 *                 return True             # <<<<<<<<<<<<<<
 *             if recursive:
 *                 value = self_dict.get(field.key)
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "c_data_model_v2.pyx":1569
 * 
 *         if field.is_data_model_type() and (not field.ref):
 *             if self.changed_set.is_field_dirty(field.index):             # <<<<<<<<<<<<<<
 *                 return True
 *             if recursive:
 */
    }

    /* "c_data_model_v2.pyx":1571
 *             if self.changed_set.is_field_dirty(field.index):
 *                 return True
 *             if recursive:             # <<<<<<<<<<<<<<
 *                 value = self_dict.get(field.key)
 *                 if value is not None:
 */
    __pyx_t_3 = (__pyx_v_recursive != 0);
    if (__pyx_t_3) {

      /* "c_data_model_v2.pyx":1572
 *                 return True
 *             if recursive:
 *                 value = self_dict.get(field.key)             # <<<<<<<<<<<<<<
 *                 if value is not None:
 *                     dm_obj = <DataModel>value
 */
      if (unlikely(__pyx_v_self_dict == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
        __PYX_ERR(0, 1572, __pyx_L1_error)
      }
      __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_self_dict, __pyx_v_field->key, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1572, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_value = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "c_data_model_v2.pyx":1573
 *             if recursive:
 *                 value = self_dict.get(field.key)
 *                 if value is not None:             # <<<<<<<<<<<<<<
 *                     dm_obj = <DataModel>value
 *                     return dm_obj._has_changed(recursive)
 */
      __pyx_t_3 = (__pyx_v_value != Py_None);
      __pyx_t_1 = (__pyx_t_3 != 0);
      if (__pyx_t_1) {

        /* "c_data_model_v2.pyx":1574
 *                 value = self_dict.get(field.key)
 *                 if value is not None:
 *                     dm_obj = <DataModel>value             # <<<<<<<<<<<<<<
 *                     return dm_obj._has_changed(recursive)
 *             return False
 */
        __pyx_t_2 = __pyx_v_value;
        __Pyx_INCREF(__pyx_t_2);
        __pyx_v_dm_obj = ((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_t_2);
        __pyx_t_2 = 0;

        /* "c_data_model_v2.pyx":1575
 *                 if value is not None:
 *                     dm_obj = <DataModel>value
 *                     return dm_obj._has_changed(recursive)             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
        __pyx_r = ((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_dm_obj->__pyx_vtab)->_has_changed(__pyx_v_dm_obj, __pyx_v_recursive);
        goto __pyx_L0;

        /* "c_data_model_v2.pyx":1573
 *             if recursive:
 *                 value = self_dict.get(field.key)
 *                 if value is not None:             # <<<<<<<<<<<<<<
 *                     dm_obj = <DataModel>value
 *                     return dm_obj._has_changed(recursive)
 */
      }

      /* "c_data_model_v2.pyx":1571
 *             if self.changed_set.is_field_dirty(field.index):
 *                 return True
 *             if recursive:             # <<<<<<<<<<<<<<
 *                 value = self_dict.get(field.key)
 *                 if value is not None:
 */
    }

    /* "c_data_model_v2.pyx":1576
 *                     dm_obj = <DataModel>value
 *                     return dm_obj._has_changed(recursive)
 *             return False             # <<<<<<<<<<<<<<
 * 
 *         if self.changed_set.is_field_dirty(field.index):
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1568
 *             return False
 * 
 *         if field.is_data_model_type() and (not field.ref):             # <<<<<<<<<<<<<<
 *             if self.changed_set.is_field_dirty(field.index):
 *                 return True
 */
  }

  /* "c_data_model_v2.pyx":1578
 *             return False
 * 
 *         if self.changed_set.is_field_dirty(field.index):             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
  __pyx_t_1 = (__pyx_v_self->changed_set.is_field_dirty(__pyx_v_field->index) != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":1579
 * 
 *         if self.changed_set.is_field_dirty(field.index):
 *             return True             # <<<<<<<<<<<<<<
 * 
 *         return False
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1578
 *             return False
 * 
 *         if self.changed_set.is_field_dirty(field.index):             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
  }

  /* "c_data_model_v2.pyx":1581
 *             return True
 * 
 *         return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1548
 * 
 * 
 *     cdef bint _has_field_changed(self, Field field, dict self_dict,             # <<<<<<<<<<<<<<
 *                                  bint recursive):
 *         if field.skip_changed:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("c_data_model_v2.DataModel._has_field_changed", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF((PyObject *)__pyx_v_dm_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1584
 * 
 * 
 *     cdef void _clear_changed(self, object field_names, bint recursive):             # <<<<<<<<<<<<<<
 *         cdef Field field
 *         cdef object value
 */

static void __pyx_f_15c_data_model_v2_9DataModel__clear_changed(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_field_names, int __pyx_v_recursive) {
  struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field = 0;
  PyObject *__pyx_v_field_name = 0;
  PyObject *__pyx_v_self_dict = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  struct __pyx_opt_args_15c_data_model_v2_9DataModel__clear_field_changed __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  __Pyx_RefNannySetupContext("_clear_changed", 0);

  /* "c_data_model_v2.pyx":1590
 *         cdef str field_name
 *         cdef int field_index
 *         cdef dict self_dict = self.__dict__             # <<<<<<<<<<<<<<
 *         if not field_names:
 *             self.changed_set.clear_all_dirty()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1590, __pyx_L1_error)
  __pyx_v_self_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1591
 *         cdef int field_index
 *         cdef dict self_dict = self.__dict__
 *         if not field_names:             # <<<<<<<<<<<<<<
 *             self.changed_set.clear_all_dirty()
 *             if recursive:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_field_names); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1591, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":1592
 *         cdef dict self_dict = self.__dict__
 *         if not field_names:
 *             self.changed_set.clear_all_dirty()             # <<<<<<<<<<<<<<
 *             if recursive:
 *                 for field in self.protocol.fields_define.fields:
 */
    __pyx_v_self->changed_set.clear_all_dirty();

    /* "c_data_model_v2.pyx":1593
 *         if not field_names:
 *             self.changed_set.clear_all_dirty()
 *             if recursive:             # <<<<<<<<<<<<<<
 *                 for field in self.protocol.fields_define.fields:
 *                     self._clear_field_changed(self_dict, field, recursive, False)
 */
    __pyx_t_3 = (__pyx_v_recursive != 0);
    if (__pyx_t_3) {

      /* "c_data_model_v2.pyx":1594
 *             self.changed_set.clear_all_dirty()
 *             if recursive:
 *                 for field in self.protocol.fields_define.fields:             # <<<<<<<<<<<<<<
 *                     self._clear_field_changed(self_dict, field, recursive, False)
 *         else:
 */
      if (unlikely(__pyx_v_self->protocol->fields_define->fields == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
        __PYX_ERR(0, 1594, __pyx_L1_error)
      }
      __pyx_t_1 = __pyx_v_self->protocol->fields_define->fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
      for (;;) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1594, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1594, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
        if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_15c_data_model_v2_Field))))) __PYX_ERR(0, 1594, __pyx_L1_error)
        __Pyx_XDECREF_SET(__pyx_v_field, ((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_5));
        __pyx_t_5 = 0;

        /* "c_data_model_v2.pyx":1595
 *             if recursive:
 *                 for field in self.protocol.fields_define.fields:
 *                     self._clear_field_changed(self_dict, field, recursive, False)             # <<<<<<<<<<<<<<
 *         else:
 *             for field_name in field_names:
 */
        __pyx_t_6.__pyx_n = 1;
        __pyx_t_6.clear_self_changed_set = 0;
        ((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_self->__pyx_vtab)->_clear_field_changed(__pyx_v_self, __pyx_v_self_dict, __pyx_v_field, __pyx_v_recursive, &__pyx_t_6); 

        /* "c_data_model_v2.pyx":1594
 *             self.changed_set.clear_all_dirty()
 *             if recursive:
 *                 for field in self.protocol.fields_define.fields:             # <<<<<<<<<<<<<<
 *                     self._clear_field_changed(self_dict, field, recursive, False)
 *         else:
 */
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "c_data_model_v2.pyx":1593
 *         if not field_names:
 *             self.changed_set.clear_all_dirty()
 *             if recursive:             # <<<<<<<<<<<<<<
 *                 for field in self.protocol.fields_define.fields:
 *                     self._clear_field_changed(self_dict, field, recursive, False)
 */
    }

    /* "c_data_model_v2.pyx":1591
 *         cdef int field_index
 *         cdef dict self_dict = self.__dict__
 *         if not field_names:             # <<<<<<<<<<<<<<
 *             self.changed_set.clear_all_dirty()
 *             if recursive:
 */
    goto __pyx_L3;
  }

  /* "c_data_model_v2.pyx":1597
 *                     self._clear_field_changed(self_dict, field, recursive, False)
 *         else:
 *             for field_name in field_names:             # <<<<<<<<<<<<<<
 *                 field = self.protocol.fields_define.fields_by_name.get(field_name)
 *                 self._clear_field_changed(self_dict, field, recursive, True)
 */
  /*else*/ {
    if (likely(PyList_CheckExact(__pyx_v_field_names)) || PyTuple_CheckExact(__pyx_v_field_names)) {
      __pyx_t_1 = __pyx_v_field_names; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_field_names); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1597, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1597, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1597, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1597, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1597, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1597, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_1);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1597, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      if (!(likely(PyString_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 1597, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_field_name, ((PyObject*)__pyx_t_5));
      __pyx_t_5 = 0;

      /* "c_data_model_v2.pyx":1598
 *         else:
 *             for field_name in field_names:
 *                 field = self.protocol.fields_define.fields_by_name.get(field_name)             # <<<<<<<<<<<<<<
 *                 self._clear_field_changed(self_dict, field, recursive, True)
 * 
 */
      if (unlikely(__pyx_v_self->protocol->fields_define->fields_by_name == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
        __PYX_ERR(0, 1598, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->protocol->fields_define->fields_by_name, __pyx_v_field_name, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1598, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_15c_data_model_v2_Field))))) __PYX_ERR(0, 1598, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_field, ((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_5));
      __pyx_t_5 = 0;

      /* "c_data_model_v2.pyx":1599
 *             for field_name in field_names:
 *                 field = self.protocol.fields_define.fields_by_name.get(field_name)
 *                 self._clear_field_changed(self_dict, field, recursive, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_6.__pyx_n = 1;
      __pyx_t_6.clear_self_changed_set = 1;
      ((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_self->__pyx_vtab)->_clear_field_changed(__pyx_v_self, __pyx_v_self_dict, __pyx_v_field, __pyx_v_recursive, &__pyx_t_6); 

      /* "c_data_model_v2.pyx":1597
 *                     self._clear_field_changed(self_dict, field, recursive, False)
 *         else:
 *             for field_name in field_names:             # <<<<<<<<<<<<<<
 *                 field = self.protocol.fields_define.fields_by_name.get(field_name)
 *                 self._clear_field_changed(self_dict, field, recursive, True)
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "c_data_model_v2.pyx":1584
 * 
 * 
 *     cdef void _clear_changed(self, object field_names, bint recursive):             # <<<<<<<<<<<<<<
 *         cdef Field field
 *         cdef object value
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("c_data_model_v2.DataModel._clear_changed", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_field);
  __Pyx_XDECREF(__pyx_v_field_name);
  __Pyx_XDECREF(__pyx_v_self_dict);
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":1602
 * 
 * 
 *     cdef void _set_field_changed(self, Field field):             # <<<<<<<<<<<<<<
 *         self.changed_set.set_field_dirty(field.index)
 * 
 */

static void __pyx_f_15c_data_model_v2_9DataModel__set_field_changed(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_field_changed", 0);

  /* "c_data_model_v2.pyx":1603
 * 
 *     cdef void _set_field_changed(self, Field field):
 *         self.changed_set.set_field_dirty(field.index)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->changed_set.set_field_dirty(__pyx_v_field->index);

  /* "c_data_model_v2.pyx":1602
 * 
 * 
 *     cdef void _set_field_changed(self, Field field):             # <<<<<<<<<<<<<<
 *         self.changed_set.set_field_dirty(field.index)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":1606
 * 
 * 
 *     cdef void _set_changed(self, object field_names):             # <<<<<<<<<<<<<<
 *         cdef Field field
 *         if not field_names:
 */

static void __pyx_f_15c_data_model_v2_9DataModel__set_changed(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_field_names) {
  struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field = 0;
  PyObject *__pyx_v_field_name = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  __Pyx_RefNannySetupContext("_set_changed", 0);

  /* "c_data_model_v2.pyx":1608
 *     cdef void _set_changed(self, object field_names):
 *         cdef Field field
 *         if not field_names:             # <<<<<<<<<<<<<<
 *             for field in self.protocol.fields_define.fields:
 *                 self._set_field_changed(field)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_field_names); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1608, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":1609
 *         cdef Field field
 *         if not field_names:
 *             for field in self.protocol.fields_define.fields:             # <<<<<<<<<<<<<<
 *                 self._set_field_changed(field)
 *         else:
 */
    if (unlikely(__pyx_v_self->protocol->fields_define->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 1609, __pyx_L1_error)
    }
    __pyx_t_3 = __pyx_v_self->protocol->fields_define->fields; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    for (;;) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1609, __pyx_L1_error)
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1609, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_15c_data_model_v2_Field))))) __PYX_ERR(0, 1609, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_field, ((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_5));
      __pyx_t_5 = 0;

      /* "c_data_model_v2.pyx":1610
 *         if not field_names:
 *             for field in self.protocol.fields_define.fields:
 *                 self._set_field_changed(field)             # <<<<<<<<<<<<<<
 *         else:
 *             for field_name in field_names:
 */
      ((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_self->__pyx_vtab)->_set_field_changed(__pyx_v_self, __pyx_v_field);

      /* "c_data_model_v2.pyx":1609
 *         cdef Field field
 *         if not field_names:
 *             for field in self.protocol.fields_define.fields:             # <<<<<<<<<<<<<<
 *                 self._set_field_changed(field)
 *         else:
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "c_data_model_v2.pyx":1608
 *     cdef void _set_changed(self, object field_names):
 *         cdef Field field
 *         if not field_names:             # <<<<<<<<<<<<<<
 *             for field in self.protocol.fields_define.fields:
 *                 self._set_field_changed(field)
 */
    goto __pyx_L3;
  }

  /* "c_data_model_v2.pyx":1612
 *                 self._set_field_changed(field)
 *         else:
 *             for field_name in field_names:             # <<<<<<<<<<<<<<
 *                 field = self.protocol.fields_define.fields_by_name.get(field_name)
 *                 self._set_field_changed(field)
 */
  /*else*/ {
    if (likely(PyList_CheckExact(__pyx_v_field_names)) || PyTuple_CheckExact(__pyx_v_field_names)) {
      __pyx_t_3 = __pyx_v_field_names; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_field_names); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1612, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1612, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1612, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1612, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1612, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1612, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_field_name, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "c_data_model_v2.pyx":1613
 *         else:
 *             for field_name in field_names:
 *                 field = self.protocol.fields_define.fields_by_name.get(field_name)             # <<<<<<<<<<<<<<
 *                 self._set_field_changed(field)
 * 
 */
      if (unlikely(__pyx_v_self->protocol->fields_define->fields_by_name == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
        __PYX_ERR(0, 1613, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->protocol->fields_define->fields_by_name, __pyx_v_field_name, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1613, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_15c_data_model_v2_Field))))) __PYX_ERR(0, 1613, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_field, ((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_5));
      __pyx_t_5 = 0;

      /* "c_data_model_v2.pyx":1614
 *             for field_name in field_names:
 *                 field = self.protocol.fields_define.fields_by_name.get(field_name)
 *                 self._set_field_changed(field)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      ((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_self->__pyx_vtab)->_set_field_changed(__pyx_v_self, __pyx_v_field);

      /* "c_data_model_v2.pyx":1612
 *                 self._set_field_changed(field)
 *         else:
 *             for field_name in field_names:             # <<<<<<<<<<<<<<
 *                 field = self.protocol.fields_define.fields_by_name.get(field_name)
 *                 self._set_field_changed(field)
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "c_data_model_v2.pyx":1606
 * 
 * 
 *     cdef void _set_changed(self, object field_names):             # <<<<<<<<<<<<<<
 *         cdef Field field
 *         if not field_names:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("c_data_model_v2.DataModel._set_changed", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_field);
  __Pyx_XDECREF(__pyx_v_field_name);
  __Pyx_RefNannyFinishContext();
}

/* "c_data_model_v2.pyx":1617
 * 
 * 
 *     cdef str _get_info_(self, int nfields):             # <<<<<<<<<<<<<<
 *         cdef list array = []
 *         cdef int idx = 0
 */

static PyObject *__pyx_f_15c_data_model_v2_9DataModel__get_info_(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, int __pyx_v_nfields) {
  PyObject *__pyx_v_array = 0;
  int __pyx_v_idx;
  struct __pyx_obj_15c_data_model_v2_FieldsDefine *__pyx_v_fields_define = 0;
  struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field = 0;
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_v_info = NULL;
  PyObject *__pyx_v_obj_info = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("_get_info_", 0);

  /* "c_data_model_v2.pyx":1618
 * 
 *     cdef str _get_info_(self, int nfields):
 *         cdef list array = []             # <<<<<<<<<<<<<<
 *         cdef int idx = 0
 *         cdef FieldsDefine fields_define = self._get_fields_define()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_array = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1619
 *     cdef str _get_info_(self, int nfields):
 *         cdef list array = []
 *         cdef int idx = 0             # <<<<<<<<<<<<<<
 *         cdef FieldsDefine fields_define = self._get_fields_define()
 *         cdef Field field
 */
  __pyx_v_idx = 0;

  /* "c_data_model_v2.pyx":1620
 *         cdef list array = []
 *         cdef int idx = 0
 *         cdef FieldsDefine fields_define = self._get_fields_define()             # <<<<<<<<<<<<<<
 *         cdef Field field
 *         cdef str key
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_self->__pyx_vtab)->_get_fields_define(__pyx_v_self, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fields_define = ((struct __pyx_obj_15c_data_model_v2_FieldsDefine *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1623
 *         cdef Field field
 *         cdef str key
 *         while nfields > 0 and idx < len(fields_define.fields):             # <<<<<<<<<<<<<<
 *             field = fields_define.fields[idx]
 *             idx += 1
 */
  while (1) {
    __pyx_t_3 = ((__pyx_v_nfields > 0) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_1 = __pyx_v_fields_define->fields;
    __Pyx_INCREF(__pyx_t_1);
    if (unlikely(__pyx_t_1 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 1623, __pyx_L1_error)
    }
    __pyx_t_4 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 1623, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = ((__pyx_v_idx < __pyx_t_4) != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;
    if (!__pyx_t_2) break;

    /* "c_data_model_v2.pyx":1624
 *         cdef str key
 *         while nfields > 0 and idx < len(fields_define.fields):
 *             field = fields_define.fields[idx]             # <<<<<<<<<<<<<<
 *             idx += 1
 *             if field.is_container():
 */
    if (unlikely(__pyx_v_fields_define->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1624, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_fields_define->fields, __pyx_v_idx, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_15c_data_model_v2_Field))))) __PYX_ERR(0, 1624, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_field, ((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "c_data_model_v2.pyx":1625
 *         while nfields > 0 and idx < len(fields_define.fields):
 *             field = fields_define.fields[idx]
 *             idx += 1             # <<<<<<<<<<<<<<
 *             if field.is_container():
 *                 continue
 */
    __pyx_v_idx = (__pyx_v_idx + 1);

    /* "c_data_model_v2.pyx":1626
 *             field = fields_define.fields[idx]
 *             idx += 1
 *             if field.is_container():             # <<<<<<<<<<<<<<
 *                 continue
 *             value = getattr(self, field.key, None)
 */
    __pyx_t_2 = (__pyx_f_15c_data_model_v2_5Field_is_container(__pyx_v_field) != 0);
    if (__pyx_t_2) {

      /* "c_data_model_v2.pyx":1627
 *             idx += 1
 *             if field.is_container():
 *                 continue             # <<<<<<<<<<<<<<
 *             value = getattr(self, field.key, None)
 *             if value is not None:
 */
      goto __pyx_L3_continue;

      /* "c_data_model_v2.pyx":1626
 *             field = fields_define.fields[idx]
 *             idx += 1
 *             if field.is_container():             # <<<<<<<<<<<<<<
 *                 continue
 *             value = getattr(self, field.key, None)
 */
    }

    /* "c_data_model_v2.pyx":1628
 *             if field.is_container():
 *                 continue
 *             value = getattr(self, field.key, None)             # <<<<<<<<<<<<<<
 *             if value is not None:
 *                 key = field.name
 */
    __pyx_t_1 = __pyx_v_field->key;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_t_1, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1628, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "c_data_model_v2.pyx":1629
 *                 continue
 *             value = getattr(self, field.key, None)
 *             if value is not None:             # <<<<<<<<<<<<<<
 *                 key = field.name
 *                 info = '%s=%s' % (key, _value_short_repr(value))
 */
    __pyx_t_2 = (__pyx_v_value != Py_None);
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "c_data_model_v2.pyx":1630
 *             value = getattr(self, field.key, None)
 *             if value is not None:
 *                 key = field.name             # <<<<<<<<<<<<<<
 *                 info = '%s=%s' % (key, _value_short_repr(value))
 *                 array.append(info)
 */
      __pyx_t_5 = __pyx_v_field->name;
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_key, ((PyObject*)__pyx_t_5));
      __pyx_t_5 = 0;

      /* "c_data_model_v2.pyx":1631
 *             if value is not None:
 *                 key = field.name
 *                 info = '%s=%s' % (key, _value_short_repr(value))             # <<<<<<<<<<<<<<
 *                 array.append(info)
 *                 nfields -= 1
 */
      __pyx_t_5 = __pyx_f_15c_data_model_v2__value_short_repr(__pyx_v_value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1631, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1631, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_key);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1631, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_info, ((PyObject*)__pyx_t_5));
      __pyx_t_5 = 0;

      /* "c_data_model_v2.pyx":1632
 *                 key = field.name
 *                 info = '%s=%s' % (key, _value_short_repr(value))
 *                 array.append(info)             # <<<<<<<<<<<<<<
 *                 nfields -= 1
 *         cdef str obj_info = '%s(%s)' % (self.__class__.__name__, ','.join(array))
 */
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_array, __pyx_v_info); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1632, __pyx_L1_error)

      /* "c_data_model_v2.pyx":1633
 *                 info = '%s=%s' % (key, _value_short_repr(value))
 *                 array.append(info)
 *                 nfields -= 1             # <<<<<<<<<<<<<<
 *         cdef str obj_info = '%s(%s)' % (self.__class__.__name__, ','.join(array))
 *         return obj_info
 */
      __pyx_v_nfields = (__pyx_v_nfields - 1);

      /* "c_data_model_v2.pyx":1629
 *                 continue
 *             value = getattr(self, field.key, None)
 *             if value is not None:             # <<<<<<<<<<<<<<
 *                 key = field.name
 *                 info = '%s=%s' % (key, _value_short_repr(value))
 */
    }
    __pyx_L3_continue:;
  }

  /* "c_data_model_v2.pyx":1634
 *                 array.append(info)
 *                 nfields -= 1
 *         cdef str obj_info = '%s(%s)' % (self.__class__.__name__, ','.join(array))             # <<<<<<<<<<<<<<
 *         return obj_info
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyString_Join(__pyx_kp_s__53, __pyx_v_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_s_s_2, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_5))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 1634, __pyx_L1_error)
  __pyx_v_obj_info = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "c_data_model_v2.pyx":1635
 *                 nfields -= 1
 *         cdef str obj_info = '%s(%s)' % (self.__class__.__name__, ','.join(array))
 *         return obj_info             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj_info);
  __pyx_r = __pyx_v_obj_info;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1617
 * 
 * 
 *     cdef str _get_info_(self, int nfields):             # <<<<<<<<<<<<<<
 *         cdef list array = []
 *         cdef int idx = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("c_data_model_v2.DataModel._get_info_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_array);
  __Pyx_XDECREF((PyObject *)__pyx_v_fields_define);
  __Pyx_XDECREF((PyObject *)__pyx_v_field);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_info);
  __Pyx_XDECREF(__pyx_v_obj_info);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1638
 * 
 * 
 *     cdef bint _has_changed(self, bint recursive):             # <<<<<<<<<<<<<<
 *         if self.changed_set.has_any_dirty():
 *             return True
 */

static int __pyx_f_15c_data_model_v2_9DataModel__has_changed(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, int __pyx_v_recursive) {
  struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field = 0;
  PyObject *__pyx_v_self_dict = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_has_changed", 0);

  /* "c_data_model_v2.pyx":1639
 * 
 *     cdef bint _has_changed(self, bint recursive):
 *         if self.changed_set.has_any_dirty():             # <<<<<<<<<<<<<<
 *             return True
 *         cdef Field field
 */
  __pyx_t_1 = (__pyx_v_self->changed_set.has_any_dirty() != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":1640
 *     cdef bint _has_changed(self, bint recursive):
 *         if self.changed_set.has_any_dirty():
 *             return True             # <<<<<<<<<<<<<<
 *         cdef Field field
 *         cdef dict self_dict
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1639
 * 
 *     cdef bint _has_changed(self, bint recursive):
 *         if self.changed_set.has_any_dirty():             # <<<<<<<<<<<<<<
 *             return True
 *         cdef Field field
 */
  }

  /* "c_data_model_v2.pyx":1643
 *         cdef Field field
 *         cdef dict self_dict
 *         if recursive:             # <<<<<<<<<<<<<<
 *             self_dict = self.__dict__
 *             for field in self.protocol.fields_define.fields:
 */
  __pyx_t_1 = (__pyx_v_recursive != 0);
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":1644
 *         cdef dict self_dict
 *         if recursive:
 *             self_dict = self.__dict__             # <<<<<<<<<<<<<<
 *             for field in self.protocol.fields_define.fields:
 *                 if self._has_field_changed(field, self_dict, recursive):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1644, __pyx_L1_error)
    __pyx_v_self_dict = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "c_data_model_v2.pyx":1645
 *         if recursive:
 *             self_dict = self.__dict__
 *             for field in self.protocol.fields_define.fields:             # <<<<<<<<<<<<<<
 *                 if self._has_field_changed(field, self_dict, recursive):
 *                     return True
 */
    if (unlikely(__pyx_v_self->protocol->fields_define->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 1645, __pyx_L1_error)
    }
    __pyx_t_2 = __pyx_v_self->protocol->fields_define->fields; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    for (;;) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1645, __pyx_L1_error)
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1645, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_15c_data_model_v2_Field))))) __PYX_ERR(0, 1645, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_field, ((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "c_data_model_v2.pyx":1646
 *             self_dict = self.__dict__
 *             for field in self.protocol.fields_define.fields:
 *                 if self._has_field_changed(field, self_dict, recursive):             # <<<<<<<<<<<<<<
 *                     return True
 *         return False
 */
      __pyx_t_1 = (((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_self->__pyx_vtab)->_has_field_changed(__pyx_v_self, __pyx_v_field, __pyx_v_self_dict, __pyx_v_recursive) != 0);
      if (__pyx_t_1) {

        /* "c_data_model_v2.pyx":1647
 *             for field in self.protocol.fields_define.fields:
 *                 if self._has_field_changed(field, self_dict, recursive):
 *                     return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
        __pyx_r = 1;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        goto __pyx_L0;

        /* "c_data_model_v2.pyx":1646
 *             self_dict = self.__dict__
 *             for field in self.protocol.fields_define.fields:
 *                 if self._has_field_changed(field, self_dict, recursive):             # <<<<<<<<<<<<<<
 *                     return True
 *         return False
 */
      }

      /* "c_data_model_v2.pyx":1645
 *         if recursive:
 *             self_dict = self.__dict__
 *             for field in self.protocol.fields_define.fields:             # <<<<<<<<<<<<<<
 *                 if self._has_field_changed(field, self_dict, recursive):
 *                     return True
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "c_data_model_v2.pyx":1643
 *         cdef Field field
 *         cdef dict self_dict
 *         if recursive:             # <<<<<<<<<<<<<<
 *             self_dict = self.__dict__
 *             for field in self.protocol.fields_define.fields:
 */
  }

  /* "c_data_model_v2.pyx":1648
 *                 if self._has_field_changed(field, self_dict, recursive):
 *                     return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1638
 * 
 * 
 *     cdef bint _has_changed(self, bint recursive):             # <<<<<<<<<<<<<<
 *         if self.changed_set.has_any_dirty():
 *             return True
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("c_data_model_v2.DataModel._has_changed", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_field);
  __Pyx_XDECREF(__pyx_v_self_dict);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1651
 * 
 * 
 *     cpdef str _short_repr_(self):             # <<<<<<<<<<<<<<
 *         return self._get_info_(2)
 * 
 */

static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_11_short_repr_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_15c_data_model_v2_9DataModel__short_repr_(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_short_repr_", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_short_repr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_15c_data_model_v2_9DataModel_11_short_repr_)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1651, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1651, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1651, __pyx_L1_error)
      __pyx_r = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "c_data_model_v2.pyx":1652
 * 
 *     cpdef str _short_repr_(self):
 *         return self._get_info_(2)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_self->__pyx_vtab)->_get_info_(__pyx_v_self, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1651
 * 
 * 
 *     cpdef str _short_repr_(self):             # <<<<<<<<<<<<<<
 *         return self._get_info_(2)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("c_data_model_v2.DataModel._short_repr_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_11_short_repr_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_15c_data_model_v2_9DataModel_10_short_repr_[] = "DataModel._short_repr_(self) -> str";
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_11_short_repr_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_short_repr_ (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_9DataModel_10_short_repr_(((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_10_short_repr_(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_short_repr_", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_15c_data_model_v2_9DataModel__short_repr_(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.DataModel._short_repr_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1655
 * 
 * 
 *     cpdef str _long_repr_(self):             # <<<<<<<<<<<<<<
 *         return self._get_info_(4)
 * 
 */

static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_13_long_repr_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_15c_data_model_v2_9DataModel__long_repr_(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_long_repr_", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_long_repr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_15c_data_model_v2_9DataModel_13_long_repr_)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1655, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1655, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1655, __pyx_L1_error)
      __pyx_r = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "c_data_model_v2.pyx":1656
 * 
 *     cpdef str _long_repr_(self):
 *         return self._get_info_(4)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_self->__pyx_vtab)->_get_info_(__pyx_v_self, 4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1655
 * 
 * 
 *     cpdef str _long_repr_(self):             # <<<<<<<<<<<<<<
 *         return self._get_info_(4)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("c_data_model_v2.DataModel._long_repr_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_13_long_repr_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_15c_data_model_v2_9DataModel_12_long_repr_[] = "DataModel._long_repr_(self) -> str";
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_13_long_repr_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_long_repr_ (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_9DataModel_12_long_repr_(((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_12_long_repr_(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_long_repr_", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_15c_data_model_v2_9DataModel__long_repr_(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.DataModel._long_repr_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1661
 *     #----------------------------------------------------------------------
 * 
 *     def set_data(self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._set_data(kwargs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_15set_data(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15c_data_model_v2_9DataModel_14set_data[] = "DataModel.set_data(self, **kwargs)";
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_15set_data(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_data (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("set_data", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_data", 1))) return NULL;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_15c_data_model_v2_9DataModel_14set_data(((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_14set_data(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_data", 0);

  /* "c_data_model_v2.pyx":1662
 * 
 *     def set_data(self, **kwargs):
 *         self._set_data(kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_self->__pyx_vtab)->_set_data(__pyx_v_self, __pyx_v_kwargs);

  /* "c_data_model_v2.pyx":1661
 *     #----------------------------------------------------------------------
 * 
 *     def set_data(self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._set_data(kwargs)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1665
 * 
 * 
 *     def clear_data(self):             # <<<<<<<<<<<<<<
 *         cdef Field field
 *         cdef dict self_dict = self.__dict__
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_17clear_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_15c_data_model_v2_9DataModel_16clear_data[] = "DataModel.clear_data(self)";
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_17clear_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_data (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_9DataModel_16clear_data(((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_16clear_data(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self) {
  struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field = 0;
  PyObject *__pyx_v_self_dict = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("clear_data", 0);

  /* "c_data_model_v2.pyx":1667
 *     def clear_data(self):
 *         cdef Field field
 *         cdef dict self_dict = self.__dict__             # <<<<<<<<<<<<<<
 *         for field in self.protocol.fields_define.fields:
 *             if field.key in self_dict:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1667, __pyx_L1_error)
  __pyx_v_self_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1668
 *         cdef Field field
 *         cdef dict self_dict = self.__dict__
 *         for field in self.protocol.fields_define.fields:             # <<<<<<<<<<<<<<
 *             if field.key in self_dict:
 *                 del self_dict[field.key]
 */
  if (unlikely(__pyx_v_self->protocol->fields_define->fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1668, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->protocol->fields_define->fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1668, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_15c_data_model_v2_Field))))) __PYX_ERR(0, 1668, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_field, ((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "c_data_model_v2.pyx":1669
 *         cdef dict self_dict = self.__dict__
 *         for field in self.protocol.fields_define.fields:
 *             if field.key in self_dict:             # <<<<<<<<<<<<<<
 *                 del self_dict[field.key]
 * 
 */
    if (unlikely(__pyx_v_self_dict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 1669, __pyx_L1_error)
    }
    __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_v_field->key, __pyx_v_self_dict, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1669, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {

      /* "c_data_model_v2.pyx":1670
 *         for field in self.protocol.fields_define.fields:
 *             if field.key in self_dict:
 *                 del self_dict[field.key]             # <<<<<<<<<<<<<<
 * 
 * 
 */
      if (unlikely(__pyx_v_self_dict == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1670, __pyx_L1_error)
      }
      if (unlikely(PyDict_DelItem(__pyx_v_self_dict, __pyx_v_field->key) < 0)) __PYX_ERR(0, 1670, __pyx_L1_error)

      /* "c_data_model_v2.pyx":1669
 *         cdef dict self_dict = self.__dict__
 *         for field in self.protocol.fields_define.fields:
 *             if field.key in self_dict:             # <<<<<<<<<<<<<<
 *                 del self_dict[field.key]
 * 
 */
    }

    /* "c_data_model_v2.pyx":1668
 *         cdef Field field
 *         cdef dict self_dict = self.__dict__
 *         for field in self.protocol.fields_define.fields:             # <<<<<<<<<<<<<<
 *             if field.key in self_dict:
 *                 del self_dict[field.key]
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1665
 * 
 * 
 *     def clear_data(self):             # <<<<<<<<<<<<<<
 *         cdef Field field
 *         cdef dict self_dict = self.__dict__
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("c_data_model_v2.DataModel.clear_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_field);
  __Pyx_XDECREF(__pyx_v_self_dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1673
 * 
 * 
 *     def has_changed(self, field_name=None, recursive=False):             # <<<<<<<<<<<<<<
 *         cdef Field field
 *         if field_name is not None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_19has_changed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15c_data_model_v2_9DataModel_18has_changed[] = "DataModel.has_changed(self, field_name=None, recursive=False)";
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_19has_changed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_field_name = 0;
  PyObject *__pyx_v_recursive = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_changed (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_field_name,&__pyx_n_s_recursive,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_field_name);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_recursive);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "has_changed") < 0)) __PYX_ERR(0, 1673, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_field_name = values[0];
    __pyx_v_recursive = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("has_changed", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1673, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.DataModel.has_changed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_9DataModel_18has_changed(((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_v_self), __pyx_v_field_name, __pyx_v_recursive);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_18has_changed(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_field_name, PyObject *__pyx_v_recursive) {
  struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("has_changed", 0);

  /* "c_data_model_v2.pyx":1675
 *     def has_changed(self, field_name=None, recursive=False):
 *         cdef Field field
 *         if field_name is not None:             # <<<<<<<<<<<<<<
 *             field = self.protocol.fields_define.fields_by_name.get(field_name)
 *             if field is None:
 */
  __pyx_t_1 = (__pyx_v_field_name != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "c_data_model_v2.pyx":1676
 *         cdef Field field
 *         if field_name is not None:
 *             field = self.protocol.fields_define.fields_by_name.get(field_name)             # <<<<<<<<<<<<<<
 *             if field is None:
 *                 raise NoFieldError('no such field: %s' % field_name)
 */
    if (unlikely(__pyx_v_self->protocol->fields_define->fields_by_name == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
      __PYX_ERR(0, 1676, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->protocol->fields_define->fields_by_name, __pyx_v_field_name, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1676, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_15c_data_model_v2_Field))))) __PYX_ERR(0, 1676, __pyx_L1_error)
    __pyx_v_field = ((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "c_data_model_v2.pyx":1677
 *         if field_name is not None:
 *             field = self.protocol.fields_define.fields_by_name.get(field_name)
 *             if field is None:             # <<<<<<<<<<<<<<
 *                 raise NoFieldError('no such field: %s' % field_name)
 *             return self._has_field_changed(field, self.__dict__, recursive)
 */
    __pyx_t_2 = (((PyObject *)__pyx_v_field) == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "c_data_model_v2.pyx":1678
 *             field = self.protocol.fields_define.fields_by_name.get(field_name)
 *             if field is None:
 *                 raise NoFieldError('no such field: %s' % field_name)             # <<<<<<<<<<<<<<
 *             return self._has_field_changed(field, self.__dict__, recursive)
 *         else:
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_NoFieldError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1678, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_no_such_field_s, __pyx_v_field_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1678, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_6) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1678, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
          __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1678, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
          __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1678, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1678, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
          __pyx_t_5 = 0;
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1678, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 1678, __pyx_L1_error)

      /* "c_data_model_v2.pyx":1677
 *         if field_name is not None:
 *             field = self.protocol.fields_define.fields_by_name.get(field_name)
 *             if field is None:             # <<<<<<<<<<<<<<
 *                 raise NoFieldError('no such field: %s' % field_name)
 *             return self._has_field_changed(field, self.__dict__, recursive)
 */
    }

    /* "c_data_model_v2.pyx":1679
 *             if field is None:
 *                 raise NoFieldError('no such field: %s' % field_name)
 *             return self._has_field_changed(field, self.__dict__, recursive)             # <<<<<<<<<<<<<<
 *         else:
 *             return self._has_changed(recursive)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyDict_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 1679, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_recursive); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1679, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_self->__pyx_vtab)->_has_field_changed(__pyx_v_self, __pyx_v_field, ((PyObject*)__pyx_t_3), __pyx_t_1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1675
 *     def has_changed(self, field_name=None, recursive=False):
 *         cdef Field field
 *         if field_name is not None:             # <<<<<<<<<<<<<<
 *             field = self.protocol.fields_define.fields_by_name.get(field_name)
 *             if field is None:
 */
  }

  /* "c_data_model_v2.pyx":1681
 *             return self._has_field_changed(field, self.__dict__, recursive)
 *         else:
 *             return self._has_changed(recursive)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_recursive); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1681, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_self->__pyx_vtab)->_has_changed(__pyx_v_self, __pyx_t_1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "c_data_model_v2.pyx":1673
 * 
 * 
 *     def has_changed(self, field_name=None, recursive=False):             # <<<<<<<<<<<<<<
 *         cdef Field field
 *         if field_name is not None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("c_data_model_v2.DataModel.has_changed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_field);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1684
 * 
 * 
 *     def pack(self, fmt, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         if fmt == 'dict':
 *             return self.pack_to_dict(*args, **kwargs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_21pack(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15c_data_model_v2_9DataModel_20pack[] = "DataModel.pack(self, fmt, *args, **kwargs)";
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_21pack(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fmt = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pack (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fmt,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fmt)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "pack") < 0)) __PYX_ERR(0, 1684, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_fmt = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pack", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1684, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("c_data_model_v2.DataModel.pack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_9DataModel_20pack(((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_v_self), __pyx_v_fmt, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_20pack(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_fmt, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("pack", 0);

  /* "c_data_model_v2.pyx":1685
 * 
 *     def pack(self, fmt, *args, **kwargs):
 *         if fmt == 'dict':             # <<<<<<<<<<<<<<
 *             return self.pack_to_dict(*args, **kwargs)
 *         else:
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_fmt, __pyx_n_s_dict_2, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1685, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":1686
 *     def pack(self, fmt, *args, **kwargs):
 *         if fmt == 'dict':
 *             return self.pack_to_dict(*args, **kwargs)             # <<<<<<<<<<<<<<
 *         else:
 *             raise PackError('unsupported format: {}'.format(fmt))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_pack_to_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1685
 * 
 *     def pack(self, fmt, *args, **kwargs):
 *         if fmt == 'dict':             # <<<<<<<<<<<<<<
 *             return self.pack_to_dict(*args, **kwargs)
 *         else:
 */
  }

  /* "c_data_model_v2.pyx":1688
 *             return self.pack_to_dict(*args, **kwargs)
 *         else:
 *             raise PackError('unsupported format: {}'.format(fmt))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PackError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_unsupported_format, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_fmt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1688, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_fmt};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1688, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_fmt};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1688, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1688, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_v_fmt);
        __Pyx_GIVEREF(__pyx_v_fmt);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_fmt);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1688, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1688, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1688, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1688, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1688, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1688, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1688, __pyx_L1_error)
  }

  /* "c_data_model_v2.pyx":1684
 * 
 * 
 *     def pack(self, fmt, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         if fmt == 'dict':
 *             return self.pack_to_dict(*args, **kwargs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("c_data_model_v2.DataModel.pack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1691
 * 
 * 
 *     def unpack(self, fmt, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         if fmt == 'dict':
 *             return self.unpack_from_dict(*args, **kwargs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_23unpack(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15c_data_model_v2_9DataModel_22unpack[] = "DataModel.unpack(self, fmt, *args, **kwargs)";
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_23unpack(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fmt = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unpack (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fmt,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fmt)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "unpack") < 0)) __PYX_ERR(0, 1691, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_fmt = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("unpack", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1691, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("c_data_model_v2.DataModel.unpack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_9DataModel_22unpack(((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_v_self), __pyx_v_fmt, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_22unpack(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_fmt, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("unpack", 0);

  /* "c_data_model_v2.pyx":1692
 * 
 *     def unpack(self, fmt, *args, **kwargs):
 *         if fmt == 'dict':             # <<<<<<<<<<<<<<
 *             return self.unpack_from_dict(*args, **kwargs)
 *         else:
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_fmt, __pyx_n_s_dict_2, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1692, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "c_data_model_v2.pyx":1693
 *     def unpack(self, fmt, *args, **kwargs):
 *         if fmt == 'dict':
 *             return self.unpack_from_dict(*args, **kwargs)             # <<<<<<<<<<<<<<
 *         else:
 *             raise PackError('unsupported format: {}'.format(fmt))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_unpack_from_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "c_data_model_v2.pyx":1692
 * 
 *     def unpack(self, fmt, *args, **kwargs):
 *         if fmt == 'dict':             # <<<<<<<<<<<<<<
 *             return self.unpack_from_dict(*args, **kwargs)
 *         else:
 */
  }

  /* "c_data_model_v2.pyx":1695
 *             return self.unpack_from_dict(*args, **kwargs)
 *         else:
 *             raise PackError('unsupported format: {}'.format(fmt))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PackError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_unsupported_format, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_fmt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1695, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_fmt};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1695, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_fmt};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1695, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1695, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_v_fmt);
        __Pyx_GIVEREF(__pyx_v_fmt);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_fmt);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1695, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1695, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1695, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1695, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1695, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1695, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1695, __pyx_L1_error)
  }

  /* "c_data_model_v2.pyx":1691
 * 
 * 
 *     def unpack(self, fmt, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         if fmt == 'dict':
 *             return self.unpack_from_dict(*args, **kwargs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("c_data_model_v2.DataModel.unpack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1698
 * 
 * 
 *     def pack_to_dict(self, recursive=True,             # <<<<<<<<<<<<<<
 *                      only_changed=False, clear_changed=False, field_filter=None):
 *         cdef dict dict_data = {}
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_25pack_to_dict(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15c_data_model_v2_9DataModel_24pack_to_dict[] = "DataModel.pack_to_dict(self, recursive=True, only_changed=False, clear_changed=False, field_filter=None)";
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_25pack_to_dict(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_recursive = 0;
  PyObject *__pyx_v_only_changed = 0;
  PyObject *__pyx_v_clear_changed = 0;
  PyObject *__pyx_v_field_filter = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pack_to_dict (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_recursive,&__pyx_n_s_only_changed,&__pyx_n_s_clear_changed,&__pyx_n_s_field_filter,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)Py_True);

    /* "c_data_model_v2.pyx":1699
 * 
 *     def pack_to_dict(self, recursive=True,
 *                      only_changed=False, clear_changed=False, field_filter=None):             # <<<<<<<<<<<<<<
 *         cdef dict dict_data = {}
 *         cdef FieldFilter ff
 */
    values[1] = ((PyObject *)Py_False);
    values[2] = ((PyObject *)Py_False);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_recursive);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_only_changed);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_clear_changed);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_field_filter);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pack_to_dict") < 0)) __PYX_ERR(0, 1698, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_recursive = values[0];
    __pyx_v_only_changed = values[1];
    __pyx_v_clear_changed = values[2];
    __pyx_v_field_filter = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pack_to_dict", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1698, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.DataModel.pack_to_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15c_data_model_v2_9DataModel_24pack_to_dict(((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_v_self), __pyx_v_recursive, __pyx_v_only_changed, __pyx_v_clear_changed, __pyx_v_field_filter);

  /* "c_data_model_v2.pyx":1698
 * 
 * 
 *     def pack_to_dict(self, recursive=True,             # <<<<<<<<<<<<<<
 *                      only_changed=False, clear_changed=False, field_filter=None):
 *         cdef dict dict_data = {}
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_24pack_to_dict(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_recursive, PyObject *__pyx_v_only_changed, PyObject *__pyx_v_clear_changed, PyObject *__pyx_v_field_filter) {
  PyObject *__pyx_v_dict_data = 0;
  struct __pyx_obj_15c_data_model_v2_FieldFilter *__pyx_v_ff = 0;
  struct __pyx_obj_15c_data_model_v2_DataModelProtocol *__pyx_v_protocol = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("pack_to_dict", 0);

  /* "c_data_model_v2.pyx":1700
 *     def pack_to_dict(self, recursive=True,
 *                      only_changed=False, clear_changed=False, field_filter=None):
 *         cdef dict dict_data = {}             # <<<<<<<<<<<<<<
 *         cdef FieldFilter ff
 *         cdef DataModelProtocol protocol = self._get_protocol()
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dict_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1702
 *         cdef dict dict_data = {}
 *         cdef FieldFilter ff
 *         cdef DataModelProtocol protocol = self._get_protocol()             # <<<<<<<<<<<<<<
 *         if not isinstance(field_filter, FieldFilter):
 *             ff = FieldFilter(field_filter)
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_self->__pyx_vtab)->_get_protocol(__pyx_v_self, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_protocol = ((struct __pyx_obj_15c_data_model_v2_DataModelProtocol *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1703
 *         cdef FieldFilter ff
 *         cdef DataModelProtocol protocol = self._get_protocol()
 *         if not isinstance(field_filter, FieldFilter):             # <<<<<<<<<<<<<<
 *             ff = FieldFilter(field_filter)
 *         else:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_field_filter, __pyx_ptype_15c_data_model_v2_FieldFilter); 
  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":1704
 *         cdef DataModelProtocol protocol = self._get_protocol()
 *         if not isinstance(field_filter, FieldFilter):
 *             ff = FieldFilter(field_filter)             # <<<<<<<<<<<<<<
 *         else:
 *             ff = field_filter
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1704, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_field_filter);
    __Pyx_GIVEREF(__pyx_v_field_filter);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_field_filter);
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_15c_data_model_v2_FieldFilter), __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1704, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_ff = ((struct __pyx_obj_15c_data_model_v2_FieldFilter *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "c_data_model_v2.pyx":1703
 *         cdef FieldFilter ff
 *         cdef DataModelProtocol protocol = self._get_protocol()
 *         if not isinstance(field_filter, FieldFilter):             # <<<<<<<<<<<<<<
 *             ff = FieldFilter(field_filter)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "c_data_model_v2.pyx":1706
 *             ff = FieldFilter(field_filter)
 *         else:
 *             ff = field_filter             # <<<<<<<<<<<<<<
 *         _encode_to_dict(dict_data, protocol, self,
 *                         recursive=recursive,
 */
  /*else*/ {
    if (!(likely(((__pyx_v_field_filter) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_field_filter, __pyx_ptype_15c_data_model_v2_FieldFilter))))) __PYX_ERR(0, 1706, __pyx_L1_error)
    __pyx_t_4 = __pyx_v_field_filter;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_v_ff = ((struct __pyx_obj_15c_data_model_v2_FieldFilter *)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "c_data_model_v2.pyx":1708
 *             ff = field_filter
 *         _encode_to_dict(dict_data, protocol, self,
 *                         recursive=recursive,             # <<<<<<<<<<<<<<
 *                         only_changed=only_changed,
 *                         clear_changed=clear_changed,
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_recursive); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1708, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1709
 *         _encode_to_dict(dict_data, protocol, self,
 *                         recursive=recursive,
 *                         only_changed=only_changed,             # <<<<<<<<<<<<<<
 *                         clear_changed=clear_changed,
 *                         field_filter=ff)
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_only_changed); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1709, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1710
 *                         recursive=recursive,
 *                         only_changed=only_changed,
 *                         clear_changed=clear_changed,             # <<<<<<<<<<<<<<
 *                         field_filter=ff)
 *         return dict_data
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_clear_changed); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1710, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1707
 *         else:
 *             ff = field_filter
 *         _encode_to_dict(dict_data, protocol, self,             # <<<<<<<<<<<<<<
 *                         recursive=recursive,
 *                         only_changed=only_changed,
 */
  __pyx_f_15c_data_model_v2__encode_to_dict(__pyx_v_dict_data, __pyx_v_protocol, ((PyObject *)__pyx_v_self), __pyx_t_3, __pyx_t_2, __pyx_t_5, __pyx_v_ff);

  /* "c_data_model_v2.pyx":1712
 *                         clear_changed=clear_changed,
 *                         field_filter=ff)
 *         return dict_data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_dict_data);
  __pyx_r = __pyx_v_dict_data;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1698
 * 
 * 
 *     def pack_to_dict(self, recursive=True,             # <<<<<<<<<<<<<<
 *                      only_changed=False, clear_changed=False, field_filter=None):
 *         cdef dict dict_data = {}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("c_data_model_v2.DataModel.pack_to_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dict_data);
  __Pyx_XDECREF((PyObject *)__pyx_v_ff);
  __Pyx_XDECREF((PyObject *)__pyx_v_protocol);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1715
 * 
 * 
 *     def unpack_from_dict(self, dict src_dict_data, str mode=None, object resolve_ref=None, bint mark_change=False):             # <<<<<<<<<<<<<<
 *         cdef DecodeContext context = DecodeContext(mode=mode, resolve_ref=resolve_ref, mark_change=mark_change)
 *         cdef DataModelProtocol protocol = self._get_protocol()
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_27unpack_from_dict(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15c_data_model_v2_9DataModel_26unpack_from_dict[] = "DataModel.unpack_from_dict(self, dict src_dict_data, str mode=None, resolve_ref=None, bool mark_change=False)";
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_27unpack_from_dict(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_src_dict_data = 0;
  PyObject *__pyx_v_mode = 0;
  PyObject *__pyx_v_resolve_ref = 0;
  int __pyx_v_mark_change;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unpack_from_dict (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_src_dict_data,&__pyx_n_s_mode,&__pyx_n_s_resolve_ref,&__pyx_n_s_mark_change,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject*)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_src_dict_data)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_resolve_ref);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mark_change);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "unpack_from_dict") < 0)) __PYX_ERR(0, 1715, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_src_dict_data = ((PyObject*)values[0]);
    __pyx_v_mode = ((PyObject*)values[1]);
    __pyx_v_resolve_ref = values[2];
    if (values[3]) {
      __pyx_v_mark_change = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_mark_change == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1715, __pyx_L3_error)
    } else {
      __pyx_v_mark_change = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("unpack_from_dict", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1715, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_data_model_v2.DataModel.unpack_from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_src_dict_data), (&PyDict_Type), 1, "src_dict_data", 1))) __PYX_ERR(0, 1715, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mode), (&PyString_Type), 1, "mode", 1))) __PYX_ERR(0, 1715, __pyx_L1_error)
  __pyx_r = __pyx_pf_15c_data_model_v2_9DataModel_26unpack_from_dict(((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_v_self), __pyx_v_src_dict_data, __pyx_v_mode, __pyx_v_resolve_ref, __pyx_v_mark_change);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_26unpack_from_dict(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_src_dict_data, PyObject *__pyx_v_mode, PyObject *__pyx_v_resolve_ref, int __pyx_v_mark_change) {
  struct __pyx_obj_15c_data_model_v2_DecodeContext *__pyx_v_context = 0;
  struct __pyx_obj_15c_data_model_v2_DataModelProtocol *__pyx_v_protocol = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("unpack_from_dict", 0);

  /* "c_data_model_v2.pyx":1716
 * 
 *     def unpack_from_dict(self, dict src_dict_data, str mode=None, object resolve_ref=None, bint mark_change=False):
 *         cdef DecodeContext context = DecodeContext(mode=mode, resolve_ref=resolve_ref, mark_change=mark_change)             # <<<<<<<<<<<<<<
 *         cdef DataModelProtocol protocol = self._get_protocol()
 *         _decode_from_dict(protocol, self, self.__dict__, src_dict_data, context)
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_mode, __pyx_v_mode) < 0) __PYX_ERR(0, 1716, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_resolve_ref, __pyx_v_resolve_ref) < 0) __PYX_ERR(0, 1716, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_mark_change); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_mark_change, __pyx_t_2) < 0) __PYX_ERR(0, 1716, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_15c_data_model_v2_DecodeContext), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_context = ((struct __pyx_obj_15c_data_model_v2_DecodeContext *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":1717
 *     def unpack_from_dict(self, dict src_dict_data, str mode=None, object resolve_ref=None, bint mark_change=False):
 *         cdef DecodeContext context = DecodeContext(mode=mode, resolve_ref=resolve_ref, mark_change=mark_change)
 *         cdef DataModelProtocol protocol = self._get_protocol()             # <<<<<<<<<<<<<<
 *         _decode_from_dict(protocol, self, self.__dict__, src_dict_data, context)
 *         context.resolve_ref()
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_self->__pyx_vtab)->_get_protocol(__pyx_v_self, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_protocol = ((struct __pyx_obj_15c_data_model_v2_DataModelProtocol *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":1718
 *         cdef DecodeContext context = DecodeContext(mode=mode, resolve_ref=resolve_ref, mark_change=mark_change)
 *         cdef DataModelProtocol protocol = self._get_protocol()
 *         _decode_from_dict(protocol, self, self.__dict__, src_dict_data, context)             # <<<<<<<<<<<<<<
 *         context.resolve_ref()
 *         return context.unsolved_ref
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1718, __pyx_L1_error)
  __pyx_f_15c_data_model_v2__decode_from_dict(__pyx_v_protocol, ((PyObject *)__pyx_v_self), ((PyObject*)__pyx_t_2), __pyx_v_src_dict_data, __pyx_v_context);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":1719
 *         cdef DataModelProtocol protocol = self._get_protocol()
 *         _decode_from_dict(protocol, self, self.__dict__, src_dict_data, context)
 *         context.resolve_ref()             # <<<<<<<<<<<<<<
 *         return context.unsolved_ref
 * 
 */
  ((struct __pyx_vtabstruct_15c_data_model_v2_DecodeContext *)__pyx_v_context->__pyx_vtab)->resolve_ref(__pyx_v_context);

  /* "c_data_model_v2.pyx":1720
 *         _decode_from_dict(protocol, self, self.__dict__, src_dict_data, context)
 *         context.resolve_ref()
 *         return context.unsolved_ref             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_context->unsolved_ref);
  __pyx_r = __pyx_v_context->unsolved_ref;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1715
 * 
 * 
 *     def unpack_from_dict(self, dict src_dict_data, str mode=None, object resolve_ref=None, bint mark_change=False):             # <<<<<<<<<<<<<<
 *         cdef DecodeContext context = DecodeContext(mode=mode, resolve_ref=resolve_ref, mark_change=mark_change)
 *         cdef DataModelProtocol protocol = self._get_protocol()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("c_data_model_v2.DataModel.unpack_from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_context);
  __Pyx_XDECREF((PyObject *)__pyx_v_protocol);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1723
 * 
 * 
 *     def clear_changed(self, *field_names, **options):             # <<<<<<<<<<<<<<
 *         cdef bint recursive
 *         _recursive = options.get('recursive')
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_29clear_changed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15c_data_model_v2_9DataModel_28clear_changed[] = "DataModel.clear_changed(self, *field_names, **options)";
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_29clear_changed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_field_names = 0;
  PyObject *__pyx_v_options = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_changed (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "clear_changed", 1))) return NULL;
  __pyx_v_options = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_options)) return NULL;
  __Pyx_GOTREF(__pyx_v_options);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_field_names = __pyx_args;
  __pyx_r = __pyx_pf_15c_data_model_v2_9DataModel_28clear_changed(((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_v_self), __pyx_v_field_names, __pyx_v_options);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_field_names);
  __Pyx_XDECREF(__pyx_v_options);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_28clear_changed(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_field_names, PyObject *__pyx_v_options) {
  int __pyx_v_recursive;
  PyObject *__pyx_v__recursive = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("clear_changed", 0);

  /* "c_data_model_v2.pyx":1725
 *     def clear_changed(self, *field_names, **options):
 *         cdef bint recursive
 *         _recursive = options.get('recursive')             # <<<<<<<<<<<<<<
 *         if _recursive is None:
 *             recursive = True
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_options, __pyx_n_s_recursive, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__recursive = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1726
 *         cdef bint recursive
 *         _recursive = options.get('recursive')
 *         if _recursive is None:             # <<<<<<<<<<<<<<
 *             recursive = True
 *         elif _recursive:
 */
  __pyx_t_2 = (__pyx_v__recursive == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":1727
 *         _recursive = options.get('recursive')
 *         if _recursive is None:
 *             recursive = True             # <<<<<<<<<<<<<<
 *         elif _recursive:
 *             recursive = True
 */
    __pyx_v_recursive = 1;

    /* "c_data_model_v2.pyx":1726
 *         cdef bint recursive
 *         _recursive = options.get('recursive')
 *         if _recursive is None:             # <<<<<<<<<<<<<<
 *             recursive = True
 *         elif _recursive:
 */
    goto __pyx_L3;
  }

  /* "c_data_model_v2.pyx":1728
 *         if _recursive is None:
 *             recursive = True
 *         elif _recursive:             # <<<<<<<<<<<<<<
 *             recursive = True
 *         else:
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v__recursive); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1728, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "c_data_model_v2.pyx":1729
 *             recursive = True
 *         elif _recursive:
 *             recursive = True             # <<<<<<<<<<<<<<
 *         else:
 *             recursive = False
 */
    __pyx_v_recursive = 1;

    /* "c_data_model_v2.pyx":1728
 *         if _recursive is None:
 *             recursive = True
 *         elif _recursive:             # <<<<<<<<<<<<<<
 *             recursive = True
 *         else:
 */
    goto __pyx_L3;
  }

  /* "c_data_model_v2.pyx":1731
 *             recursive = True
 *         else:
 *             recursive = False             # <<<<<<<<<<<<<<
 *         return self._clear_changed(field_names, recursive)
 * 
 */
  /*else*/ {
    __pyx_v_recursive = 0;
  }
  __pyx_L3:;

  /* "c_data_model_v2.pyx":1732
 *         else:
 *             recursive = False
 *         return self._clear_changed(field_names, recursive)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_self->__pyx_vtab)->_clear_changed(__pyx_v_self, __pyx_v_field_names, __pyx_v_recursive)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1723
 * 
 * 
 *     def clear_changed(self, *field_names, **options):             # <<<<<<<<<<<<<<
 *         cdef bint recursive
 *         _recursive = options.get('recursive')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.DataModel.clear_changed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__recursive);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1735
 * 
 * 
 *     def set_changed(self, *field_names):             # <<<<<<<<<<<<<<
 *         self._set_changed(field_names)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_31set_changed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15c_data_model_v2_9DataModel_30set_changed[] = "DataModel.set_changed(self, *field_names)";
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_31set_changed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_field_names = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_changed (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_changed", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_field_names = __pyx_args;
  __pyx_r = __pyx_pf_15c_data_model_v2_9DataModel_30set_changed(((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_v_self), __pyx_v_field_names);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_field_names);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_30set_changed(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self, PyObject *__pyx_v_field_names) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_changed", 0);

  /* "c_data_model_v2.pyx":1736
 * 
 *     def set_changed(self, *field_names):
 *         self._set_changed(field_names)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_self->__pyx_vtab)->_set_changed(__pyx_v_self, __pyx_v_field_names);

  /* "c_data_model_v2.pyx":1735
 * 
 * 
 *     def set_changed(self, *field_names):             # <<<<<<<<<<<<<<
 *         self._set_changed(field_names)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1739
 * 
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self._long_repr_()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_33__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_33__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_9DataModel_32__str__(((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_32__str__(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "c_data_model_v2.pyx":1740
 * 
 *     def __str__(self):
 *         return self._long_repr_()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_self->__pyx_vtab)->_long_repr_(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1739
 * 
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self._long_repr_()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.DataModel.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1743
 * 
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self._long_repr_()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_35__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15c_data_model_v2_9DataModel_35__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15c_data_model_v2_9DataModel_34__repr__(((struct __pyx_obj_15c_data_model_v2_DataModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_9DataModel_34__repr__(struct __pyx_obj_15c_data_model_v2_DataModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "c_data_model_v2.pyx":1744
 * 
 *     def __repr__(self):
 *         return self._long_repr_()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_15c_data_model_v2_DataModel *)__pyx_v_self->__pyx_vtab)->_long_repr_(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1743
 * 
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self._long_repr_()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.DataModel.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1748
 * 
 * 
 * def ArrayField(*arg, **kwarg):             # <<<<<<<<<<<<<<
 *     kwarg['array'] = True
 *     return Field(*arg, **kwarg)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_1ArrayField(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15c_data_model_v2_ArrayField[] = "ArrayField(*arg, **kwarg)";
static PyMethodDef __pyx_mdef_15c_data_model_v2_1ArrayField = {"ArrayField", (PyCFunction)__pyx_pw_15c_data_model_v2_1ArrayField, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15c_data_model_v2_ArrayField};
static PyObject *__pyx_pw_15c_data_model_v2_1ArrayField(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_kwarg = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ArrayField (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "ArrayField", 1))) return NULL;
  __pyx_v_kwarg = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwarg)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwarg);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_arg = __pyx_args;
  __pyx_r = __pyx_pf_15c_data_model_v2_ArrayField(__pyx_self, __pyx_v_arg, __pyx_v_kwarg);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XDECREF(__pyx_v_kwarg);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_ArrayField(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwarg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("ArrayField", 0);

  /* "c_data_model_v2.pyx":1749
 * 
 * def ArrayField(*arg, **kwarg):
 *     kwarg['array'] = True             # <<<<<<<<<<<<<<
 *     return Field(*arg, **kwarg)
 * 
 */
  if (unlikely(PyDict_SetItem(__pyx_v_kwarg, __pyx_n_s_array, Py_True) < 0)) __PYX_ERR(0, 1749, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1750
 * def ArrayField(*arg, **kwarg):
 *     kwarg['array'] = True
 *     return Field(*arg, **kwarg)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_15c_data_model_v2_Field), __pyx_v_arg, __pyx_v_kwarg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1748
 * 
 * 
 * def ArrayField(*arg, **kwarg):             # <<<<<<<<<<<<<<
 *     kwarg['array'] = True
 *     return Field(*arg, **kwarg)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.ArrayField", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1753
 * 
 * 
 * def MapField(*arg, **kwarg):             # <<<<<<<<<<<<<<
 *     kwarg['map'] = True
 *     return Field(*arg, **kwarg)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_3MapField(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15c_data_model_v2_2MapField[] = "MapField(*arg, **kwarg)";
static PyMethodDef __pyx_mdef_15c_data_model_v2_3MapField = {"MapField", (PyCFunction)__pyx_pw_15c_data_model_v2_3MapField, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15c_data_model_v2_2MapField};
static PyObject *__pyx_pw_15c_data_model_v2_3MapField(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_kwarg = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("MapField (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "MapField", 1))) return NULL;
  __pyx_v_kwarg = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwarg)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwarg);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_arg = __pyx_args;
  __pyx_r = __pyx_pf_15c_data_model_v2_2MapField(__pyx_self, __pyx_v_arg, __pyx_v_kwarg);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XDECREF(__pyx_v_kwarg);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_2MapField(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwarg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("MapField", 0);

  /* "c_data_model_v2.pyx":1754
 * 
 * def MapField(*arg, **kwarg):
 *     kwarg['map'] = True             # <<<<<<<<<<<<<<
 *     return Field(*arg, **kwarg)
 * 
 */
  if (unlikely(PyDict_SetItem(__pyx_v_kwarg, __pyx_n_s_map, Py_True) < 0)) __PYX_ERR(0, 1754, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1755
 * def MapField(*arg, **kwarg):
 *     kwarg['map'] = True
 *     return Field(*arg, **kwarg)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_15c_data_model_v2_Field), __pyx_v_arg, __pyx_v_kwarg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1753
 * 
 * 
 * def MapField(*arg, **kwarg):             # <<<<<<<<<<<<<<
 *     kwarg['map'] = True
 *     return Field(*arg, **kwarg)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.MapField", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_data_model_v2.pyx":1758
 * 
 * 
 * def IdMapField(*arg, **kwarg):             # <<<<<<<<<<<<<<
 *     kwarg['id_map'] = True
 *     return Field(*arg, **kwarg)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15c_data_model_v2_5IdMapField(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15c_data_model_v2_4IdMapField[] = "IdMapField(*arg, **kwarg)";
static PyMethodDef __pyx_mdef_15c_data_model_v2_5IdMapField = {"IdMapField", (PyCFunction)__pyx_pw_15c_data_model_v2_5IdMapField, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15c_data_model_v2_4IdMapField};
static PyObject *__pyx_pw_15c_data_model_v2_5IdMapField(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_kwarg = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("IdMapField (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "IdMapField", 1))) return NULL;
  __pyx_v_kwarg = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwarg)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwarg);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_arg = __pyx_args;
  __pyx_r = __pyx_pf_15c_data_model_v2_4IdMapField(__pyx_self, __pyx_v_arg, __pyx_v_kwarg);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XDECREF(__pyx_v_kwarg);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15c_data_model_v2_4IdMapField(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwarg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("IdMapField", 0);

  /* "c_data_model_v2.pyx":1759
 * 
 * def IdMapField(*arg, **kwarg):
 *     kwarg['id_map'] = True             # <<<<<<<<<<<<<<
 *     return Field(*arg, **kwarg)
 * 
 */
  if (unlikely(PyDict_SetItem(__pyx_v_kwarg, __pyx_n_s_id_map, Py_True) < 0)) __PYX_ERR(0, 1759, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1760
 * def IdMapField(*arg, **kwarg):
 *     kwarg['id_map'] = True
 *     return Field(*arg, **kwarg)             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_15c_data_model_v2_Field), __pyx_v_arg, __pyx_v_kwarg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c_data_model_v2.pyx":1758
 * 
 * 
 * def IdMapField(*arg, **kwarg):             # <<<<<<<<<<<<<<
 *     kwarg['id_map'] = True
 *     return Field(*arg, **kwarg)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("c_data_model_v2.IdMapField", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cfunc.to_py":65
 * @cname("__Pyx_CFunc_bint____Field___to_py")
 * cdef object __Pyx_CFunc_bint____Field___to_py(bint (*f)(Field) except *):
 *     def wrap(Field field):             # <<<<<<<<<<<<<<
 *         """wrap(field: 'Field') -> bool"""
 *         return f(field)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cfunc_dot_to_py_33__Pyx_CFunc_bint____Field___to_py_1wrap(PyObject *__pyx_self, PyObject *__pyx_v_field); /*proto*/
static char __pyx_doc_11cfunc_dot_to_py_33__Pyx_CFunc_bint____Field___to_py_wrap[] = "wrap(field: 'Field') -> bool";
static PyMethodDef __pyx_mdef_11cfunc_dot_to_py_33__Pyx_CFunc_bint____Field___to_py_1wrap = {"wrap", (PyCFunction)__pyx_pw_11cfunc_dot_to_py_33__Pyx_CFunc_bint____Field___to_py_1wrap, METH_O, __pyx_doc_11cfunc_dot_to_py_33__Pyx_CFunc_bint____Field___to_py_wrap};
static PyObject *__pyx_pw_11cfunc_dot_to_py_33__Pyx_CFunc_bint____Field___to_py_1wrap(PyObject *__pyx_self, PyObject *__pyx_v_field) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("wrap (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_field), __pyx_ptype_15c_data_model_v2_Field, 1, "field", 0))) __PYX_ERR(1, 65, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cfunc_dot_to_py_33__Pyx_CFunc_bint____Field___to_py_wrap(__pyx_self, ((struct __pyx_obj_15c_data_model_v2_Field *)__pyx_v_field));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cfunc_dot_to_py_33__Pyx_CFunc_bint____Field___to_py_wrap(PyObject *__pyx_self, struct __pyx_obj_15c_data_model_v2_Field *__pyx_v_field) {
  struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py *__pyx_cur_scope;
  struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("wrap", 0);
  __pyx_outer_scope = (struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "cfunc.to_py":67
 *     def wrap(Field field):
 *         """wrap(field: 'Field') -> bool"""
 *         return f(field)             # <<<<<<<<<<<<<<
 *     return wrap
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_f(__pyx_v_field); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 67, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cfunc.to_py":65
 * @cname("__Pyx_CFunc_bint____Field___to_py")
 * cdef object __Pyx_CFunc_bint____Field___to_py(bint (*f)(Field) except *):
 *     def wrap(Field field):             # <<<<<<<<<<<<<<
 *         """wrap(field: 'Field') -> bool"""
 *         return f(field)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cfunc.to_py.__Pyx_CFunc_bint____Field___to_py.wrap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cfunc.to_py":64
 * 
 * @cname("__Pyx_CFunc_bint____Field___to_py")
 * cdef object __Pyx_CFunc_bint____Field___to_py(bint (*f)(Field) except *):             # <<<<<<<<<<<<<<
 *     def wrap(Field field):
 *         """wrap(field: 'Field') -> bool"""
 */

static PyObject *__Pyx_CFunc_bint____Field___to_py(int (*__pyx_v_f)(struct __pyx_obj_15c_data_model_v2_Field *)) {
  struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py *__pyx_cur_scope;
  PyObject *__pyx_v_wrap = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_CFunc_bint____Field___to_py", 0);
  __pyx_cur_scope = (struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py *)__pyx_tp_new___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py(__pyx_ptype___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 64, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_f = __pyx_v_f;

  /* "cfunc.to_py":65
 * @cname("__Pyx_CFunc_bint____Field___to_py")
 * cdef object __Pyx_CFunc_bint____Field___to_py(bint (*f)(Field) except *):
 *     def wrap(Field field):             # <<<<<<<<<<<<<<
 *         """wrap(field: 'Field') -> bool"""
 *         return f(field)
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11cfunc_dot_to_py_33__Pyx_CFunc_bint____Field___to_py_1wrap, 0, __pyx_n_s_Pyx_CFunc_bint____Field___to_p, ((PyObject*)__pyx_cur_scope), __pyx_n_s_cfunc_to_py, __pyx_d, ((PyObject *)__pyx_codeobj__55)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_wrap = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cfunc.to_py":68
 *         """wrap(field: 'Field') -> bool"""
 *         return f(field)
 *     return wrap             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_wrap);
  __pyx_r = __pyx_v_wrap;
  goto __pyx_L0;

  /* "cfunc.to_py":64
 * 
 * @cname("__Pyx_CFunc_bint____Field___to_py")
 * cdef object __Pyx_CFunc_bint____Field___to_py(bint (*f)(Field) except *):             # <<<<<<<<<<<<<<
 *     def wrap(Field field):
 *         """wrap(field: 'Field') -> bool"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cfunc.to_py.__Pyx_CFunc_bint____Field___to_py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_wrap);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_15c_data_model_v2_FieldFilter __pyx_vtable_15c_data_model_v2_FieldFilter;

static PyObject *__pyx_tp_new_15c_data_model_v2_FieldFilter(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_15c_data_model_v2_FieldFilter *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_15c_data_model_v2_FieldFilter *)o);
  p->__pyx_vtab = __pyx_vtabptr_15c_data_model_v2_FieldFilter;
  p->filters = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_15c_data_model_v2_11FieldFilter_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_15c_data_model_v2_FieldFilter(PyObject *o) {
  struct __pyx_obj_15c_data_model_v2_FieldFilter *p = (struct __pyx_obj_15c_data_model_v2_FieldFilter *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->filters);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_15c_data_model_v2_FieldFilter(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15c_data_model_v2_FieldFilter *p = (struct __pyx_obj_15c_data_model_v2_FieldFilter *)o;
  if (p->filters) {
    e = (*v)(p->filters, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15c_data_model_v2_FieldFilter(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15c_data_model_v2_FieldFilter *p = (struct __pyx_obj_15c_data_model_v2_FieldFilter *)o;
  tmp = ((PyObject*)p->filters);
  p->filters = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_15c_data_model_v2_FieldFilter[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_15c_data_model_v2_FieldFilter = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.FieldFilter", /*tp_name*/
  sizeof(struct __pyx_obj_15c_data_model_v2_FieldFilter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15c_data_model_v2_FieldFilter, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "FieldFilter(*filters)", /*tp_doc*/
  __pyx_tp_traverse_15c_data_model_v2_FieldFilter, /*tp_traverse*/
  __pyx_tp_clear_15c_data_model_v2_FieldFilter, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_15c_data_model_v2_FieldFilter, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_15c_data_model_v2_11FieldFilter_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15c_data_model_v2_FieldFilter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_15c_data_model_v2_DecodeContext __pyx_vtable_15c_data_model_v2_DecodeContext;

static PyObject *__pyx_tp_new_15c_data_model_v2_DecodeContext(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_15c_data_model_v2_DecodeContext *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_15c_data_model_v2_DecodeContext *)o);
  p->__pyx_vtab = __pyx_vtabptr_15c_data_model_v2_DecodeContext;
  p->known_objects = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->tmp_unsolved_ref = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->unsolved_ref = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->resolve_ref_func = Py_None; Py_INCREF(Py_None);
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_15c_data_model_v2_13DecodeContext_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_15c_data_model_v2_DecodeContext(PyObject *o) {
  struct __pyx_obj_15c_data_model_v2_DecodeContext *p = (struct __pyx_obj_15c_data_model_v2_DecodeContext *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->known_objects);
  Py_CLEAR(p->tmp_unsolved_ref);
  Py_CLEAR(p->unsolved_ref);
  Py_CLEAR(p->resolve_ref_func);
  Py_CLEAR(p->mode);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_15c_data_model_v2_DecodeContext(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15c_data_model_v2_DecodeContext *p = (struct __pyx_obj_15c_data_model_v2_DecodeContext *)o;
  if (p->known_objects) {
    e = (*v)(p->known_objects, a); if (e) return e;
  }
  if (p->tmp_unsolved_ref) {
    e = (*v)(p->tmp_unsolved_ref, a); if (e) return e;
  }
  if (p->unsolved_ref) {
    e = (*v)(p->unsolved_ref, a); if (e) return e;
  }
  if (p->resolve_ref_func) {
    e = (*v)(p->resolve_ref_func, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15c_data_model_v2_DecodeContext(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15c_data_model_v2_DecodeContext *p = (struct __pyx_obj_15c_data_model_v2_DecodeContext *)o;
  tmp = ((PyObject*)p->known_objects);
  p->known_objects = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->tmp_unsolved_ref);
  p->tmp_unsolved_ref = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->unsolved_ref);
  p->unsolved_ref = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->resolve_ref_func);
  p->resolve_ref_func = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_15c_data_model_v2_DecodeContext[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_15c_data_model_v2_DecodeContext = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.DecodeContext", /*tp_name*/
  sizeof(struct __pyx_obj_15c_data_model_v2_DecodeContext), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15c_data_model_v2_DecodeContext, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15c_data_model_v2_DecodeContext, /*tp_traverse*/
  __pyx_tp_clear_15c_data_model_v2_DecodeContext, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_15c_data_model_v2_DecodeContext, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15c_data_model_v2_DecodeContext, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_15c_data_model_v2_Array __pyx_vtable_15c_data_model_v2_Array;

static PyObject *__pyx_tp_new_15c_data_model_v2_Array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_15c_data_model_v2_Array *p;
  PyObject *o = (&PyList_Type)->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_15c_data_model_v2_Array *)o);
  p->__pyx_vtab = __pyx_vtabptr_15c_data_model_v2_Array;
  p->field = ((struct __pyx_obj_15c_data_model_v2_Field *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_15c_data_model_v2_5Array_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_15c_data_model_v2_Array(PyObject *o) {
  struct __pyx_obj_15c_data_model_v2_Array *p = (struct __pyx_obj_15c_data_model_v2_Array *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->field);
  PyObject_GC_Track(o);
  (&PyList_Type)->tp_dealloc(o);
}

static int __pyx_tp_traverse_15c_data_model_v2_Array(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15c_data_model_v2_Array *p = (struct __pyx_obj_15c_data_model_v2_Array *)o;
  if (!(&PyList_Type)->tp_traverse); else { e = (&PyList_Type)->tp_traverse(o,v,a); if (e) return e; }
  if (p->field) {
    e = (*v)(((PyObject*)p->field), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15c_data_model_v2_Array(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15c_data_model_v2_Array *p = (struct __pyx_obj_15c_data_model_v2_Array *)o;
  if (!(&PyList_Type)->tp_clear); else (&PyList_Type)->tp_clear(o);
  tmp = ((PyObject*)p->field);
  p->field = ((struct __pyx_obj_15c_data_model_v2_Field *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static int __pyx_mp_ass_subscript_15c_data_model_v2_Array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_15c_data_model_v2_5Array_5__setitem__(o, i, v);
  }
  else {
    return __pyx_pw_15c_data_model_v2_5Array_7__delitem__(o, i);
  }
}

static PyMethodDef __pyx_methods_15c_data_model_v2_Array[] = {
  {"_has_changed", (PyCFunction)__pyx_pw_15c_data_model_v2_5Array_3_has_changed, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15c_data_model_v2_5Array_2_has_changed},
  {"append", (PyCFunction)__pyx_pw_15c_data_model_v2_5Array_13append, METH_O, __pyx_doc_15c_data_model_v2_5Array_12append},
  {"_append", (PyCFunction)__pyx_pw_15c_data_model_v2_5Array_15_append, METH_O, __pyx_doc_15c_data_model_v2_5Array_14_append},
  {"extend", (PyCFunction)__pyx_pw_15c_data_model_v2_5Array_17extend, METH_O, __pyx_doc_15c_data_model_v2_5Array_16extend},
  {"insert", (PyCFunction)__pyx_pw_15c_data_model_v2_5Array_19insert, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15c_data_model_v2_5Array_18insert},
  {"pop", (PyCFunction)__pyx_pw_15c_data_model_v2_5Array_21pop, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15c_data_model_v2_5Array_20pop},
  {"remove", (PyCFunction)__pyx_pw_15c_data_model_v2_5Array_23remove, METH_O, __pyx_doc_15c_data_model_v2_5Array_22remove},
  {"sort", (PyCFunction)__pyx_pw_15c_data_model_v2_5Array_25sort, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15c_data_model_v2_5Array_24sort},
  {"has_changed", (PyCFunction)__pyx_pw_15c_data_model_v2_5Array_27has_changed, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15c_data_model_v2_5Array_26has_changed},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Array = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_hex*/
  #endif
  __pyx_pw_15c_data_model_v2_5Array_9__iadd__, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  __pyx_pw_15c_data_model_v2_5Array_11__imul__, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyMappingMethods __pyx_tp_as_mapping_Array = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  __pyx_mp_ass_subscript_15c_data_model_v2_Array, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_15c_data_model_v2_Array = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.Array", /*tp_name*/
  sizeof(struct __pyx_obj_15c_data_model_v2_Array), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15c_data_model_v2_Array, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Array, /*tp_as_number*/
  0, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15c_data_model_v2_Array, /*tp_traverse*/
  __pyx_tp_clear_15c_data_model_v2_Array, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_15c_data_model_v2_Array, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15c_data_model_v2_Array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_15c_data_model_v2_Map __pyx_vtable_15c_data_model_v2_Map;

static PyObject *__pyx_tp_new_15c_data_model_v2_Map(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_15c_data_model_v2_Map *p;
  PyObject *o = (&PyDict_Type)->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_15c_data_model_v2_Map *)o);
  p->__pyx_vtab = __pyx_vtabptr_15c_data_model_v2_Map;
  p->field = ((struct __pyx_obj_15c_data_model_v2_Field *)Py_None); Py_INCREF(Py_None);
  p->removed = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_15c_data_model_v2_3Map_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_15c_data_model_v2_Map(PyObject *o) {
  struct __pyx_obj_15c_data_model_v2_Map *p = (struct __pyx_obj_15c_data_model_v2_Map *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->field);
  Py_CLEAR(p->removed);
  PyObject_GC_Track(o);
  (&PyDict_Type)->tp_dealloc(o);
}

static int __pyx_tp_traverse_15c_data_model_v2_Map(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15c_data_model_v2_Map *p = (struct __pyx_obj_15c_data_model_v2_Map *)o;
  if (!(&PyDict_Type)->tp_traverse); else { e = (&PyDict_Type)->tp_traverse(o,v,a); if (e) return e; }
  if (p->field) {
    e = (*v)(((PyObject*)p->field), a); if (e) return e;
  }
  if (p->removed) {
    e = (*v)(p->removed, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15c_data_model_v2_Map(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15c_data_model_v2_Map *p = (struct __pyx_obj_15c_data_model_v2_Map *)o;
  if (!(&PyDict_Type)->tp_clear); else (&PyDict_Type)->tp_clear(o);
  tmp = ((PyObject*)p->field);
  p->field = ((struct __pyx_obj_15c_data_model_v2_Field *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->removed);
  p->removed = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static int __pyx_mp_ass_subscript_15c_data_model_v2_Map(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_15c_data_model_v2_3Map_5__setitem__(o, i, v);
  }
  else {
    return __pyx_pw_15c_data_model_v2_3Map_7__delitem__(o, i);
  }
}

static PyMethodDef __pyx_methods_15c_data_model_v2_Map[] = {
  {"_has_changed", (PyCFunction)__pyx_pw_15c_data_model_v2_3Map_3_has_changed, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15c_data_model_v2_3Map_2_has_changed},
  {"clear", (PyCFunction)__pyx_pw_15c_data_model_v2_3Map_9clear, METH_NOARGS, __pyx_doc_15c_data_model_v2_3Map_8clear},
  {"pop", (PyCFunction)__pyx_pw_15c_data_model_v2_3Map_11pop, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15c_data_model_v2_3Map_10pop},
  {"popitem", (PyCFunction)__pyx_pw_15c_data_model_v2_3Map_13popitem, METH_NOARGS, __pyx_doc_15c_data_model_v2_3Map_12popitem},
  {"setdefault", (PyCFunction)__pyx_pw_15c_data_model_v2_3Map_15setdefault, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15c_data_model_v2_3Map_14setdefault},
  {"update", (PyCFunction)__pyx_pw_15c_data_model_v2_3Map_17update, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15c_data_model_v2_3Map_16update},
  {0, 0, 0, 0}
};

static PyMappingMethods __pyx_tp_as_mapping_Map = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  __pyx_mp_ass_subscript_15c_data_model_v2_Map, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_15c_data_model_v2_Map = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.Map", /*tp_name*/
  sizeof(struct __pyx_obj_15c_data_model_v2_Map), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15c_data_model_v2_Map, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Map, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15c_data_model_v2_Map, /*tp_traverse*/
  __pyx_tp_clear_15c_data_model_v2_Map, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_15c_data_model_v2_Map, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15c_data_model_v2_Map, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_15c_data_model_v2_IdMap __pyx_vtable_15c_data_model_v2_IdMap;

static PyObject *__pyx_tp_new_15c_data_model_v2_IdMap(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_15c_data_model_v2_IdMap *p;
  PyObject *o = __pyx_tp_new_15c_data_model_v2_Map(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_15c_data_model_v2_IdMap *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_15c_data_model_v2_Map*)__pyx_vtabptr_15c_data_model_v2_IdMap;
  return o;
}

static PyMethodDef __pyx_methods_15c_data_model_v2_IdMap[] = {
  {"add", (PyCFunction)__pyx_pw_15c_data_model_v2_5IdMap_1add, METH_O, __pyx_doc_15c_data_model_v2_5IdMap_add},
  {"remove", (PyCFunction)__pyx_pw_15c_data_model_v2_5IdMap_3remove, METH_O, __pyx_doc_15c_data_model_v2_5IdMap_2remove},
  {"has", (PyCFunction)__pyx_pw_15c_data_model_v2_5IdMap_5has, METH_O, __pyx_doc_15c_data_model_v2_5IdMap_4has},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_15c_data_model_v2_IdMap = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.IdMap", /*tp_name*/
  sizeof(struct __pyx_obj_15c_data_model_v2_IdMap), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15c_data_model_v2_Map, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15c_data_model_v2_Map, /*tp_traverse*/
  __pyx_tp_clear_15c_data_model_v2_Map, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_15c_data_model_v2_IdMap, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15c_data_model_v2_IdMap, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_15c_data_model_v2_Field __pyx_vtable_15c_data_model_v2_Field;

static PyObject *__pyx_tp_new_15c_data_model_v2_Field(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_15c_data_model_v2_Field *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_15c_data_model_v2_Field *)o);
  p->__pyx_vtab = __pyx_vtabptr_15c_data_model_v2_Field;
  p->name = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->key = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->type_name = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->typ = Py_None; Py_INCREF(Py_None);
  p->base_value_type = Py_None; Py_INCREF(Py_None);
  p->data_model_protocol = ((struct __pyx_obj_15c_data_model_v2_DataModelProtocol *)Py_None); Py_INCREF(Py_None);
  p->key_type_name = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->create = Py_None; Py_INCREF(Py_None);
  p->__pyx_default = Py_None; Py_INCREF(Py_None);
  p->dict_encoder = Py_None; Py_INCREF(Py_None);
  p->dict_decoder = Py_None; Py_INCREF(Py_None);
  p->dict_key_encoder = Py_None; Py_INCREF(Py_None);
  p->dict_key_decoder = Py_None; Py_INCREF(Py_None);
  p->dict_ref_encoder = Py_None; Py_INCREF(Py_None);
  p->dict_ref_decoder = Py_None; Py_INCREF(Py_None);
  p->__dict__ = PyDict_New(); if (unlikely(!p->__dict__)) goto bad;if (unlikely(__pyx_pw_15c_data_model_v2_5Field_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_15c_data_model_v2_Field(PyObject *o) {
  struct __pyx_obj_15c_data_model_v2_Field *p = (struct __pyx_obj_15c_data_model_v2_Field *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  if (p->__dict__) PyDict_Clear(p->__dict__);
  Py_CLEAR(p->name);
  Py_CLEAR(p->key);
  Py_CLEAR(p->type_name);
  Py_CLEAR(p->typ);
  Py_CLEAR(p->base_value_type);
  Py_CLEAR(p->data_model_protocol);
  Py_CLEAR(p->key_type_name);
  Py_CLEAR(p->create);
  Py_CLEAR(p->__pyx_default);
  Py_CLEAR(p->dict_encoder);
  Py_CLEAR(p->dict_decoder);
  Py_CLEAR(p->dict_key_encoder);
  Py_CLEAR(p->dict_key_decoder);
  Py_CLEAR(p->dict_ref_encoder);
  Py_CLEAR(p->dict_ref_decoder);
  Py_CLEAR(p->__dict__);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_15c_data_model_v2_Field(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15c_data_model_v2_Field *p = (struct __pyx_obj_15c_data_model_v2_Field *)o;
  if (p->typ) {
    e = (*v)(p->typ, a); if (e) return e;
  }
  if (p->base_value_type) {
    e = (*v)(p->base_value_type, a); if (e) return e;
  }
  if (p->data_model_protocol) {
    e = (*v)(((PyObject*)p->data_model_protocol), a); if (e) return e;
  }
  if (p->create) {
    e = (*v)(p->create, a); if (e) return e;
  }
  if (p->__pyx_default) {
    e = (*v)(p->__pyx_default, a); if (e) return e;
  }
  if (p->dict_encoder) {
    e = (*v)(p->dict_encoder, a); if (e) return e;
  }
  if (p->dict_decoder) {
    e = (*v)(p->dict_decoder, a); if (e) return e;
  }
  if (p->dict_key_encoder) {
    e = (*v)(p->dict_key_encoder, a); if (e) return e;
  }
  if (p->dict_key_decoder) {
    e = (*v)(p->dict_key_decoder, a); if (e) return e;
  }
  if (p->dict_ref_encoder) {
    e = (*v)(p->dict_ref_encoder, a); if (e) return e;
  }
  if (p->dict_ref_decoder) {
    e = (*v)(p->dict_ref_decoder, a); if (e) return e;
  }
  if (p->__dict__) {
    e = (*v)(p->__dict__, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15c_data_model_v2_Field(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15c_data_model_v2_Field *p = (struct __pyx_obj_15c_data_model_v2_Field *)o;
  tmp = ((PyObject*)p->typ);
  p->typ = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->base_value_type);
  p->base_value_type = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->data_model_protocol);
  p->data_model_protocol = ((struct __pyx_obj_15c_data_model_v2_DataModelProtocol *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->create);
  p->create = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_default);
  p->__pyx_default = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->dict_encoder);
  p->dict_encoder = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->dict_decoder);
  p->dict_decoder = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->dict_key_encoder);
  p->dict_key_encoder = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->dict_key_decoder);
  p->dict_key_decoder = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->dict_ref_encoder);
  p->dict_ref_encoder = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->dict_ref_decoder);
  p->dict_ref_decoder = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__dict__);
  p->__dict__ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_tp_getattro_15c_data_model_v2_Field(PyObject *o, PyObject *n) {
  PyObject *v = PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_pw_15c_data_model_v2_5Field_5__getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx___dict__getter_15c_data_model_v2_Field(PyObject *o, CYTHON_UNUSED void *x) {
  struct __pyx_obj_15c_data_model_v2_Field *p = (struct __pyx_obj_15c_data_model_v2_Field *)o;
  if (unlikely(!p->__dict__)){
    p->__dict__ = PyDict_New();
  }
  Py_XINCREF(p->__dict__);
  return p->__dict__;
}

static PyObject *__pyx_getprop_15c_data_model_v2_5Field_index(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15c_data_model_v2_5Field_5index_1__get__(o);
}

static PyObject *__pyx_getprop_15c_data_model_v2_5Field_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15c_data_model_v2_5Field_4name_1__get__(o);
}

static PyObject *__pyx_getprop_15c_data_model_v2_5Field_key(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15c_data_model_v2_5Field_3key_1__get__(o);
}

static PyMethodDef __pyx_methods_15c_data_model_v2_Field[] = {
  {"__getattr__", (PyCFunction)__pyx_pw_15c_data_model_v2_5Field_5__getattr__, METH_O|METH_COEXIST, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_15c_data_model_v2_Field[] = {
  {(char *)"index", __pyx_getprop_15c_data_model_v2_5Field_index, 0, (char *)0, 0},
  {(char *)"name", __pyx_getprop_15c_data_model_v2_5Field_name, 0, (char *)0, 0},
  {(char *)"key", __pyx_getprop_15c_data_model_v2_5Field_key, 0, (char *)0, 0},
  {(char *)"__dict__", __pyx___dict__getter_15c_data_model_v2_Field, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_15c_data_model_v2_Field = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.Field", /*tp_name*/
  sizeof(struct __pyx_obj_15c_data_model_v2_Field), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15c_data_model_v2_Field, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_15c_data_model_v2_5Field_3__str__, /*tp_str*/
  __pyx_tp_getattro_15c_data_model_v2_Field, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15c_data_model_v2_Field, /*tp_traverse*/
  __pyx_tp_clear_15c_data_model_v2_Field, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_15c_data_model_v2_Field, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_15c_data_model_v2_Field, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  offsetof(struct __pyx_obj_15c_data_model_v2_Field, __dict__), /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15c_data_model_v2_Field, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_15c_data_model_v2_FieldsDefine(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_15c_data_model_v2_FieldsDefine *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_15c_data_model_v2_FieldsDefine *)o);
  p->fields = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->fields_by_index = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->fields_by_name = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->fields_by_key = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->fields_is_container = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_15c_data_model_v2_FieldsDefine(PyObject *o) {
  struct __pyx_obj_15c_data_model_v2_FieldsDefine *p = (struct __pyx_obj_15c_data_model_v2_FieldsDefine *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->fields);
  Py_CLEAR(p->fields_by_index);
  Py_CLEAR(p->fields_by_name);
  Py_CLEAR(p->fields_by_key);
  Py_CLEAR(p->fields_is_container);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_15c_data_model_v2_FieldsDefine(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15c_data_model_v2_FieldsDefine *p = (struct __pyx_obj_15c_data_model_v2_FieldsDefine *)o;
  if (p->fields) {
    e = (*v)(p->fields, a); if (e) return e;
  }
  if (p->fields_by_index) {
    e = (*v)(p->fields_by_index, a); if (e) return e;
  }
  if (p->fields_by_name) {
    e = (*v)(p->fields_by_name, a); if (e) return e;
  }
  if (p->fields_by_key) {
    e = (*v)(p->fields_by_key, a); if (e) return e;
  }
  if (p->fields_is_container) {
    e = (*v)(p->fields_is_container, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15c_data_model_v2_FieldsDefine(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15c_data_model_v2_FieldsDefine *p = (struct __pyx_obj_15c_data_model_v2_FieldsDefine *)o;
  tmp = ((PyObject*)p->fields);
  p->fields = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->fields_by_index);
  p->fields_by_index = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->fields_by_name);
  p->fields_by_name = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->fields_by_key);
  p->fields_by_key = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->fields_is_container);
  p->fields_is_container = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_15c_data_model_v2_FieldsDefine[] = {
  {"add_field", (PyCFunction)__pyx_pw_15c_data_model_v2_12FieldsDefine_3add_field, METH_O, __pyx_doc_15c_data_model_v2_12FieldsDefine_2add_field},
  {"copy_bases_fields", (PyCFunction)__pyx_pw_15c_data_model_v2_12FieldsDefine_5copy_bases_fields, METH_O, __pyx_doc_15c_data_model_v2_12FieldsDefine_4copy_bases_fields},
  {"sort_fields", (PyCFunction)__pyx_pw_15c_data_model_v2_12FieldsDefine_7sort_fields, METH_NOARGS, __pyx_doc_15c_data_model_v2_12FieldsDefine_6sort_fields},
  {"copy_class_fields", (PyCFunction)__pyx_pw_15c_data_model_v2_12FieldsDefine_9copy_class_fields, METH_O, __pyx_doc_15c_data_model_v2_12FieldsDefine_8copy_class_fields},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_15c_data_model_v2_FieldsDefine = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.FieldsDefine", /*tp_name*/
  sizeof(struct __pyx_obj_15c_data_model_v2_FieldsDefine), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15c_data_model_v2_FieldsDefine, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "FieldsDefine()", /*tp_doc*/
  __pyx_tp_traverse_15c_data_model_v2_FieldsDefine, /*tp_traverse*/
  __pyx_tp_clear_15c_data_model_v2_FieldsDefine, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_15c_data_model_v2_FieldsDefine, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_15c_data_model_v2_12FieldsDefine_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15c_data_model_v2_FieldsDefine, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_15c_data_model_v2_DataModelProtocol(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_15c_data_model_v2_DataModelProtocol *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_15c_data_model_v2_DataModelProtocol *)o);
  p->fields_define = ((struct __pyx_obj_15c_data_model_v2_FieldsDefine *)Py_None); Py_INCREF(Py_None);
  p->cls = Py_None; Py_INCREF(Py_None);
  p->cls_name = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_15c_data_model_v2_DataModelProtocol(PyObject *o) {
  struct __pyx_obj_15c_data_model_v2_DataModelProtocol *p = (struct __pyx_obj_15c_data_model_v2_DataModelProtocol *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->fields_define);
  Py_CLEAR(p->cls);
  Py_CLEAR(p->cls_name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_15c_data_model_v2_DataModelProtocol(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15c_data_model_v2_DataModelProtocol *p = (struct __pyx_obj_15c_data_model_v2_DataModelProtocol *)o;
  if (p->fields_define) {
    e = (*v)(((PyObject*)p->fields_define), a); if (e) return e;
  }
  if (p->cls) {
    e = (*v)(p->cls, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15c_data_model_v2_DataModelProtocol(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15c_data_model_v2_DataModelProtocol *p = (struct __pyx_obj_15c_data_model_v2_DataModelProtocol *)o;
  tmp = ((PyObject*)p->fields_define);
  p->fields_define = ((struct __pyx_obj_15c_data_model_v2_FieldsDefine *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->cls);
  p->cls = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_15c_data_model_v2_DataModelProtocol[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_15c_data_model_v2_DataModelProtocol = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.DataModelProtocol", /*tp_name*/
  sizeof(struct __pyx_obj_15c_data_model_v2_DataModelProtocol), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15c_data_model_v2_DataModelProtocol, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_15c_data_model_v2_17DataModelProtocol_1__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15c_data_model_v2_DataModelProtocol, /*tp_traverse*/
  __pyx_tp_clear_15c_data_model_v2_DataModelProtocol, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_15c_data_model_v2_DataModelProtocol, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15c_data_model_v2_DataModelProtocol, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_15c_data_model_v2_MetaDataModel(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (&PyType_Type)->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_15c_data_model_v2_MetaDataModel(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  (&PyType_Type)->tp_dealloc(o);
}

static int __pyx_tp_traverse_15c_data_model_v2_MetaDataModel(PyObject *o, visitproc v, void *a) {
  int e;
  if (!(&PyType_Type)->tp_traverse); else { e = (&PyType_Type)->tp_traverse(o,v,a); if (e) return e; }
  return 0;
}

static int __pyx_tp_clear_15c_data_model_v2_MetaDataModel(PyObject *o) {
  if (!(&PyType_Type)->tp_clear); else (&PyType_Type)->tp_clear(o);
  return 0;
}

static PyMethodDef __pyx_methods_15c_data_model_v2_MetaDataModel[] = {
  {"make_auto_gen_methods", (PyCFunction)__pyx_pw_15c_data_model_v2_13MetaDataModel_3make_auto_gen_methods, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15c_data_model_v2_13MetaDataModel_2make_auto_gen_methods},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_15c_data_model_v2_MetaDataModel = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.MetaDataModel", /*tp_name*/
  sizeof(struct __pyx_obj_15c_data_model_v2_MetaDataModel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15c_data_model_v2_MetaDataModel, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "MetaDataModel(clsname, bases, attrs)", /*tp_doc*/
  __pyx_tp_traverse_15c_data_model_v2_MetaDataModel, /*tp_traverse*/
  __pyx_tp_clear_15c_data_model_v2_MetaDataModel, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_15c_data_model_v2_MetaDataModel, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_15c_data_model_v2_13MetaDataModel_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15c_data_model_v2_MetaDataModel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_15c_data_model_v2_DataModel __pyx_vtable_15c_data_model_v2_DataModel;

static PyObject *__pyx_tp_new_15c_data_model_v2_DataModel(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_15c_data_model_v2_DataModel *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_15c_data_model_v2_DataModel *)o);
  p->__pyx_vtab = __pyx_vtabptr_15c_data_model_v2_DataModel;
  new((void*)&(p->changed_set)) FieldDirtySet();
  p->protocol = ((struct __pyx_obj_15c_data_model_v2_DataModelProtocol *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_15c_data_model_v2_9DataModel_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_15c_data_model_v2_DataModel(PyObject *o) {
  struct __pyx_obj_15c_data_model_v2_DataModel *p = (struct __pyx_obj_15c_data_model_v2_DataModel *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->changed_set);
  Py_CLEAR(p->protocol);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_15c_data_model_v2_DataModel(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15c_data_model_v2_DataModel *p = (struct __pyx_obj_15c_data_model_v2_DataModel *)o;
  if (p->protocol) {
    e = (*v)(((PyObject*)p->protocol), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15c_data_model_v2_DataModel(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15c_data_model_v2_DataModel *p = (struct __pyx_obj_15c_data_model_v2_DataModel *)o;
  tmp = ((PyObject*)p->protocol);
  p->protocol = ((struct __pyx_obj_15c_data_model_v2_DataModelProtocol *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_15c_data_model_v2_DataModel[] = {
  {"__getmetaclass__", (PyCFunction)__pyx_pw_15c_data_model_v2_9DataModel_1__getmetaclass__, METH_NOARGS, __pyx_doc_15c_data_model_v2_9DataModel___getmetaclass__},
  {"_get_protocol", (PyCFunction)__pyx_pw_15c_data_model_v2_9DataModel_5_get_protocol, METH_NOARGS, __pyx_doc_15c_data_model_v2_9DataModel_4_get_protocol},
  {"_get_fields_define", (PyCFunction)__pyx_pw_15c_data_model_v2_9DataModel_7_get_fields_define, METH_NOARGS, __pyx_doc_15c_data_model_v2_9DataModel_6_get_fields_define},
  {"_short_repr_", (PyCFunction)__pyx_pw_15c_data_model_v2_9DataModel_11_short_repr_, METH_NOARGS, __pyx_doc_15c_data_model_v2_9DataModel_10_short_repr_},
  {"_long_repr_", (PyCFunction)__pyx_pw_15c_data_model_v2_9DataModel_13_long_repr_, METH_NOARGS, __pyx_doc_15c_data_model_v2_9DataModel_12_long_repr_},
  {"set_data", (PyCFunction)__pyx_pw_15c_data_model_v2_9DataModel_15set_data, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15c_data_model_v2_9DataModel_14set_data},
  {"clear_data", (PyCFunction)__pyx_pw_15c_data_model_v2_9DataModel_17clear_data, METH_NOARGS, __pyx_doc_15c_data_model_v2_9DataModel_16clear_data},
  {"has_changed", (PyCFunction)__pyx_pw_15c_data_model_v2_9DataModel_19has_changed, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15c_data_model_v2_9DataModel_18has_changed},
  {"pack", (PyCFunction)__pyx_pw_15c_data_model_v2_9DataModel_21pack, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15c_data_model_v2_9DataModel_20pack},
  {"unpack", (PyCFunction)__pyx_pw_15c_data_model_v2_9DataModel_23unpack, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15c_data_model_v2_9DataModel_22unpack},
  {"pack_to_dict", (PyCFunction)__pyx_pw_15c_data_model_v2_9DataModel_25pack_to_dict, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15c_data_model_v2_9DataModel_24pack_to_dict},
  {"unpack_from_dict", (PyCFunction)__pyx_pw_15c_data_model_v2_9DataModel_27unpack_from_dict, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15c_data_model_v2_9DataModel_26unpack_from_dict},
  {"clear_changed", (PyCFunction)__pyx_pw_15c_data_model_v2_9DataModel_29clear_changed, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15c_data_model_v2_9DataModel_28clear_changed},
  {"set_changed", (PyCFunction)__pyx_pw_15c_data_model_v2_9DataModel_31set_changed, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15c_data_model_v2_9DataModel_30set_changed},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_15c_data_model_v2_DataModel = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.DataModel", /*tp_name*/
  sizeof(struct __pyx_obj_15c_data_model_v2_DataModel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15c_data_model_v2_DataModel, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_15c_data_model_v2_9DataModel_35__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_15c_data_model_v2_9DataModel_33__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "DataModel(**kwargs)", /*tp_doc*/
  __pyx_tp_traverse_15c_data_model_v2_DataModel, /*tp_traverse*/
  __pyx_tp_clear_15c_data_model_v2_DataModel, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_15c_data_model_v2_DataModel, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_15c_data_model_v2_9DataModel_9__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15c_data_model_v2_DataModel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string *__pyx_freelist_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string[8];
static int __pyx_freecount_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string = 0;

static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string)))) {
    o = (PyObject*)__pyx_freelist_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string[--__pyx_freecount_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string];
    memset(o, 0, sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string(PyObject *o) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_encode);
  Py_CLEAR(p->__pyx_v_to_string);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string)))) {
    __pyx_freelist_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string[__pyx_freecount_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string++] = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string *)o;
  if (p->__pyx_v_encode) {
    e = (*v)(p->__pyx_v_encode, a); if (e) return e;
  }
  if (p->__pyx_v_to_string) {
    e = (*v)(p->__pyx_v_to_string, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string *)o;
  tmp = ((PyObject*)p->__pyx_v_encode);
  p->__pyx_v_encode = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_to_string);
  p->__pyx_v_to_string = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.__pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string", /*tp_name*/
  sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string, /*tp_traverse*/
  __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string *__pyx_freelist_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string[8];
static int __pyx_freecount_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string = 0;

static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string)))) {
    o = (PyObject*)__pyx_freelist_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string[--__pyx_freecount_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string];
    memset(o, 0, sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string(PyObject *o) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_decode);
  Py_CLEAR(p->__pyx_v_from_string);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string)))) {
    __pyx_freelist_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string[__pyx_freecount_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string++] = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string *)o;
  if (p->__pyx_v_decode) {
    e = (*v)(p->__pyx_v_decode, a); if (e) return e;
  }
  if (p->__pyx_v_from_string) {
    e = (*v)(p->__pyx_v_from_string, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string *)o;
  tmp = ((PyObject*)p->__pyx_v_decode);
  p->__pyx_v_decode = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_from_string);
  p->__pyx_v_from_string = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.__pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string", /*tp_name*/
  sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string, /*tp_traverse*/
  __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget *__pyx_freelist_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget[8];
static int __pyx_freecount_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget = 0;

static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget)))) {
    o = (PyObject*)__pyx_freelist_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget[--__pyx_freecount_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget];
    memset(o, 0, sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget(PyObject *o) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_field);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget)))) {
    __pyx_freelist_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget[__pyx_freecount_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget++] = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget *)o;
  if (p->__pyx_v_field) {
    e = (*v)(((PyObject*)p->__pyx_v_field), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget *)o;
  tmp = ((PyObject*)p->__pyx_v_field);
  p->__pyx_v_field = ((struct __pyx_obj_15c_data_model_v2_Field *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.__pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget", /*tp_name*/
  sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget, /*tp_traverse*/
  __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset *__pyx_freelist_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset[8];
static int __pyx_freecount_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset = 0;

static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset)))) {
    o = (PyObject*)__pyx_freelist_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset[--__pyx_freecount_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset];
    memset(o, 0, sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset(PyObject *o) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_field);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset)))) {
    __pyx_freelist_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset[__pyx_freecount_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset++] = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset *)o;
  if (p->__pyx_v_field) {
    e = (*v)(((PyObject*)p->__pyx_v_field), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset *)o;
  tmp = ((PyObject*)p->__pyx_v_field);
  p->__pyx_v_field = ((struct __pyx_obj_15c_data_model_v2_Field *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.__pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset", /*tp_name*/
  sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset, /*tp_traverse*/
  __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel *__pyx_freelist_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel[8];
static int __pyx_freecount_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel = 0;

static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel)))) {
    o = (PyObject*)__pyx_freelist_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel[--__pyx_freecount_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel];
    memset(o, 0, sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel(PyObject *o) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_field);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel)))) {
    __pyx_freelist_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel[__pyx_freecount_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel++] = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel *)o;
  if (p->__pyx_v_field) {
    e = (*v)(((PyObject*)p->__pyx_v_field), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel *)o;
  tmp = ((PyObject*)p->__pyx_v_field);
  p->__pyx_v_field = ((struct __pyx_obj_15c_data_model_v2_Field *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.__pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel", /*tp_name*/
  sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel, /*tp_traverse*/
  __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func *__pyx_freelist_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func[8];
static int __pyx_freecount_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func = 0;

static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func)))) {
    o = (PyObject*)__pyx_freelist_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func[--__pyx_freecount_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func];
    memset(o, 0, sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func(PyObject *o) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_field);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func)))) {
    __pyx_freelist_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func[__pyx_freecount_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func++] = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func *)o;
  if (p->__pyx_v_field) {
    e = (*v)(((PyObject*)p->__pyx_v_field), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func *)o;
  tmp = ((PyObject*)p->__pyx_v_field);
  p->__pyx_v_field = ((struct __pyx_obj_15c_data_model_v2_Field *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.__pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func", /*tp_name*/
  sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func, /*tp_traverse*/
  __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func *__pyx_freelist_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func[8];
static int __pyx_freecount_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func = 0;

static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func)))) {
    o = (PyObject*)__pyx_freelist_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func[--__pyx_freecount_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func];
    memset(o, 0, sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func(PyObject *o) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_field);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func)))) {
    __pyx_freelist_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func[__pyx_freecount_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func++] = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func *)o;
  if (p->__pyx_v_field) {
    e = (*v)(((PyObject*)p->__pyx_v_field), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func *)o;
  tmp = ((PyObject*)p->__pyx_v_field);
  p->__pyx_v_field = ((struct __pyx_obj_15c_data_model_v2_Field *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.__pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func", /*tp_name*/
  sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func, /*tp_traverse*/
  __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value *__pyx_freelist_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value[8];
static int __pyx_freecount_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value = 0;

static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value)))) {
    o = (PyObject*)__pyx_freelist_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value[--__pyx_freecount_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value];
    memset(o, 0, sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value(PyObject *o) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_field);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value)))) {
    __pyx_freelist_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value[__pyx_freecount_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value++] = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value *)o;
  if (p->__pyx_v_field) {
    e = (*v)(((PyObject*)p->__pyx_v_field), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value *)o;
  tmp = ((PyObject*)p->__pyx_v_field);
  p->__pyx_v_field = ((struct __pyx_obj_15c_data_model_v2_Field *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.__pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value", /*tp_name*/
  sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value, /*tp_traverse*/
  __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func *__pyx_freelist_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func[8];
static int __pyx_freecount_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func = 0;

static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func)))) {
    o = (PyObject*)__pyx_freelist_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func[--__pyx_freecount_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func];
    memset(o, 0, sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func(PyObject *o) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_field);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func)))) {
    __pyx_freelist_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func[__pyx_freecount_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func++] = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func *)o;
  if (p->__pyx_v_field) {
    e = (*v)(((PyObject*)p->__pyx_v_field), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func *)o;
  tmp = ((PyObject*)p->__pyx_v_field);
  p->__pyx_v_field = ((struct __pyx_obj_15c_data_model_v2_Field *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.__pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func", /*tp_name*/
  sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func, /*tp_traverse*/
  __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget *__pyx_freelist_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget[8];
static int __pyx_freecount_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget = 0;

static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget)))) {
    o = (PyObject*)__pyx_freelist_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget[--__pyx_freecount_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget];
    memset(o, 0, sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget(PyObject *o) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_field);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget)))) {
    __pyx_freelist_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget[__pyx_freecount_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget++] = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget *)o;
  if (p->__pyx_v_field) {
    e = (*v)(((PyObject*)p->__pyx_v_field), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget *)o;
  tmp = ((PyObject*)p->__pyx_v_field);
  p->__pyx_v_field = ((struct __pyx_obj_15c_data_model_v2_Field *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.__pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget", /*tp_name*/
  sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget, /*tp_traverse*/
  __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset *__pyx_freelist_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset[8];
static int __pyx_freecount_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset = 0;

static PyObject *__pyx_tp_new_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset)))) {
    o = (PyObject*)__pyx_freelist_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset[--__pyx_freecount_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset];
    memset(o, 0, sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset(PyObject *o) {
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_field);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset)))) {
    __pyx_freelist_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset[__pyx_freecount_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset++] = ((struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset *)o;
  if (p->__pyx_v_field) {
    e = (*v)(((PyObject*)p->__pyx_v_field), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset *p = (struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset *)o;
  tmp = ((PyObject*)p->__pyx_v_field);
  p->__pyx_v_field = ((struct __pyx_obj_15c_data_model_v2_Field *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.__pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset", /*tp_name*/
  sizeof(struct __pyx_obj_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset, /*tp_traverse*/
  __pyx_tp_clear_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py *__pyx_freelist___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py[8];
static int __pyx_freecount___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py = 0;

static PyObject *__pyx_tp_new___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py)))) {
    o = (PyObject*)__pyx_freelist___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py[--__pyx_freecount___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py];
    memset(o, 0, sizeof(struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py));
    (void) PyObject_INIT(o, t);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py(PyObject *o) {
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py)))) {
    __pyx_freelist___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py[__pyx_freecount___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py++] = ((struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static PyTypeObject __pyx_scope_struct____Pyx_CFunc_bint____Field___to_py = {
  PyVarObject_HEAD_INIT(0, 0)
  "c_data_model_v2.__pyx_scope_struct____Pyx_CFunc_bint____Field___to_py", /*tp_name*/
  sizeof(struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "c_data_model_v2",
    __pyx_k_DataModel_DataModel_packunpackp, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ArrayField, __pyx_k_ArrayField, sizeof(__pyx_k_ArrayField), 0, 0, 1, 1},
  {&__pyx_n_s_DataModelError, __pyx_k_DataModelError, sizeof(__pyx_k_DataModelError), 0, 0, 1, 1},
  {&__pyx_kp_s_DataModelProtocol_of, __pyx_k_DataModelProtocol_of, sizeof(__pyx_k_DataModelProtocol_of), 0, 0, 1, 0},
  {&__pyx_n_s_DefineError, __pyx_k_DefineError, sizeof(__pyx_k_DefineError), 0, 0, 1, 1},
  {&__pyx_n_s_DuplicateIndexError, __pyx_k_DuplicateIndexError, sizeof(__pyx_k_DuplicateIndexError), 0, 0, 1, 1},
  {&__pyx_n_s_DuplicateNameError, __pyx_k_DuplicateNameError, sizeof(__pyx_k_DuplicateNameError), 0, 0, 1, 1},
  {&__pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_k_E_nwork_g53_engine_neox_src_3d_e, sizeof(__pyx_k_E_nwork_g53_engine_neox_src_3d_e), 0, 0, 1, 0},
  {&__pyx_kp_s_Field_is_not_a_number_type, __pyx_k_Field_is_not_a_number_type, sizeof(__pyx_k_Field_is_not_a_number_type), 0, 0, 1, 0},
  {&__pyx_n_s_IdMapField, __pyx_k_IdMapField, sizeof(__pyx_k_IdMapField), 0, 0, 1, 1},
  {&__pyx_n_s_MapField, __pyx_k_MapField, sizeof(__pyx_k_MapField), 0, 0, 1, 1},
  {&__pyx_n_s_NoFieldError, __pyx_k_NoFieldError, sizeof(__pyx_k_NoFieldError), 0, 0, 1, 1},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_OperateError, __pyx_k_OperateError, sizeof(__pyx_k_OperateError), 0, 0, 1, 1},
  {&__pyx_n_s_OverflowError, __pyx_k_OverflowError, sizeof(__pyx_k_OverflowError), 0, 0, 1, 1},
  {&__pyx_n_s_PackError, __pyx_k_PackError, sizeof(__pyx_k_PackError), 0, 0, 1, 1},
  {&__pyx_n_s_Pyx_CFunc_bint____Field___to_p, __pyx_k_Pyx_CFunc_bint____Field___to_p, sizeof(__pyx_k_Pyx_CFunc_bint____Field___to_p), 0, 0, 1, 1},
  {&__pyx_n_s_SkipFromPack, __pyx_k_SkipFromPack, sizeof(__pyx_k_SkipFromPack), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_UnpackError, __pyx_k_UnpackError, sizeof(__pyx_k_UnpackError), 0, 0, 1, 1},
  {&__pyx_n_s__51, __pyx_k__51, sizeof(__pyx_k__51), 0, 0, 1, 1},
  {&__pyx_kp_s__53, __pyx_k__53, sizeof(__pyx_k__53), 0, 0, 1, 0},
  {&__pyx_kp_s__56, __pyx_k__56, sizeof(__pyx_k__56), 0, 0, 1, 0},
  {&__pyx_kp_s__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 0, 1, 0},
  {&__pyx_n_s__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 0, 1, 1},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {&__pyx_n_s_add_2, __pyx_k_add_2, sizeof(__pyx_k_add_2), 0, 0, 1, 1},
  {&__pyx_n_s_add_field, __pyx_k_add_field, sizeof(__pyx_k_add_field), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_arg, __pyx_k_arg, sizeof(__pyx_k_arg), 0, 0, 1, 1},
  {&__pyx_n_s_arithm, __pyx_k_arithm, sizeof(__pyx_k_arithm), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_attrs, __pyx_k_attrs, sizeof(__pyx_k_attrs), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_bases, __pyx_k_bases, sizeof(__pyx_k_bases), 0, 0, 1, 1},
  {&__pyx_n_s_bases_2, __pyx_k_bases_2, sizeof(__pyx_k_bases_2), 0, 0, 1, 1},
  {&__pyx_n_s_bool, __pyx_k_bool, sizeof(__pyx_k_bool), 0, 0, 1, 1},
  {&__pyx_n_s_c_data_model_v2, __pyx_k_c_data_model_v2, sizeof(__pyx_k_c_data_model_v2), 0, 0, 1, 1},
  {&__pyx_kp_s_cannot_del_a_container_field, __pyx_k_cannot_del_a_container_field, sizeof(__pyx_k_cannot_del_a_container_field), 0, 0, 1, 0},
  {&__pyx_n_s_cfunc_to_py, __pyx_k_cfunc_to_py, sizeof(__pyx_k_cfunc_to_py), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_clear_changed, __pyx_k_clear_changed, sizeof(__pyx_k_clear_changed), 0, 0, 1, 1},
  {&__pyx_n_s_clsname, __pyx_k_clsname, sizeof(__pyx_k_clsname), 0, 0, 1, 1},
  {&__pyx_n_s_cmp, __pyx_k_cmp, sizeof(__pyx_k_cmp), 0, 0, 1, 1},
  {&__pyx_kp_s_conflicted_properties_array_map, __pyx_k_conflicted_properties_array_map, sizeof(__pyx_k_conflicted_properties_array_map), 0, 0, 1, 0},
  {&__pyx_n_s_container, __pyx_k_container, sizeof(__pyx_k_container), 0, 0, 1, 1},
  {&__pyx_n_s_container_class, __pyx_k_container_class, sizeof(__pyx_k_container_class), 0, 0, 1, 1},
  {&__pyx_n_s_converter, __pyx_k_converter, sizeof(__pyx_k_converter), 0, 0, 1, 1},
  {&__pyx_n_s_copy_bases_fields, __pyx_k_copy_bases_fields, sizeof(__pyx_k_copy_bases_fields), 0, 0, 1, 1},
  {&__pyx_n_s_copy_class_fields, __pyx_k_copy_class_fields, sizeof(__pyx_k_copy_class_fields), 0, 0, 1, 1},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_n_s_default, __pyx_k_default, sizeof(__pyx_k_default), 0, 0, 1, 1},
  {&__pyx_n_s_delitem, __pyx_k_delitem, sizeof(__pyx_k_delitem), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_dict_2, __pyx_k_dict_2, sizeof(__pyx_k_dict_2), 0, 0, 1, 1},
  {&__pyx_n_s_dm_self, __pyx_k_dm_self, sizeof(__pyx_k_dm_self), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_double, __pyx_k_double, sizeof(__pyx_k_double), 0, 0, 1, 1},
  {&__pyx_n_s_fdel, __pyx_k_fdel, sizeof(__pyx_k_fdel), 0, 0, 1, 1},
  {&__pyx_n_s_fget, __pyx_k_fget, sizeof(__pyx_k_fget), 0, 0, 1, 1},
  {&__pyx_n_s_field, __pyx_k_field, sizeof(__pyx_k_field), 0, 0, 1, 1},
  {&__pyx_n_s_field_filter, __pyx_k_field_filter, sizeof(__pyx_k_field_filter), 0, 0, 1, 1},
  {&__pyx_n_s_field_name, __pyx_k_field_name, sizeof(__pyx_k_field_name), 0, 0, 1, 1},
  {&__pyx_n_s_fields, __pyx_k_fields, sizeof(__pyx_k_fields), 0, 0, 1, 1},
  {&__pyx_n_s_fields_by_index, __pyx_k_fields_by_index, sizeof(__pyx_k_fields_by_index), 0, 0, 1, 1},
  {&__pyx_n_s_fields_by_key, __pyx_k_fields_by_key, sizeof(__pyx_k_fields_by_key), 0, 0, 1, 1},
  {&__pyx_n_s_fields_by_name, __pyx_k_fields_by_name, sizeof(__pyx_k_fields_by_name), 0, 0, 1, 1},
  {&__pyx_n_s_float, __pyx_k_float, sizeof(__pyx_k_float), 0, 0, 1, 1},
  {&__pyx_n_s_fmt, __pyx_k_fmt, sizeof(__pyx_k_fmt), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fset, __pyx_k_fset, sizeof(__pyx_k_fset), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_get_fields_define, __pyx_k_get_fields_define, sizeof(__pyx_k_get_fields_define), 0, 0, 1, 1},
  {&__pyx_n_s_get_func, __pyx_k_get_func, sizeof(__pyx_k_get_func), 0, 0, 1, 1},
  {&__pyx_n_s_get_protocol, __pyx_k_get_protocol, sizeof(__pyx_k_get_protocol), 0, 0, 1, 1},
  {&__pyx_n_s_has_changed, __pyx_k_has_changed, sizeof(__pyx_k_has_changed), 0, 0, 1, 1},
  {&__pyx_n_s_iadd, __pyx_k_iadd, sizeof(__pyx_k_iadd), 0, 0, 1, 1},
  {&__pyx_n_s_id_map, __pyx_k_id_map, sizeof(__pyx_k_id_map), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_int16, __pyx_k_int16, sizeof(__pyx_k_int16), 0, 0, 1, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_int64, __pyx_k_int64, sizeof(__pyx_k_int64), 0, 0, 1, 1},
  {&__pyx_n_s_int8, __pyx_k_int8, sizeof(__pyx_k_int8), 0, 0, 1, 1},
  {&__pyx_kp_s_invalid_index, __pyx_k_invalid_index, sizeof(__pyx_k_invalid_index), 0, 0, 1, 0},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_n_s_iterkeys, __pyx_k_iterkeys, sizeof(__pyx_k_iterkeys), 0, 0, 1, 1},
  {&__pyx_n_s_itervalues, __pyx_k_itervalues, sizeof(__pyx_k_itervalues), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_key_decode_from_string_locals, __pyx_k_key_decode_from_string_locals, sizeof(__pyx_k_key_decode_from_string_locals), 0, 0, 1, 1},
  {&__pyx_n_s_key_encode_to_string_locals__co, __pyx_k_key_encode_to_string_locals__co, sizeof(__pyx_k_key_encode_to_string_locals__co), 0, 0, 1, 1},
  {&__pyx_n_s_kwarg, __pyx_k_kwarg, sizeof(__pyx_k_kwarg), 0, 0, 1, 1},
  {&__pyx_n_s_long_repr, __pyx_k_long_repr, sizeof(__pyx_k_long_repr), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_make_add_func_locals__add, __pyx_k_make_add_func_locals__add, sizeof(__pyx_k_make_add_func_locals__add), 0, 0, 1, 1},
  {&__pyx_n_s_make_auto_gen_methods, __pyx_k_make_auto_gen_methods, sizeof(__pyx_k_make_auto_gen_methods), 0, 0, 1, 1},
  {&__pyx_n_s_make_container_fdel_locals_fdel, __pyx_k_make_container_fdel_locals_fdel, sizeof(__pyx_k_make_container_fdel_locals_fdel), 0, 0, 1, 1},
  {&__pyx_n_s_make_container_fget_locals_fget, __pyx_k_make_container_fget_locals_fget, sizeof(__pyx_k_make_container_fget_locals_fget), 0, 0, 1, 1},
  {&__pyx_n_s_make_container_fset_locals_fset, __pyx_k_make_container_fset_locals_fset, sizeof(__pyx_k_make_container_fset_locals_fset), 0, 0, 1, 1},
  {&__pyx_n_s_make_fdel_locals_fdel, __pyx_k_make_fdel_locals_fdel, sizeof(__pyx_k_make_fdel_locals_fdel), 0, 0, 1, 1},
  {&__pyx_n_s_make_fget_locals_fget, __pyx_k_make_fget_locals_fget, sizeof(__pyx_k_make_fget_locals_fget), 0, 0, 1, 1},
  {&__pyx_n_s_make_fset_locals_fset, __pyx_k_make_fset_locals_fset, sizeof(__pyx_k_make_fset_locals_fset), 0, 0, 1, 1},
  {&__pyx_n_s_make_get_func_locals_get_func, __pyx_k_make_get_func_locals_get_func, sizeof(__pyx_k_make_get_func_locals_get_func), 0, 0, 1, 1},
  {&__pyx_n_s_make_signed_sub_func_locals__sub, __pyx_k_make_signed_sub_func_locals__sub, sizeof(__pyx_k_make_signed_sub_func_locals__sub), 0, 0, 1, 1},
  {&__pyx_n_s_make_sub_func_with_min_value_loc, __pyx_k_make_sub_func_with_min_value_loc, sizeof(__pyx_k_make_sub_func_with_min_value_loc), 0, 0, 1, 1},
  {&__pyx_n_s_map, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
  {&__pyx_n_s_mark_change, __pyx_k_mark_change, sizeof(__pyx_k_mark_change), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_min_value, __pyx_k_min_value, sizeof(__pyx_k_min_value), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new_value, __pyx_k_new_value, sizeof(__pyx_k_new_value), 0, 0, 1, 1},
  {&__pyx_kp_s_no_such_field_s, __pyx_k_no_such_field_s, sizeof(__pyx_k_no_such_field_s), 0, 0, 1, 0},
  {&__pyx_n_s_obj_dict, __pyx_k_obj_dict, sizeof(__pyx_k_obj_dict), 0, 0, 1, 1},
  {&__pyx_n_s_oid, __pyx_k_oid, sizeof(__pyx_k_oid), 0, 0, 1, 1},
  {&__pyx_n_s_oid_2, __pyx_k_oid_2, sizeof(__pyx_k_oid_2), 0, 0, 1, 1},
  {&__pyx_n_s_old_value, __pyx_k_old_value, sizeof(__pyx_k_old_value), 0, 0, 1, 1},
  {&__pyx_n_s_only_changed, __pyx_k_only_changed, sizeof(__pyx_k_only_changed), 0, 0, 1, 1},
  {&__pyx_kp_s_overflow_lower_limit, __pyx_k_overflow_lower_limit, sizeof(__pyx_k_overflow_lower_limit), 0, 0, 1, 0},
  {&__pyx_n_s_override, __pyx_k_override, sizeof(__pyx_k_override), 0, 0, 1, 1},
  {&__pyx_n_s_pack_to_dict, __pyx_k_pack_to_dict, sizeof(__pyx_k_pack_to_dict), 0, 0, 1, 1},
  {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
  {&__pyx_n_s_popitem, __pyx_k_popitem, sizeof(__pyx_k_popitem), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_property, __pyx_k_property, sizeof(__pyx_k_property), 0, 0, 1, 1},
  {&__pyx_n_s_protocol, __pyx_k_protocol, sizeof(__pyx_k_protocol), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_recursive, __pyx_k_recursive, sizeof(__pyx_k_recursive), 0, 0, 1, 1},
  {&__pyx_n_s_ref, __pyx_k_ref, sizeof(__pyx_k_ref), 0, 0, 1, 1},
  {&__pyx_kp_s_ref_must_pointer_to_a_DataModel, __pyx_k_ref_must_pointer_to_a_DataModel, sizeof(__pyx_k_ref_must_pointer_to_a_DataModel), 0, 0, 1, 0},
  {&__pyx_n_s_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},
  {&__pyx_n_s_resolve_ref, __pyx_k_resolve_ref, sizeof(__pyx_k_resolve_ref), 0, 0, 1, 1},
  {&__pyx_kp_s_s_name_s_index_d, __pyx_k_s_name_s_index_d, sizeof(__pyx_k_s_name_s_index_d), 0, 0, 1, 0},
  {&__pyx_kp_s_s_s, __pyx_k_s_s, sizeof(__pyx_k_s_s), 0, 0, 1, 0},
  {&__pyx_kp_s_s_s_2, __pyx_k_s_s_2, sizeof(__pyx_k_s_s_2), 0, 0, 1, 0},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_self_dict, __pyx_k_self_dict, sizeof(__pyx_k_self_dict), 0, 0, 1, 1},
  {&__pyx_n_s_setdefault, __pyx_k_setdefault, sizeof(__pyx_k_setdefault), 0, 0, 1, 1},
  {&__pyx_n_s_setitem, __pyx_k_setitem, sizeof(__pyx_k_setitem), 0, 0, 1, 1},
  {&__pyx_n_s_short_repr, __pyx_k_short_repr, sizeof(__pyx_k_short_repr), 0, 0, 1, 1},
  {&__pyx_n_s_sort, __pyx_k_sort, sizeof(__pyx_k_sort), 0, 0, 1, 1},
  {&__pyx_n_s_sort_fields, __pyx_k_sort_fields, sizeof(__pyx_k_sort_fields), 0, 0, 1, 1},
  {&__pyx_n_s_sort_fields_locals_lambda, __pyx_k_sort_fields_locals_lambda, sizeof(__pyx_k_sort_fields_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_src_dict_data, __pyx_k_src_dict_data, sizeof(__pyx_k_src_dict_data), 0, 0, 1, 1},
  {&__pyx_n_s_startswith, __pyx_k_startswith, sizeof(__pyx_k_startswith), 0, 0, 1, 1},
  {&__pyx_n_s_string, __pyx_k_string, sizeof(__pyx_k_string), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_sub, __pyx_k_sub, sizeof(__pyx_k_sub), 0, 0, 1, 1},
  {&__pyx_n_s_sub_2, __pyx_k_sub_2, sizeof(__pyx_k_sub_2), 0, 0, 1, 1},
  {&__pyx_n_s_sync, __pyx_k_sync, sizeof(__pyx_k_sync), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_typ, __pyx_k_typ, sizeof(__pyx_k_typ), 0, 0, 1, 1},
  {&__pyx_n_s_uint16, __pyx_k_uint16, sizeof(__pyx_k_uint16), 0, 0, 1, 1},
  {&__pyx_n_s_uint32, __pyx_k_uint32, sizeof(__pyx_k_uint32), 0, 0, 1, 1},
  {&__pyx_n_s_uint64, __pyx_k_uint64, sizeof(__pyx_k_uint64), 0, 0, 1, 1},
  {&__pyx_n_s_uint8, __pyx_k_uint8, sizeof(__pyx_k_uint8), 0, 0, 1, 1},
  {&__pyx_n_s_unpack_from_dict, __pyx_k_unpack_from_dict, sizeof(__pyx_k_unpack_from_dict), 0, 0, 1, 1},
  {&__pyx_n_s_unsupport, __pyx_k_unsupport, sizeof(__pyx_k_unsupport), 0, 0, 1, 1},
  {&__pyx_kp_s_unsupported_format, __pyx_k_unsupported_format, sizeof(__pyx_k_unsupported_format), 0, 0, 1, 0},
  {&__pyx_kp_s_unsupported_type, __pyx_k_unsupported_type, sizeof(__pyx_k_unsupported_type), 0, 0, 1, 0},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_value_2, __pyx_k_value_2, sizeof(__pyx_k_value_2), 0, 0, 1, 1},
  {&__pyx_n_s_wrap, __pyx_k_wrap, sizeof(__pyx_k_wrap), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 830, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 1108, __pyx_L1_error)
  __pyx_builtin_cmp = __Pyx_GetBuiltinName(__pyx_n_s_cmp); if (!__pyx_builtin_cmp) __PYX_ERR(0, 1217, __pyx_L1_error)
  __pyx_builtin_OverflowError = __Pyx_GetBuiltinName(__pyx_n_s_OverflowError); if (!__pyx_builtin_OverflowError) __PYX_ERR(0, 1318, __pyx_L1_error)
  __pyx_builtin_property = __Pyx_GetBuiltinName(__pyx_n_s_property); if (!__pyx_builtin_property) __PYX_ERR(0, 1455, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "c_data_model_v2.pyx":250
 *     to_string = _value2string.get(type_name)
 *     assert to_string is not None
 *     def _converter(value):             # <<<<<<<<<<<<<<
 *         x = encode(value)
 *         return to_string(x)
 */
  __pyx_tuple_ = PyTuple_Pack(2, __pyx_n_s_value, __pyx_n_s_x); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_n_s_converter, 250, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 250, __pyx_L1_error)

  /* "c_data_model_v2.pyx":259
 *     from_string = _string2value.get(type_name)
 *     assert from_string is not None
 *     def _converter(value):             # <<<<<<<<<<<<<<
 *         x = from_string(value)
 *         return decode(x)
 */
  __pyx_tuple__3 = PyTuple_Pack(2, __pyx_n_s_value, __pyx_n_s_x); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_n_s_converter, 259, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 259, __pyx_L1_error)

  /* "c_data_model_v2.pyx":289
 *     info = str(value)
 *     if len(info) >= 32:
 *         info = info[:30] + '..'             # <<<<<<<<<<<<<<
 *     return info
 * 
 */
  __pyx_slice__5 = PySlice_New(Py_None, __pyx_int_30, Py_None); if (unlikely(!__pyx_slice__5)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__5);
  __Pyx_GIVEREF(__pyx_slice__5);

  /* "c_data_model_v2.pyx":402
 * 
 * cdef object make_fget(Field field):
 *     def fget(object self):             # <<<<<<<<<<<<<<
 *         return self.__dict__.get(field.key, field.default)
 *     return fget
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_n_s_fget, 402, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(0, 402, __pyx_L1_error)

  /* "c_data_model_v2.pyx":408
 * 
 * cdef object make_fset(Field field):
 *     def fset(object self, object value):             # <<<<<<<<<<<<<<
 *         cdef dict self_dict = self.__dict__
 *         cdef DataModel dm_self
 */
  __pyx_tuple__10 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_value, __pyx_n_s_self_dict, __pyx_n_s_dm_self); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_n_s_fset, 408, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(0, 408, __pyx_L1_error)

  /* "c_data_model_v2.pyx":419
 * 
 * cdef object make_fdel(Field field):
 *     def fdel(object self):             # <<<<<<<<<<<<<<
 *         cdef DataModel dm_self
 *         if hasattr(self, Field.key):
 */
  __pyx_tuple__12 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_dm_self); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_n_s_fdel, 419, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(0, 419, __pyx_L1_error)

  /* "c_data_model_v2.pyx":830
 * 
 *     def __imul__(self, other):
 *         raise NotImplementedError('unsupport')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_n_s_unsupport); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "c_data_model_v2.pyx":1085
 *             self.data_model_protocol = <DataModelProtocol>typ._protocol_
 *         else:
 *             raise DefineError('unsupported type')             # <<<<<<<<<<<<<<
 * 
 *         self.index = index
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_unsupported_type); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 1085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "c_data_model_v2.pyx":1089
 *         self.index = index
 *         if index <= 0 or index > 2 ** 16:
 *             raise DefineError('invalid index')             # <<<<<<<<<<<<<<
 * 
 *         self.array = array
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_invalid_index); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 1089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "c_data_model_v2.pyx":1108
 *         if self.ref:
 *             if not self.is_data_model_type():
 *                 raise TypeError("ref must pointer to a DataModel type")             # <<<<<<<<<<<<<<
 * 
 *         self.skip_changed = False
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_ref_must_pointer_to_a_DataModel); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "c_data_model_v2.pyx":1136
 *             self.dict_ref_decoder = value_field.dict_decoder
 * 
 *         if [self, array, self.map, self.id_map].count(True) > 1:             # <<<<<<<<<<<<<<
 *             raise DefineError('conflicted properties: array, map, id_map')
 * 
 */
  __pyx_tuple__18 = PyTuple_Pack(1, Py_True); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "c_data_model_v2.pyx":1137
 * 
 *         if [self, array, self.map, self.id_map].count(True) > 1:
 *             raise DefineError('conflicted properties: array, map, id_map')             # <<<<<<<<<<<<<<
 * 
 *         cdef object dict_key_encoder
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_conflicted_properties_array_map); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "c_data_model_v2.pyx":1165
 *     for base in bases:
 *         if getattr(base, '_fields_by_index', None) is not None:
 *             _fields += base._fields[:]             # <<<<<<<<<<<<<<
 *             _fields_by_index.update(base._fields_by_index)
 *             _fields_by_name.update(base._fields_by_name)
 */
  __pyx_slice__20 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__20)) __PYX_ERR(0, 1165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__20);
  __Pyx_GIVEREF(__pyx_slice__20);

  /* "c_data_model_v2.pyx":1256
 * cdef object make_get_func(Field field):
 *     if field.is_data_model_type():
 *         def get_func(self):             # <<<<<<<<<<<<<<
 *             cdef dict d = self.__dict__
 *             if field.key not in d:
 */
  __pyx_tuple__21 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_d); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_n_s_get_func, 1256, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 1256, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1263
 *         return get_func
 *     else:
 *         def get_func(self):             # <<<<<<<<<<<<<<
 *             return self.__dict__.setdefault(field.key, field.default)
 *         return get_func
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 1263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_n_s_get_func, 1263, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(0, 1263, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1275
 *     if field.type_name in _int_types:
 *         if field.type_name in _unsigned_int_types:
 *             def _add(object self, uint64 value):             # <<<<<<<<<<<<<<
 *                 cdef dict d = self.__dict__
 *                 cdef uint64 old_value = d.get(field.key, 0)
 */
  __pyx_tuple__25 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_value, __pyx_n_s_d, __pyx_n_s_old_value, __pyx_n_s_new_value); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 1275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_n_s_add, 1275, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 1275, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1283
 *             return _add
 *         else:
 *             def _add(object self, int64 value):             # <<<<<<<<<<<<<<
 *                 cdef dict d = self.__dict__
 *                 cdef int64 old_value = d.get(field.key, 0)
 */
  __pyx_tuple__27 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_value, __pyx_n_s_d, __pyx_n_s_old_value, __pyx_n_s_new_value); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 1283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_n_s_add, 1283, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 1283, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1291
 *             return _add
 *     elif field.type_name in _float_types:
 *         def _add(object self, double value):             # <<<<<<<<<<<<<<
 *             cdef dict d = self.__dict__
 *             cdef double old_value = d.get(field.key, 0.0)
 */
  __pyx_tuple__29 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_value, __pyx_n_s_d, __pyx_n_s_old_value, __pyx_n_s_new_value); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 1291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_n_s_add, 1291, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 1291, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1318
 *                 cdef uint64 new_value = old_value - value
 *                 if new_value < ui_min_value:
 *                     raise OverflowError('overflow lower limit')             # <<<<<<<<<<<<<<
 *                 d[field.key] = new_value
 *                 return int(old_value - new_value), int(new_value)
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_overflow_lower_limit); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "c_data_model_v2.pyx":1328
 *                 cdef int64 new_value = old_value - value
 *                 if new_value < i_min_value:
 *                     raise OverflowError('overflow lower limit')             # <<<<<<<<<<<<<<
 *                 d[field.key] = new_value
 *                 return int(old_value - new_value), int(new_value)
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_overflow_lower_limit); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 1328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "c_data_model_v2.pyx":1338
 *             cdef double new_value = old_value - value
 *             if new_value < f_min_value:
 *                 raise OverflowError('overflow lower limit')             # <<<<<<<<<<<<<<
 *             d[field.key] = new_value
 *             return old_value - new_value, new_value
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_overflow_lower_limit); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "c_data_model_v2.pyx":1313
 *     if field.type_name in _int_types:
 *         if field.type_name in _unsigned_int_types:
 *             def _sub(object self, object value):             # <<<<<<<<<<<<<<
 *                 cdef dict d = self.__dict__
 *                 cdef uint64 old_value = d.get(field.key, 0)
 */
  __pyx_tuple__34 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_value, __pyx_n_s_d, __pyx_n_s_old_value, __pyx_n_s_new_value); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 1313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_n_s_sub, 1313, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 1313, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1323
 *             return _sub
 *         else:
 *             def _sub(object self, object value):             # <<<<<<<<<<<<<<
 *                 cdef dict d = self.__dict__
 *                 cdef int64 old_value = d.get(field.key, 0)
 */
  __pyx_tuple__36 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_value, __pyx_n_s_d, __pyx_n_s_old_value, __pyx_n_s_new_value); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 1323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_n_s_sub, 1323, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 1323, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1333
 *             return _sub
 *     elif field.type_name in _float_types:
 *         def _sub(object self, object value):             # <<<<<<<<<<<<<<
 *             cdef dict d = self.__dict__
 *             cdef double old_value = d.get(field.key, 0.0)
 */
  __pyx_tuple__38 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_value, __pyx_n_s_d, __pyx_n_s_old_value, __pyx_n_s_new_value); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 1333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_n_s_sub, 1333, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 1333, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1352
 * cdef object make_signed_sub_func(Field field):
 *     if field.type_name in _int_types:
 *         def _sub(object self, object _value):             # <<<<<<<<<<<<<<
 *             cdef dict d = self.__dict__
 *             cdef int64 old_value = d.get(field.key, 0)
 */
  __pyx_tuple__40 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_value_2, __pyx_n_s_d, __pyx_n_s_old_value, __pyx_n_s_value, __pyx_n_s_new_value); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 1352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_n_s_sub, 1352, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 1352, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1361
 *         return _sub
 *     elif field.type_name in _float_types:
 *         def _sub(object self, object _value):             # <<<<<<<<<<<<<<
 *             cdef dict d = self.__dict__
 *             cdef double value = _value
 */
  __pyx_tuple__42 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_value_2, __pyx_n_s_d, __pyx_n_s_value, __pyx_n_s_old_value, __pyx_n_s_new_value); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 1361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_n_s_sub, 1361, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 1361, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1374
 * 
 * cdef object make_container_fget(Field field):
 *     def fget(object self):             # <<<<<<<<<<<<<<
 *         cdef dict self_dict = self.__dict__
 *         return self_dict.setdefault(field.key, _new_container(field))
 */
  __pyx_tuple__44 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_self_dict); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 1374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_n_s_fget, 1374, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 1374, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1381
 * 
 * cdef object make_container_fset(Field field):
 *     def fset(object self, object value):             # <<<<<<<<<<<<<<
 *         cdef dict self_dict = self.__dict__
 *         cdef DataModel dm_self
 */
  __pyx_tuple__46 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_value, __pyx_n_s_self_dict, __pyx_n_s_dm_self, __pyx_n_s_container, __pyx_n_s_container_class); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 1381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_n_s_fset, 1381, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 1381, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1401
 * cdef object make_container_fdel(Field field):
 *     def fdel(object self):
 *         raise OperateError('cannot del a container field')             # <<<<<<<<<<<<<<
 *     return fdel
 * 
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_s_cannot_del_a_container_field); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "c_data_model_v2.pyx":1400
 * 
 * cdef object make_container_fdel(Field field):
 *     def fdel(object self):             # <<<<<<<<<<<<<<
 *         raise OperateError('cannot del a container field')
 *     return fdel
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 1400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_n_s_fdel, 1400, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 1400, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1433
 * 
 *         for name, _field in attrs.iteritems():
 *             if name.startswith('__'):             # <<<<<<<<<<<<<<
 *                 continue
 *             if not isinstance(_field, Field):
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_n_s__51); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 1433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "cfunc.to_py":65
 * @cname("__Pyx_CFunc_bint____Field___to_py")
 * cdef object __Pyx_CFunc_bint____Field___to_py(bint (*f)(Field) except *):
 *     def wrap(Field field):             # <<<<<<<<<<<<<<
 *         """wrap(field: 'Field') -> bool"""
 *         return f(field)
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_n_s_field); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_wrap, 65, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(1, 65, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1748
 * 
 * 
 * def ArrayField(*arg, **kwarg):             # <<<<<<<<<<<<<<
 *     kwarg['array'] = True
 *     return Field(*arg, **kwarg)
 */
  __pyx_tuple__57 = PyTuple_Pack(2, __pyx_n_s_arg, __pyx_n_s_kwarg); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 1748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_n_s_ArrayField, 1748, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 1748, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1753
 * 
 * 
 * def MapField(*arg, **kwarg):             # <<<<<<<<<<<<<<
 *     kwarg['map'] = True
 *     return Field(*arg, **kwarg)
 */
  __pyx_tuple__59 = PyTuple_Pack(2, __pyx_n_s_arg, __pyx_n_s_kwarg); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 1753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_n_s_MapField, 1753, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 1753, __pyx_L1_error)

  /* "c_data_model_v2.pyx":1758
 * 
 * 
 * def IdMapField(*arg, **kwarg):             # <<<<<<<<<<<<<<
 *     kwarg['id_map'] = True
 *     return Field(*arg, **kwarg)
 */
  __pyx_tuple__61 = PyTuple_Pack(2, __pyx_n_s_arg, __pyx_n_s_kwarg); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 1758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_nwork_g53_engine_neox_src_3d_e, __pyx_n_s_IdMapField, 1758, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(0, 1758, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyList_Type_pop.type = (PyObject*)&PyList_Type;
  __pyx_umethod_PySet_Type_update.type = (PyObject*)&PySet_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_30 = PyInt_FromLong(30); if (unlikely(!__pyx_int_30)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initc_data_model_v2(void); /*proto*/
PyMODINIT_FUNC initc_data_model_v2(void)
#else
PyMODINIT_FUNC PyInit_c_data_model_v2(void); /*proto*/
PyMODINIT_FUNC PyInit_c_data_model_v2(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_c_data_model_v2(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("c_data_model_v2", __pyx_methods, __pyx_k_DataModel_DataModel_packunpackp, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_c_data_model_v2) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "c_data_model_v2")) {
      if (unlikely(PyDict_SetItemString(modules, "c_data_model_v2", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  __pyx_v_15c_data_model_v2_SKIP_FROM_PACK = Py_None; Py_INCREF(Py_None);
  __pyx_v_15c_data_model_v2__default_values = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_15c_data_model_v2__value2string = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_15c_data_model_v2__string2value = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_15c_data_model_v2__int_types = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_15c_data_model_v2__unsigned_int_types = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_15c_data_model_v2__float_types = ((PyObject*)Py_None); Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_15c_data_model_v2_FieldFilter = &__pyx_vtable_15c_data_model_v2_FieldFilter;
  __pyx_vtable_15c_data_model_v2_FieldFilter.is_filted = (int (*)(struct __pyx_obj_15c_data_model_v2_FieldFilter *, struct __pyx_obj_15c_data_model_v2_Field *))__pyx_f_15c_data_model_v2_11FieldFilter_is_filted;
  if (PyType_Ready(&__pyx_type_15c_data_model_v2_FieldFilter) < 0) __PYX_ERR(0, 225, __pyx_L1_error)
  __pyx_type_15c_data_model_v2_FieldFilter.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_15c_data_model_v2_FieldFilter.tp_dict, __pyx_vtabptr_15c_data_model_v2_FieldFilter) < 0) __PYX_ERR(0, 225, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "FieldFilter", (PyObject *)&__pyx_type_15c_data_model_v2_FieldFilter) < 0) __PYX_ERR(0, 225, __pyx_L1_error)
  __pyx_ptype_15c_data_model_v2_FieldFilter = &__pyx_type_15c_data_model_v2_FieldFilter;
  __pyx_vtabptr_15c_data_model_v2_DecodeContext = &__pyx_vtable_15c_data_model_v2_DecodeContext;
  __pyx_vtable_15c_data_model_v2_DecodeContext.set_mode = (void (*)(struct __pyx_obj_15c_data_model_v2_DecodeContext *, PyObject *))__pyx_f_15c_data_model_v2_13DecodeContext_set_mode;
  __pyx_vtable_15c_data_model_v2_DecodeContext.add_known_object = (void (*)(struct __pyx_obj_15c_data_model_v2_DecodeContext *, PyObject *, PyObject *))__pyx_f_15c_data_model_v2_13DecodeContext_add_known_object;
  __pyx_vtable_15c_data_model_v2_DecodeContext.add_unsolved_ref = (void (*)(struct __pyx_obj_15c_data_model_v2_DecodeContext *, PyObject *))__pyx_f_15c_data_model_v2_13DecodeContext_add_unsolved_ref;
  __pyx_vtable_15c_data_model_v2_DecodeContext.resolve_ref = (void (*)(struct __pyx_obj_15c_data_model_v2_DecodeContext *))__pyx_f_15c_data_model_v2_13DecodeContext_resolve_ref;
  if (PyType_Ready(&__pyx_type_15c_data_model_v2_DecodeContext) < 0) __PYX_ERR(0, 713, __pyx_L1_error)
  __pyx_type_15c_data_model_v2_DecodeContext.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_15c_data_model_v2_DecodeContext.tp_dict, __pyx_vtabptr_15c_data_model_v2_DecodeContext) < 0) __PYX_ERR(0, 713, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "DecodeContext", (PyObject *)&__pyx_type_15c_data_model_v2_DecodeContext) < 0) __PYX_ERR(0, 713, __pyx_L1_error)
  __pyx_ptype_15c_data_model_v2_DecodeContext = &__pyx_type_15c_data_model_v2_DecodeContext;
  __pyx_vtabptr_15c_data_model_v2_Array = &__pyx_vtable_15c_data_model_v2_Array;
  __pyx_vtable_15c_data_model_v2_Array._has_changed = (int (*)(struct __pyx_obj_15c_data_model_v2_Array *, int __pyx_skip_dispatch, struct __pyx_opt_args_15c_data_model_v2_5Array__has_changed *__pyx_optional_args))__pyx_f_15c_data_model_v2_5Array__has_changed;
  __pyx_vtable_15c_data_model_v2_Array._clear_changed = (void (*)(struct __pyx_obj_15c_data_model_v2_Array *, struct __pyx_opt_args_15c_data_model_v2_5Array__clear_changed *__pyx_optional_args))__pyx_f_15c_data_model_v2_5Array__clear_changed;
  __pyx_vtable_15c_data_model_v2_Array._broadcast_changed = (void (*)(struct __pyx_obj_15c_data_model_v2_Array *, int))__pyx_f_15c_data_model_v2_5Array__broadcast_changed;
  __pyx_vtable_15c_data_model_v2_Array._copy_from = (void (*)(struct __pyx_obj_15c_data_model_v2_Array *, PyObject *))__pyx_f_15c_data_model_v2_5Array__copy_from;
  __pyx_vtable_15c_data_model_v2_Array._append = (void (*)(struct __pyx_obj_15c_data_model_v2_Array *, PyObject *, int __pyx_skip_dispatch))__pyx_f_15c_data_model_v2_5Array__append;
  __pyx_type_15c_data_model_v2_Array.tp_base = (&PyList_Type);
  if (PyType_Ready(&__pyx_type_15c_data_model_v2_Array) < 0) __PYX_ERR(0, 774, __pyx_L1_error)
  __pyx_type_15c_data_model_v2_Array.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_15c_data_model_v2_Array.tp_dict, __pyx_vtabptr_15c_data_model_v2_Array) < 0) __PYX_ERR(0, 774, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Array", (PyObject *)&__pyx_type_15c_data_model_v2_Array) < 0) __PYX_ERR(0, 774, __pyx_L1_error)
  __pyx_ptype_15c_data_model_v2_Array = &__pyx_type_15c_data_model_v2_Array;
  __pyx_vtabptr_15c_data_model_v2_Map = &__pyx_vtable_15c_data_model_v2_Map;
  __pyx_vtable_15c_data_model_v2_Map._has_changed = (int (*)(struct __pyx_obj_15c_data_model_v2_Map *, int __pyx_skip_dispatch, struct __pyx_opt_args_15c_data_model_v2_3Map__has_changed *__pyx_optional_args))__pyx_f_15c_data_model_v2_3Map__has_changed;
  __pyx_vtable_15c_data_model_v2_Map.get_removed_set = (PyObject *(*)(struct __pyx_obj_15c_data_model_v2_Map *))__pyx_f_15c_data_model_v2_3Map_get_removed_set;
  __pyx_vtable_15c_data_model_v2_Map._clear_changed = (void (*)(struct __pyx_obj_15c_data_model_v2_Map *, struct __pyx_opt_args_15c_data_model_v2_3Map__clear_changed *__pyx_optional_args))__pyx_f_15c_data_model_v2_3Map__clear_changed;
  __pyx_vtable_15c_data_model_v2_Map._broadcast_changed = (void (*)(struct __pyx_obj_15c_data_model_v2_Map *, int))__pyx_f_15c_data_model_v2_3Map__broadcast_changed;
  __pyx_vtable_15c_data_model_v2_Map._raw_setitem = (void (*)(struct __pyx_obj_15c_data_model_v2_Map *, PyObject *, PyObject *))__pyx_f_15c_data_model_v2_3Map__raw_setitem;
  __pyx_vtable_15c_data_model_v2_Map._copy_from = (void (*)(struct __pyx_obj_15c_data_model_v2_Map *, PyObject *))__pyx_f_15c_data_model_v2_3Map__copy_from;
  __pyx_type_15c_data_model_v2_Map.tp_base = (&PyDict_Type);
  if (PyType_Ready(&__pyx_type_15c_data_model_v2_Map) < 0) __PYX_ERR(0, 879, __pyx_L1_error)
  __pyx_type_15c_data_model_v2_Map.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_15c_data_model_v2_Map.tp_dict, __pyx_vtabptr_15c_data_model_v2_Map) < 0) __PYX_ERR(0, 879, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Map", (PyObject *)&__pyx_type_15c_data_model_v2_Map) < 0) __PYX_ERR(0, 879, __pyx_L1_error)
  __pyx_ptype_15c_data_model_v2_Map = &__pyx_type_15c_data_model_v2_Map;
  __pyx_vtabptr_15c_data_model_v2_IdMap = &__pyx_vtable_15c_data_model_v2_IdMap;
  __pyx_vtable_15c_data_model_v2_IdMap.__pyx_base = *__pyx_vtabptr_15c_data_model_v2_Map;
  __pyx_type_15c_data_model_v2_IdMap.tp_base = __pyx_ptype_15c_data_model_v2_Map;
  if (PyType_Ready(&__pyx_type_15c_data_model_v2_IdMap) < 0) __PYX_ERR(0, 970, __pyx_L1_error)
  __pyx_type_15c_data_model_v2_IdMap.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_15c_data_model_v2_IdMap.tp_dict, __pyx_vtabptr_15c_data_model_v2_IdMap) < 0) __PYX_ERR(0, 970, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "IdMap", (PyObject *)&__pyx_type_15c_data_model_v2_IdMap) < 0) __PYX_ERR(0, 970, __pyx_L1_error)
  __pyx_ptype_15c_data_model_v2_IdMap = &__pyx_type_15c_data_model_v2_IdMap;
  __pyx_vtabptr_15c_data_model_v2_Field = &__pyx_vtable_15c_data_model_v2_Field;
  __pyx_vtable_15c_data_model_v2_Field.is_data_model_type = (int (*)(struct __pyx_obj_15c_data_model_v2_Field *))__pyx_f_15c_data_model_v2_5Field_is_data_model_type;
  __pyx_vtable_15c_data_model_v2_Field.is_container = (int (*)(struct __pyx_obj_15c_data_model_v2_Field *))__pyx_f_15c_data_model_v2_5Field_is_container;
  if (PyType_Ready(&__pyx_type_15c_data_model_v2_Field) < 0) __PYX_ERR(0, 1019, __pyx_L1_error)
  __pyx_type_15c_data_model_v2_Field.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_15c_data_model_v2_Field.tp_dict, __pyx_vtabptr_15c_data_model_v2_Field) < 0) __PYX_ERR(0, 1019, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Field", (PyObject *)&__pyx_type_15c_data_model_v2_Field) < 0) __PYX_ERR(0, 1019, __pyx_L1_error)
  __pyx_ptype_15c_data_model_v2_Field = &__pyx_type_15c_data_model_v2_Field;
  if (PyType_Ready(&__pyx_type_15c_data_model_v2_FieldsDefine) < 0) __PYX_ERR(0, 1186, __pyx_L1_error)
  __pyx_type_15c_data_model_v2_FieldsDefine.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "FieldsDefine", (PyObject *)&__pyx_type_15c_data_model_v2_FieldsDefine) < 0) __PYX_ERR(0, 1186, __pyx_L1_error)
  __pyx_ptype_15c_data_model_v2_FieldsDefine = &__pyx_type_15c_data_model_v2_FieldsDefine;
  if (PyType_Ready(&__pyx_type_15c_data_model_v2_DataModelProtocol) < 0) __PYX_ERR(0, 1405, __pyx_L1_error)
  __pyx_type_15c_data_model_v2_DataModelProtocol.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "DataModelProtocol", (PyObject *)&__pyx_type_15c_data_model_v2_DataModelProtocol) < 0) __PYX_ERR(0, 1405, __pyx_L1_error)
  __pyx_ptype_15c_data_model_v2_DataModelProtocol = &__pyx_type_15c_data_model_v2_DataModelProtocol;
  __pyx_type_15c_data_model_v2_MetaDataModel.tp_base = (&PyType_Type);
  if (PyType_Ready(&__pyx_type_15c_data_model_v2_MetaDataModel) < 0) __PYX_ERR(0, 1415, __pyx_L1_error)
  __pyx_type_15c_data_model_v2_MetaDataModel.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "MetaDataModel", (PyObject *)&__pyx_type_15c_data_model_v2_MetaDataModel) < 0) __PYX_ERR(0, 1415, __pyx_L1_error)
  __pyx_ptype_15c_data_model_v2_MetaDataModel = &__pyx_type_15c_data_model_v2_MetaDataModel;
  __pyx_vtabptr_15c_data_model_v2_DataModel = &__pyx_vtable_15c_data_model_v2_DataModel;
  __pyx_vtable_15c_data_model_v2_DataModel._get_protocol = (struct __pyx_obj_15c_data_model_v2_DataModelProtocol *(*)(struct __pyx_obj_15c_data_model_v2_DataModel *, int __pyx_skip_dispatch))__pyx_f_15c_data_model_v2_9DataModel__get_protocol;
  __pyx_vtable_15c_data_model_v2_DataModel._get_fields_define = (struct __pyx_obj_15c_data_model_v2_FieldsDefine *(*)(struct __pyx_obj_15c_data_model_v2_DataModel *, int __pyx_skip_dispatch))__pyx_f_15c_data_model_v2_9DataModel__get_fields_define;
  __pyx_vtable_15c_data_model_v2_DataModel._set_data = (void (*)(struct __pyx_obj_15c_data_model_v2_DataModel *, PyObject *))__pyx_f_15c_data_model_v2_9DataModel__set_data;
  __pyx_vtable_15c_data_model_v2_DataModel._clear_field_changed = (void (*)(struct __pyx_obj_15c_data_model_v2_DataModel *, PyObject *, struct __pyx_obj_15c_data_model_v2_Field *, int, struct __pyx_opt_args_15c_data_model_v2_9DataModel__clear_field_changed *__pyx_optional_args))__pyx_f_15c_data_model_v2_9DataModel__clear_field_changed;
  __pyx_vtable_15c_data_model_v2_DataModel._has_field_changed = (int (*)(struct __pyx_obj_15c_data_model_v2_DataModel *, struct __pyx_obj_15c_data_model_v2_Field *, PyObject *, int))__pyx_f_15c_data_model_v2_9DataModel__has_field_changed;
  __pyx_vtable_15c_data_model_v2_DataModel._clear_changed = (void (*)(struct __pyx_obj_15c_data_model_v2_DataModel *, PyObject *, int))__pyx_f_15c_data_model_v2_9DataModel__clear_changed;
  __pyx_vtable_15c_data_model_v2_DataModel._set_field_changed = (void (*)(struct __pyx_obj_15c_data_model_v2_DataModel *, struct __pyx_obj_15c_data_model_v2_Field *))__pyx_f_15c_data_model_v2_9DataModel__set_field_changed;
  __pyx_vtable_15c_data_model_v2_DataModel._set_changed = (void (*)(struct __pyx_obj_15c_data_model_v2_DataModel *, PyObject *))__pyx_f_15c_data_model_v2_9DataModel__set_changed;
  __pyx_vtable_15c_data_model_v2_DataModel._get_info_ = (PyObject *(*)(struct __pyx_obj_15c_data_model_v2_DataModel *, int))__pyx_f_15c_data_model_v2_9DataModel__get_info_;
  __pyx_vtable_15c_data_model_v2_DataModel._has_changed = (int (*)(struct __pyx_obj_15c_data_model_v2_DataModel *, int))__pyx_f_15c_data_model_v2_9DataModel__has_changed;
  __pyx_vtable_15c_data_model_v2_DataModel._short_repr_ = (PyObject *(*)(struct __pyx_obj_15c_data_model_v2_DataModel *, int __pyx_skip_dispatch))__pyx_f_15c_data_model_v2_9DataModel__short_repr_;
  __pyx_vtable_15c_data_model_v2_DataModel._long_repr_ = (PyObject *(*)(struct __pyx_obj_15c_data_model_v2_DataModel *, int __pyx_skip_dispatch))__pyx_f_15c_data_model_v2_9DataModel__long_repr_;
  if (PyType_Ready(&__pyx_type_15c_data_model_v2_DataModel) < 0) __PYX_ERR(0, 1490, __pyx_L1_error)
  __pyx_type_15c_data_model_v2_DataModel.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_15c_data_model_v2_DataModel.tp_dict, __pyx_vtabptr_15c_data_model_v2_DataModel) < 0) __PYX_ERR(0, 1490, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "DataModel", (PyObject *)&__pyx_type_15c_data_model_v2_DataModel) < 0) __PYX_ERR(0, 1490, __pyx_L1_error)
  __pyx_ptype_15c_data_model_v2_DataModel = &__pyx_type_15c_data_model_v2_DataModel;
  if (PyType_Ready(&__pyx_type_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string) < 0) __PYX_ERR(0, 247, __pyx_L1_error)
  __pyx_type_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string.tp_print = 0;
  __pyx_ptype_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string = &__pyx_type_15c_data_model_v2___pyx_scope_struct____pyx_f_15c_data_model_v2__key_encode_to_string;
  if (PyType_Ready(&__pyx_type_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string) < 0) __PYX_ERR(0, 256, __pyx_L1_error)
  __pyx_type_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string.tp_print = 0;
  __pyx_ptype_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string = &__pyx_type_15c_data_model_v2___pyx_scope_struct_1___pyx_f_15c_data_model_v2__key_decode_from_string;
  if (PyType_Ready(&__pyx_type_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget) < 0) __PYX_ERR(0, 401, __pyx_L1_error)
  __pyx_type_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget.tp_print = 0;
  __pyx_ptype_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget = &__pyx_type_15c_data_model_v2___pyx_scope_struct_2___pyx_f_15c_data_model_v2_make_fget;
  if (PyType_Ready(&__pyx_type_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset) < 0) __PYX_ERR(0, 407, __pyx_L1_error)
  __pyx_type_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset.tp_print = 0;
  __pyx_ptype_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset = &__pyx_type_15c_data_model_v2___pyx_scope_struct_3___pyx_f_15c_data_model_v2_make_fset;
  if (PyType_Ready(&__pyx_type_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel) < 0) __PYX_ERR(0, 418, __pyx_L1_error)
  __pyx_type_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel.tp_print = 0;
  __pyx_ptype_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel = &__pyx_type_15c_data_model_v2___pyx_scope_struct_4___pyx_f_15c_data_model_v2_make_fdel;
  if (PyType_Ready(&__pyx_type_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func) < 0) __PYX_ERR(0, 1254, __pyx_L1_error)
  __pyx_type_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func.tp_print = 0;
  __pyx_ptype_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func = &__pyx_type_15c_data_model_v2___pyx_scope_struct_5___pyx_f_15c_data_model_v2_make_get_func;
  if (PyType_Ready(&__pyx_type_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func) < 0) __PYX_ERR(0, 1272, __pyx_L1_error)
  __pyx_type_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func.tp_print = 0;
  __pyx_ptype_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func = &__pyx_type_15c_data_model_v2___pyx_scope_struct_6___pyx_f_15c_data_model_v2_make_add_func;
  if (PyType_Ready(&__pyx_type_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value) < 0) __PYX_ERR(0, 1302, __pyx_L1_error)
  __pyx_type_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value.tp_print = 0;
  __pyx_ptype_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value = &__pyx_type_15c_data_model_v2___pyx_scope_struct_7___pyx_f_15c_data_model_v2_make_sub_func_with_min_value;
  if (PyType_Ready(&__pyx_type_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func) < 0) __PYX_ERR(0, 1350, __pyx_L1_error)
  __pyx_type_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func.tp_print = 0;
  __pyx_ptype_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func = &__pyx_type_15c_data_model_v2___pyx_scope_struct_8___pyx_f_15c_data_model_v2_make_signed_sub_func;
  if (PyType_Ready(&__pyx_type_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget) < 0) __PYX_ERR(0, 1373, __pyx_L1_error)
  __pyx_type_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget.tp_print = 0;
  __pyx_ptype_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget = &__pyx_type_15c_data_model_v2___pyx_scope_struct_9___pyx_f_15c_data_model_v2_make_container_fget;
  if (PyType_Ready(&__pyx_type_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset) < 0) __PYX_ERR(0, 1380, __pyx_L1_error)
  __pyx_type_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset.tp_print = 0;
  __pyx_ptype_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset = &__pyx_type_15c_data_model_v2___pyx_scope_struct_10___pyx_f_15c_data_model_v2_make_container_fset;
  if (PyType_Ready(&__pyx_scope_struct____Pyx_CFunc_bint____Field___to_py) < 0) __PYX_ERR(1, 64, __pyx_L1_error)
  __pyx_scope_struct____Pyx_CFunc_bint____Field___to_py.tp_print = 0;
  __pyx_ptype___pyx_scope_struct____Pyx_CFunc_bint____Field___to_py = &__pyx_scope_struct____Pyx_CFunc_bint____Field___to_py;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(2, 9, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "c_data_model_v2.pyx":136
 * 
 * 
 * class DataModelError(Exception):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __Pyx_GIVEREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_DataModelError, __pyx_n_s_DataModelError, (PyObject *) NULL, __pyx_n_s_c_data_model_v2, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_DataModelError, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DataModelError, __pyx_t_4) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":139
 *     pass
 * 
 * class OperateError(DataModelError):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_DataModelError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_OperateError, __pyx_n_s_OperateError, (PyObject *) NULL, __pyx_n_s_c_data_model_v2, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_OperateError, __pyx_t_2, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OperateError, __pyx_t_4) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":142
 *     pass
 * 
 * class DefineError(DataModelError):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DataModelError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_DefineError, __pyx_n_s_DefineError, (PyObject *) NULL, __pyx_n_s_c_data_model_v2, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_DefineError, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DefineError, __pyx_t_4) < 0) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":145
 *     pass
 * 
 * class DuplicateIndexError(DataModelError):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_DataModelError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_DuplicateIndexError, __pyx_n_s_DuplicateIndexError, (PyObject *) NULL, __pyx_n_s_c_data_model_v2, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_DuplicateIndexError, __pyx_t_2, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DuplicateIndexError, __pyx_t_4) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":148
 *     pass
 * 
 * class DuplicateNameError(DataModelError):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DataModelError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_DuplicateNameError, __pyx_n_s_DuplicateNameError, (PyObject *) NULL, __pyx_n_s_c_data_model_v2, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_DuplicateNameError, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DuplicateNameError, __pyx_t_4) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":151
 *     pass
 * 
 * class NoFieldError(DataModelError):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_DataModelError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_NoFieldError, __pyx_n_s_NoFieldError, (PyObject *) NULL, __pyx_n_s_c_data_model_v2, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_NoFieldError, __pyx_t_2, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NoFieldError, __pyx_t_4) < 0) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":154
 *     pass
 * 
 * class PackError(DataModelError):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DataModelError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PackError, __pyx_n_s_PackError, (PyObject *) NULL, __pyx_n_s_c_data_model_v2, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PackError, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PackError, __pyx_t_4) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":157
 *     pass
 * 
 * class UnpackError(DataModelError):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_DataModelError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_UnpackError, __pyx_n_s_UnpackError, (PyObject *) NULL, __pyx_n_s_c_data_model_v2, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_UnpackError, __pyx_t_2, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UnpackError, __pyx_t_4) < 0) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_data_model_v2.pyx":160
 *     pass
 * 
 * class SkipFromPack(DataModelError):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DataModelError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_SkipFromPack, __pyx_n_s_SkipFromPack, (PyObject *) NULL, __pyx_n_s_c_data_model_v2, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_SkipFromPack, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SkipFromPack, __pyx_t_4) < 0) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":163
 *     pass
 * 
 * cdef object SKIP_FROM_PACK = SkipFromPack()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_SkipFromPack); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 163, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_XGOTREF(__pyx_v_15c_data_model_v2_SKIP_FROM_PACK);
  __Pyx_DECREF_SET(__pyx_v_15c_data_model_v2_SKIP_FROM_PACK, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":168
 * # pylint: disable=bad-whitespace
 * cdef dict _default_values = {
 *     'int8'   : 0,             # <<<<<<<<<<<<<<
 *     'uint8'  : 0,
 *     'int16'  : 0,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_int8, __pyx_int_0) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_uint8, __pyx_int_0) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_int16, __pyx_int_0) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_uint16, __pyx_int_0) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_int32, __pyx_int_0) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_uint32, __pyx_int_0) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_int64, __pyx_int_0) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_uint64, __pyx_int_0) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_float, __pyx_float_0_0) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_double, __pyx_float_0_0) < 0) __PYX_ERR(0, 168, __pyx_L1_error)

  /* "c_data_model_v2.pyx":178
 *     'float'  : 0.0,
 *     'double' : 0.0,
 *     'bool'   : False,             # <<<<<<<<<<<<<<
 *     'string' : '',
 * }
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_bool, Py_False) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_string, __pyx_kp_s__56) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_XGOTREF(__pyx_v_15c_data_model_v2__default_values);
  __Pyx_DECREF_SET(__pyx_v_15c_data_model_v2__default_values, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":183
 * 
 * cdef dict _value2string = {
 *     'int8'   : str,             # <<<<<<<<<<<<<<
 *     'uint8'  : str,
 *     'int16'  : str,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_int8, ((PyObject *)(&PyString_Type))) < 0) __PYX_ERR(0, 183, __pyx_L1_error)

  /* "c_data_model_v2.pyx":184
 * cdef dict _value2string = {
 *     'int8'   : str,
 *     'uint8'  : str,             # <<<<<<<<<<<<<<
 *     'int16'  : str,
 *     'uint16' : str,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_uint8, ((PyObject *)(&PyString_Type))) < 0) __PYX_ERR(0, 183, __pyx_L1_error)

  /* "c_data_model_v2.pyx":185
 *     'int8'   : str,
 *     'uint8'  : str,
 *     'int16'  : str,             # <<<<<<<<<<<<<<
 *     'uint16' : str,
 *     'int32'  : str,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_int16, ((PyObject *)(&PyString_Type))) < 0) __PYX_ERR(0, 183, __pyx_L1_error)

  /* "c_data_model_v2.pyx":186
 *     'uint8'  : str,
 *     'int16'  : str,
 *     'uint16' : str,             # <<<<<<<<<<<<<<
 *     'int32'  : str,
 *     'uint32' : str,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_uint16, ((PyObject *)(&PyString_Type))) < 0) __PYX_ERR(0, 183, __pyx_L1_error)

  /* "c_data_model_v2.pyx":187
 *     'int16'  : str,
 *     'uint16' : str,
 *     'int32'  : str,             # <<<<<<<<<<<<<<
 *     'uint32' : str,
 *     'int64'  : str,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_int32, ((PyObject *)(&PyString_Type))) < 0) __PYX_ERR(0, 183, __pyx_L1_error)

  /* "c_data_model_v2.pyx":188
 *     'uint16' : str,
 *     'int32'  : str,
 *     'uint32' : str,             # <<<<<<<<<<<<<<
 *     'int64'  : str,
 *     'uint64' : str,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_uint32, ((PyObject *)(&PyString_Type))) < 0) __PYX_ERR(0, 183, __pyx_L1_error)

  /* "c_data_model_v2.pyx":189
 *     'int32'  : str,
 *     'uint32' : str,
 *     'int64'  : str,             # <<<<<<<<<<<<<<
 *     'uint64' : str,
 *     'float'  : str,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_int64, ((PyObject *)(&PyString_Type))) < 0) __PYX_ERR(0, 183, __pyx_L1_error)

  /* "c_data_model_v2.pyx":190
 *     'uint32' : str,
 *     'int64'  : str,
 *     'uint64' : str,             # <<<<<<<<<<<<<<
 *     'float'  : str,
 *     'double' : str,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_uint64, ((PyObject *)(&PyString_Type))) < 0) __PYX_ERR(0, 183, __pyx_L1_error)

  /* "c_data_model_v2.pyx":191
 *     'int64'  : str,
 *     'uint64' : str,
 *     'float'  : str,             # <<<<<<<<<<<<<<
 *     'double' : str,
 *     'bool'   : str,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_float, ((PyObject *)(&PyString_Type))) < 0) __PYX_ERR(0, 183, __pyx_L1_error)

  /* "c_data_model_v2.pyx":192
 *     'uint64' : str,
 *     'float'  : str,
 *     'double' : str,             # <<<<<<<<<<<<<<
 *     'bool'   : str,
 *     'string' : str,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_double, ((PyObject *)(&PyString_Type))) < 0) __PYX_ERR(0, 183, __pyx_L1_error)

  /* "c_data_model_v2.pyx":193
 *     'float'  : str,
 *     'double' : str,
 *     'bool'   : str,             # <<<<<<<<<<<<<<
 *     'string' : str,
 * }
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_bool, ((PyObject *)(&PyString_Type))) < 0) __PYX_ERR(0, 183, __pyx_L1_error)

  /* "c_data_model_v2.pyx":194
 *     'double' : str,
 *     'bool'   : str,
 *     'string' : str,             # <<<<<<<<<<<<<<
 * }
 * 
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_string, ((PyObject *)(&PyString_Type))) < 0) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_XGOTREF(__pyx_v_15c_data_model_v2__value2string);
  __Pyx_DECREF_SET(__pyx_v_15c_data_model_v2__value2string, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":198
 * 
 * cdef dict _string2value = {
 *     'int8'   : int,             # <<<<<<<<<<<<<<
 *     'uint8'  : int,
 *     'int16'  : int,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_int8, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 198, __pyx_L1_error)

  /* "c_data_model_v2.pyx":199
 * cdef dict _string2value = {
 *     'int8'   : int,
 *     'uint8'  : int,             # <<<<<<<<<<<<<<
 *     'int16'  : int,
 *     'uint16' : int,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_uint8, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 198, __pyx_L1_error)

  /* "c_data_model_v2.pyx":200
 *     'int8'   : int,
 *     'uint8'  : int,
 *     'int16'  : int,             # <<<<<<<<<<<<<<
 *     'uint16' : int,
 *     'int32'  : int,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_int16, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 198, __pyx_L1_error)

  /* "c_data_model_v2.pyx":201
 *     'uint8'  : int,
 *     'int16'  : int,
 *     'uint16' : int,             # <<<<<<<<<<<<<<
 *     'int32'  : int,
 *     'uint32' : int,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_uint16, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 198, __pyx_L1_error)

  /* "c_data_model_v2.pyx":202
 *     'int16'  : int,
 *     'uint16' : int,
 *     'int32'  : int,             # <<<<<<<<<<<<<<
 *     'uint32' : int,
 *     'int64'  : int,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_int32, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 198, __pyx_L1_error)

  /* "c_data_model_v2.pyx":203
 *     'uint16' : int,
 *     'int32'  : int,
 *     'uint32' : int,             # <<<<<<<<<<<<<<
 *     'int64'  : int,
 *     'uint64' : int,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_uint32, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 198, __pyx_L1_error)

  /* "c_data_model_v2.pyx":204
 *     'int32'  : int,
 *     'uint32' : int,
 *     'int64'  : int,             # <<<<<<<<<<<<<<
 *     'uint64' : int,
 *     'float'  : float,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_int64, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 198, __pyx_L1_error)

  /* "c_data_model_v2.pyx":205
 *     'uint32' : int,
 *     'int64'  : int,
 *     'uint64' : int,             # <<<<<<<<<<<<<<
 *     'float'  : float,
 *     'double' : float,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_uint64, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 198, __pyx_L1_error)

  /* "c_data_model_v2.pyx":206
 *     'int64'  : int,
 *     'uint64' : int,
 *     'float'  : float,             # <<<<<<<<<<<<<<
 *     'double' : float,
 *     'bool'   : bool,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_float, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(0, 198, __pyx_L1_error)

  /* "c_data_model_v2.pyx":207
 *     'uint64' : int,
 *     'float'  : float,
 *     'double' : float,             # <<<<<<<<<<<<<<
 *     'bool'   : bool,
 *     'string' : str,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_double, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(0, 198, __pyx_L1_error)

  /* "c_data_model_v2.pyx":208
 *     'float'  : float,
 *     'double' : float,
 *     'bool'   : bool,             # <<<<<<<<<<<<<<
 *     'string' : str,
 * }
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_bool, ((PyObject*)&PyBool_Type)) < 0) __PYX_ERR(0, 198, __pyx_L1_error)

  /* "c_data_model_v2.pyx":209
 *     'double' : float,
 *     'bool'   : bool,
 *     'string' : str,             # <<<<<<<<<<<<<<
 * }
 * 
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_string, ((PyObject *)(&PyString_Type))) < 0) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_XGOTREF(__pyx_v_15c_data_model_v2__string2value);
  __Pyx_DECREF_SET(__pyx_v_15c_data_model_v2__string2value, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":212
 * }
 * 
 * cdef set _int_types = set(('int8', 'int16', 'int32', 'int64', 'uint8', 'uint16', 'uint32', 'uint64'))             # <<<<<<<<<<<<<<
 * 
 * cdef set _unsigned_int_types = set(('uint8', 'uint16', 'uint32', 'uint64'))
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PySet_Add(__pyx_t_1, __pyx_n_s_int8) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_int16) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_int32) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_int64) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_uint8) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_uint16) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_uint32) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_uint64) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_XGOTREF(__pyx_v_15c_data_model_v2__int_types);
  __Pyx_DECREF_SET(__pyx_v_15c_data_model_v2__int_types, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":214
 * cdef set _int_types = set(('int8', 'int16', 'int32', 'int64', 'uint8', 'uint16', 'uint32', 'uint64'))
 * 
 * cdef set _unsigned_int_types = set(('uint8', 'uint16', 'uint32', 'uint64'))             # <<<<<<<<<<<<<<
 * 
 * cdef set _float_types = set(('float', 'double'))
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PySet_Add(__pyx_t_1, __pyx_n_s_uint8) < 0) __PYX_ERR(0, 214, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_uint16) < 0) __PYX_ERR(0, 214, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_uint32) < 0) __PYX_ERR(0, 214, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_uint64) < 0) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_XGOTREF(__pyx_v_15c_data_model_v2__unsigned_int_types);
  __Pyx_DECREF_SET(__pyx_v_15c_data_model_v2__unsigned_int_types, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":216
 * cdef set _unsigned_int_types = set(('uint8', 'uint16', 'uint32', 'uint64'))
 * 
 * cdef set _float_types = set(('float', 'double'))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PySet_Add(__pyx_t_1, __pyx_n_s_float) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_double) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_XGOTREF(__pyx_v_15c_data_model_v2__float_types);
  __Pyx_DECREF_SET(__pyx_v_15c_data_model_v2__float_types, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1748
 * 
 * 
 * def ArrayField(*arg, **kwarg):             # <<<<<<<<<<<<<<
 *     kwarg['array'] = True
 *     return Field(*arg, **kwarg)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_15c_data_model_v2_1ArrayField, NULL, __pyx_n_s_c_data_model_v2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ArrayField, __pyx_t_1) < 0) __PYX_ERR(0, 1748, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1753
 * 
 * 
 * def MapField(*arg, **kwarg):             # <<<<<<<<<<<<<<
 *     kwarg['map'] = True
 *     return Field(*arg, **kwarg)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_15c_data_model_v2_3MapField, NULL, __pyx_n_s_c_data_model_v2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MapField, __pyx_t_1) < 0) __PYX_ERR(0, 1753, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1758
 * 
 * 
 * def IdMapField(*arg, **kwarg):             # <<<<<<<<<<<<<<
 *     kwarg['id_map'] = True
 *     return Field(*arg, **kwarg)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_15c_data_model_v2_5IdMapField, NULL, __pyx_n_s_c_data_model_v2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IdMapField, __pyx_t_1) < 0) __PYX_ERR(0, 1758, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_data_model_v2.pyx":1
 * # encoding=utf-8             # <<<<<<<<<<<<<<
 * # cython: embedsignature=True
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cfunc.to_py":64
 * 
 * @cname("__Pyx_CFunc_bint____Field___to_py")
 * cdef object __Pyx_CFunc_bint____Field___to_py(bint (*f)(Field) except *):             # <<<<<<<<<<<<<<
 *     def wrap(Field field):
 *         """wrap(field: 'Field') -> bool"""
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init c_data_model_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init c_data_model_v2");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(PyObject_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* PySet_Update */
static CYTHON_INLINE int __Pyx_PySet_Update(PyObject* set, PyObject* it) {
    PyObject *retval;
    #if CYTHON_USE_TYPE_SLOTS && !CYTHON_COMPILING_IN_PYPY
    if (PyAnySet_Check(it)) {
        if (PySet_GET_SIZE(it) == 0)
            return 0;
        retval = PySet_Type.tp_as_number->nb_inplace_or(set, it);
        if (likely(retval == set)) {
            Py_DECREF(retval);
            return 0;
        }
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    #endif
    retval = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PySet_Type_update, set, it);
    if (unlikely(!retval)) return -1;
    Py_DECREF(retval);
    return 0;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    PyObject *result;
    int flags;
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* None */
  static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* dict_getitem_default */
  static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    } else {
        if (default_value == Py_None)
            default_value = NULL;
        value = PyObject_CallMethodObjArgs(
            d, __pyx_n_s_get, key, default_value, NULL);
    }
#endif
    return value;
}

/* FetchCommonType */
  static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
  static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* PyObjectCallNoArg */
      #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* IterFinish */
        static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectCallMethod0 */
        static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *function = PyMethod_GET_FUNCTION(method);
            result = __Pyx_PyObject_CallOneArg(function, self);
            Py_DECREF(method);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
        static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
        static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
        static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseNoneIterError */
        static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
        static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
        static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                             int is_tuple, int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    if (!is_tuple && unlikely(!PyTuple_Check(tuple))) {
        iternextfunc iternext;
        iter = PyObject_GetIter(tuple);
        if (unlikely(!iter)) goto bad;
        if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
        iternext = Py_TYPE(iter)->tp_iternext;
        value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
        value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
        if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
        Py_DECREF(iter);
    } else {
        if (!has_known_size && unlikely(PyTuple_GET_SIZE(tuple) != 2)) {
            __Pyx_UnpackTupleError(tuple, 2);
            goto bad;
        }
#if CYTHON_COMPILING_IN_PYPY
        value1 = PySequence_ITEM(tuple, 0);
        if (unlikely(!value1)) goto bad;
        value2 = PySequence_ITEM(tuple, 1);
        if (unlikely(!value2)) goto bad;
#else
        value1 = PyTuple_GET_ITEM(tuple, 0);
        value2 = PyTuple_GET_ITEM(tuple, 1);
        Py_INCREF(value1);
        Py_INCREF(value2);
#endif
        if (decref_tuple) { Py_DECREF(tuple); }
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
        static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
#if !CYTHON_COMPILING_IN_PYPY
    if (is_dict) {
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#endif
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* SliceObject */
        static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* RaiseDoubleKeywords */
        static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
        static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* GetAttr */
        static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_COMPILING_IN_CPYTHON
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
        static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))
            goto bad;
        PyErr_Clear();
        r = d;
        Py_INCREF(d);
    }
    return r;
bad:
    return NULL;
}

/* ExtTypeTest */
        static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* ArgTypeTest */
        static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* RaiseException */
        #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* CallUnboundCMethod0 */
          static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* pop */
          static CYTHON_INLINE PyObject* __Pyx__PyObject_Pop(PyObject* L) {
    if (Py_TYPE(L) == &PySet_Type) {
        return PySet_Pop(L);
    }
    return __Pyx_PyObject_CallMethod0(L, __pyx_n_s_pop);
}
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE PyObject* __Pyx_PyList_Pop(PyObject* L) {
    if (likely(PyList_GET_SIZE(L) > (((PyListObject*)L)->allocated >> 1))) {
        Py_SIZE(L) -= 1;
        return PyList_GET_ITEM(L, PyList_GET_SIZE(L));
    }
    return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyList_Type_pop, L);
}
#endif

/* PyObjectCallMethod1 */
          static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* pop_index */
          static PyObject* __Pyx__PyObject_PopNewIndex(PyObject* L, PyObject* py_ix) {
    PyObject *r;
    if (unlikely(!py_ix)) return NULL;
    r = __Pyx__PyObject_PopIndex(L, py_ix);
    Py_DECREF(py_ix);
    return r;
}
static PyObject* __Pyx__PyObject_PopIndex(PyObject* L, PyObject* py_ix) {
    return __Pyx_PyObject_CallMethod1(L, __pyx_n_s_pop, py_ix);
}
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static PyObject* __Pyx__PyList_PopIndex(PyObject* L, PyObject* py_ix, Py_ssize_t ix) {
    Py_ssize_t size = PyList_GET_SIZE(L);
    if (likely(size > (((PyListObject*)L)->allocated >> 1))) {
        Py_ssize_t cix = ix;
        if (cix < 0) {
            cix += size;
        }
        if (likely(0 <= cix && cix < size)) {
            PyObject* v = PyList_GET_ITEM(L, cix);
            Py_SIZE(L) -= 1;
            size -= 1;
            memmove(&PyList_GET_ITEM(L, cix), &PyList_GET_ITEM(L, cix+1), (size_t)(size-cix)*sizeof(PyObject*));
            return v;
        }
    }
    if (py_ix == Py_None) {
        return __Pyx__PyObject_PopNewIndex(L, PyInt_FromSsize_t(ix));
    } else {
        return __Pyx__PyObject_PopIndex(L, py_ix);
    }
}
#endif

/* PyObjectCallMethod2 */
          static PyObject* __Pyx_PyObject_CallMethod2(PyObject* obj, PyObject* method_name, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) return NULL;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method)) && likely(PyMethod_GET_SELF(method))) {
        PyObject *self, *function;
        self = PyMethod_GET_SELF(method);
        function = PyMethod_GET_FUNCTION(method);
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(function)) {
            PyObject *args[3] = {self, arg1, arg2};
            result = __Pyx_PyFunction_FastCall(function, args, 3);
            goto done;
        }
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(function)) {
            PyObject *args[3] = {self, arg1, arg2};
            result = __Pyx_PyFunction_FastCall(function, args, 3);
            goto done;
        }
        #endif
        args = PyTuple_New(3);
        if (unlikely(!args)) goto done;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        Py_INCREF(function);
        Py_DECREF(method);
        method = function;
    } else
#endif
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(method)) {
        PyObject *args[2] = {arg1, arg2};
        result = __Pyx_PyFunction_FastCall(method, args, 2);
        goto done;
    } else
#endif
#if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(method)) {
        PyObject *args[2] = {arg1, arg2};
        result = __Pyx_PyCFunction_FastCall(method, args, 2);
        goto done;
    } else
#endif
    {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto done;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
    }
    result = __Pyx_PyObject_Call(method, args, NULL);
    Py_DECREF(args);
done:
    Py_DECREF(method);
    return result;
}

/* dict_setdefault */
          static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value,
                                                       CYTHON_UNUSED int is_safe_type) {
    PyObject* value;
#if PY_VERSION_HEX >= 0x030400A0
    if (1) {
        value = PyDict_SetDefault(d, key, default_value);
        if (unlikely(!value)) return NULL;
        Py_INCREF(value);
#else
    if (is_safe_type == 1 || (is_safe_type == -1 &&
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
            (PyUnicode_CheckExact(key) || PyString_CheckExact(key) || PyLong_CheckExact(key)))) {
        value = PyDict_GetItemWithError(d, key);
        if (unlikely(!value)) {
            if (unlikely(PyErr_Occurred()))
                return NULL;
            if (unlikely(PyDict_SetItem(d, key, default_value) == -1))
                return NULL;
            value = default_value;
        }
        Py_INCREF(value);
#else
            (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key) || PyLong_CheckExact(key)))) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            if (unlikely(PyDict_SetItem(d, key, default_value) == -1))
                return NULL;
            value = default_value;
        }
        Py_INCREF(value);
#endif
#endif
    } else {
        value = __Pyx_PyObject_CallMethod2(d, __pyx_n_s_setdefault, key, default_value);
    }
    return value;
}

/* GetModuleGlobalName */
              static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* SliceTupleAndList */
                #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_crop_slice(Py_ssize_t* _start, Py_ssize_t* _stop, Py_ssize_t* _length) {
    Py_ssize_t start = *_start, stop = *_stop, length = *_length;
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    *_length = stop - start;
    *_start = start;
    *_stop = stop;
}
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject** CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyList_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyList_New(0);
    dest = PyList_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyListObject*)src)->ob_item + start,
        ((PyListObject*)dest)->ob_item,
        length);
    return dest;
}
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyTuple_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyTuple_New(0);
    dest = PyTuple_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyTupleObject*)src)->ob_item + start,
        ((PyTupleObject*)dest)->ob_item,
        length);
    return dest;
}
#endif

/* GetItemInt */
                static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* StringJoin */
                #if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

/* SetVTable */
                static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* CalculateMetaclass */
                static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
                static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CodeObjectCache */
                static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
                #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
                #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG) -1, const_zero = (unsigned PY_LONG_LONG) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned PY_LONG_LONG) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned PY_LONG_LONG) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned PY_LONG_LONG),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_PY_LONG_LONG(PY_LONG_LONG value) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG) -1, const_zero = (PY_LONG_LONG) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(PY_LONG_LONG) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(PY_LONG_LONG) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(PY_LONG_LONG),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
                static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_As_unsigned_PY_LONG_LONG(PyObject *x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG) -1, const_zero = (unsigned PY_LONG_LONG) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned PY_LONG_LONG) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned PY_LONG_LONG) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned PY_LONG_LONG) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) >= 2 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) >= 3 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) >= 4 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned PY_LONG_LONG) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned PY_LONG_LONG) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) ((((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) ((((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) ((((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned PY_LONG_LONG) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned PY_LONG_LONG val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned PY_LONG_LONG) -1;
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned PY_LONG_LONG) -1;
        val = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned PY_LONG_LONG");
    return (unsigned PY_LONG_LONG) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned PY_LONG_LONG");
    return (unsigned PY_LONG_LONG) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_As_PY_LONG_LONG(PyObject *x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG) -1, const_zero = (PY_LONG_LONG) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(PY_LONG_LONG) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (PY_LONG_LONG) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (PY_LONG_LONG) 0;
                case  1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, digit, digits[0])
                case 2:
                    if (8 * sizeof(PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (PY_LONG_LONG) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(PY_LONG_LONG) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (PY_LONG_LONG) 0;
                case -1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(PY_LONG_LONG) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            PY_LONG_LONG val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (PY_LONG_LONG) -1;
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (PY_LONG_LONG) -1;
        val = __Pyx_PyInt_As_PY_LONG_LONG(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to PY_LONG_LONG");
    return (PY_LONG_LONG) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to PY_LONG_LONG");
    return (PY_LONG_LONG) -1;
}

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
                static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
                static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
                #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
                #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
                static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
